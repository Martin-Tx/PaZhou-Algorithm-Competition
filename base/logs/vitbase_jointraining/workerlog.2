/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0730 13:04:24.187820  1888 tcp_utils.cc:107] Retry to connect to 172.17.0.7:45882 while the server is not yet listening.
I0730 13:04:27.188221  1888 tcp_utils.cc:130] Successfully connected to 172.17.0.7:45882
W0730 13:04:29.237154  1888 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:04:29.238008  1888 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[07/30 13:04:31 ufo]: Rank of current process: 0. World size: 1
[07/30 13:04:34 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:04:34 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:04:34 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1216[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1248[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1280[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1216[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1248[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1280[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:04:34 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fcae9c33040>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.25s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:04:40 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:04:40 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fcaeadeb0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fcaeadf8940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fcaeadfc3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fcaeaa72940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fcaeaa729d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280], 'max_size': 1280}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280], 'max_size': 1280}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fcaeaa76550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fcaeaa764c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fcaeadf89d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fcaeadf8940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fcaeadfc3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fcaeaa6bc10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fcaeaff6d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fcaeaa76550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fcaeaa764c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fcbcfa57670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fcbcfa575e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(512, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(128, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(1024, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(1024, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:04:45 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(512, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(128, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(1024, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(1024, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:04:45 ufo]: Optim:
Weight Decay, params: 
Exception during training:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 114, in forward
    features = self.backbone(self.preprocess_image(batched_inputs))
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/backbones/swin_transformer.py", line 805, in forward
    y = super(SwinTransformer_small_patch4_window7_224_maskformer,
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/backbones/swin_transformer.py", line 682, in forward
    x = self.patch_embed(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/backbones/swin_transformer.py", line 507, in forward
    _, _, H, W = x.shape
AttributeError: 'dict' object has no attribute 'shape'
Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 162, in do_train
    trainer.train(start_iter, cfg.train.max_iter)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 114, in forward
    features = self.backbone(self.preprocess_image(batched_inputs))
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/backbones/swin_transformer.py", line 805, in forward
    y = super(SwinTransformer_small_patch4_window7_224_maskformer,
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/backbones/swin_transformer.py", line 682, in forward
    x = self.patch_embed(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/backbones/swin_transformer.py", line 507, in forward
    _, _, H, W = x.shape
AttributeError: 'dict' object has no attribute 'shape'
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0730 13:05:27.458528  8952 tcp_utils.cc:130] Successfully connected to 172.17.0.7:52066
W0730 13:05:32.632479  8952 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:05:32.633368  8952 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[07/30 13:05:34 ufo]: Rank of current process: 0. World size: 1
[07/30 13:05:37 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:05:37 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:05:37 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1216[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1248[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1280[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1216[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1248[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1280[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:05:37 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f0644cf63a0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.28s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:05:41 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:05:41 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f065110a0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f0651118940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f065111c3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f0650d91940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f0650d919d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280], 'max_size': 1280}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280], 'max_size': 1280}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f0650d97550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f0650d974c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f06511189d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f0651118940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f065111c3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f0650d8bc10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f0651316d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f0650d97550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f0650d974c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f072a336670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f072a3365e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(512, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(128, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(1024, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(1024, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:05:47 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(512, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(128, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(1024, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(1024, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:05:47 ufo]: Optim:
Weight Decay, params: 
Exception during training:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 126, in forward
    task_outputs = self.heads[self.task2head_mapping[task_name]](features, batched_inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/maskformer_head.py", line 102, in forward
    outputs = self.seghead(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/maskformer_head.py", line 758, in forward
    mask_features, transformer_encoder_features = self.pixel_decoder(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/maskformer_head.py", line 270, in forward
    y = self.output_convs[idx](x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddleseg/models/layers/layer_libs.py", line 118, in forward
    x = self._conv(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/nn/layer/conv.py", line 712, in forward
    out = F.conv._conv_nd(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/nn/functional/conv.py", line 140, in _conv_nd
    pre_bias = _C_ops.conv2d(
ValueError: (InvalidArgument) The number of input's channels should be equal to filter's channels * groups for Op(Conv). But received: the input's channels is 768, the input's shape is [1, 768, 23, 40]; the filter's channels is 1024, the filter's shape is [256, 1024, 3, 3]; the groups is 1, the data_format is NCHW. The error may come from wrong data_format setting.
  [Hint: Expected input_channels == filter_dims[1] * groups, but received input_channels:768 != filter_dims[1] * groups:1024.] (at /paddle/paddle/phi/infermeta/binary.cc:529)

Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 162, in do_train
    trainer.train(start_iter, cfg.train.max_iter)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 126, in forward
    task_outputs = self.heads[self.task2head_mapping[task_name]](features, batched_inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/maskformer_head.py", line 102, in forward
    outputs = self.seghead(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/maskformer_head.py", line 758, in forward
    mask_features, transformer_encoder_features = self.pixel_decoder(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/maskformer_head.py", line 270, in forward
    y = self.output_convs[idx](x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddleseg/models/layers/layer_libs.py", line 118, in forward
    x = self._conv(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/nn/layer/conv.py", line 712, in forward
    out = F.conv._conv_nd(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/nn/functional/conv.py", line 140, in _conv_nd
    pre_bias = _C_ops.conv2d(
ValueError: (InvalidArgument) The number of input's channels should be equal to filter's channels * groups for Op(Conv). But received: the input's channels is 768, the input's shape is [1, 768, 23, 40]; the filter's channels is 1024, the filter's shape is [256, 1024, 3, 3]; the groups is 1, the data_format is NCHW. The error may come from wrong data_format setting.
  [Hint: Expected input_channels == filter_dims[1] * groups, but received input_channels:768 != filter_dims[1] * groups:1024.] (at /paddle/paddle/phi/infermeta/binary.cc:529)

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0730 13:07:47.151693 16611 tcp_utils.cc:130] Successfully connected to 172.17.0.7:56069
W0730 13:07:49.280449 16611 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:07:49.281157 16611 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[07/30 13:07:51 ufo]: Rank of current process: 0. World size: 1
[07/30 13:07:53 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:07:53 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:07:53 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1216[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1248[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1280[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1216[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1248[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1280[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:07:53 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7ff26a3b3040>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.21s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:08:00 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:08:00 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7ff27c7ae0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7ff27c7bc940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7ff27c7c03a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7ff27c435940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7ff27c4359d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280], 'max_size': 1280}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280], 'max_size': 1280}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7ff27c43b550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7ff27c43b4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7ff27c7bc9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7ff27c7bc940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7ff27c7c03a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7ff27c42fc10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7ff27c9bad30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7ff27c43b550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7ff27c43b4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7ff34ee92670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7ff34ee925e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:08:03 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:08:04 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690693759 (unix time) try "date -d @1690693759" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x40be) received by PID 16611 (TID 0x7ff3d97d2240) from PID 16574 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0730 13:13:46.634871  1541 tcp_utils.cc:107] Retry to connect to 172.17.0.7:46564 while the server is not yet listening.
I0730 13:13:49.635078  1541 tcp_utils.cc:130] Successfully connected to 172.17.0.7:46564
W0730 13:13:51.280429  1541 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:13:51.281210  1541 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[07/30 13:13:53 ufo]: Rank of current process: 0. World size: 1
[07/30 13:13:56 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:13:56 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:13:56 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, 1152, 1184, 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1088[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, 1152, 1184, 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1088[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:13:56 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f4891f4d2e0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.24s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:14:03 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:14:03 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f489c3350d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f489c341940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f489c3463a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f4892d1c940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f4892d1c9d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1088], 'max_size': 1088}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1088], 'max_size': 1088}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f4892d21550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f4892d214c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f489c3419d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f489c341940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f489c3463a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f4892d15c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f489c540d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f4892d21550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f4892d214c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f497b417670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f497b4175e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:14:07 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:14:07 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690694124 (unix time) try "date -d @1690694124" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x5e4) received by PID 1541 (TID 0x7f4a05d79240) from PID 1508 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0730 13:17:15.122196 10954 tcp_utils.cc:130] Successfully connected to 172.17.0.7:47271
W0730 13:17:16.741894 10954 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:17:16.742705 10954 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[07/30 13:17:19 ufo]: Rank of current process: 0. World size: 1
[07/30 13:17:20 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:17:20 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:17:20 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1184[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                 [39m[38;5;141m1184[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1184[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:17:20 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f7d0a01d2b0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.22s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:17:24 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:17:24 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f7d143da0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f7d143e7940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f7d143ec3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f7d14061940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f7d140619d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1184], 'max_size': 1184}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1184], 'max_size': 1184}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f7d14066550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f7d140664c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f7d143e79d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f7d143e7940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f7d143ec3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f7d1405ac10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f7d145e6d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f7d14066550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f7d140664c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f7df4a68670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f7df4a685e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:17:29 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:17:29 ufo]: Optim:
Weight Decay, params: 
terminate called after throwing an instance of 'paddle::memory::allocation::BadAlloc'
  what():  

--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   egr::Backward(std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> > const&, std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> > const&, bool)
1   egr::RunBackward(std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> > const&, std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> > const&, bool, bool, std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> > const&, bool, std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> > const&)
2   MultiplyGradNode::operator()(paddle::small_vector<std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> >, 15u>&, bool, bool)
3   paddle::experimental::multiply_grad(paddle::experimental::Tensor const&, paddle::experimental::Tensor const&, paddle::experimental::Tensor const&, int, paddle::experimental::Tensor*, paddle::experimental::Tensor*)
4   void phi::ElementwiseMulGrad<float>(phi::GPUContext const&, phi::DenseTensor const&, phi::DenseTensor const&, phi::DenseTensor const&, phi::DenseTensor*, phi::DenseTensor*, int)
5   void phi::GetGradXAndYOut<(phi::ElementwiseType)3, float, phi::funcs::MultiplyGradXYFunctor<float, float> >(phi::GPUContext const&, phi::Place const&, int, std::vector<phi::DenseTensor const*, std::allocator<phi::DenseTensor const*> >, phi::DenseTensor const&, phi::DenseTensor*, phi::DenseTensor*, phi::funcs::MultiplyGradXYFunctor<float, float>)
6   float* phi::DeviceContext::Alloc<float>(phi::TensorBase*, unsigned long, bool) const
7   phi::DeviceContext::Impl::Alloc(phi::TensorBase*, phi::Place const&, paddle::experimental::DataType, unsigned long, bool) const
8   phi::DenseTensor::AllocateFrom(phi::Allocator*, paddle::experimental::DataType, unsigned long)
9   paddle::memory::allocation::StatAllocator::AllocateImpl(unsigned long)
10  paddle::memory::allocation::Allocator::Allocate(unsigned long)
11  paddle::memory::allocation::Allocator::Allocate(unsigned long)
12  paddle::memory::allocation::Allocator::Allocate(unsigned long)
13  paddle::memory::allocation::CUDAAllocator::AllocateImpl(unsigned long)
14  std::string phi::enforce::GetCompleteTraceBackString<std::string >(std::string&&, char const*, int)
15  phi::enforce::GetCurrentTraceBackString[abi:cxx11](bool)

----------------------
Error Message Summary:
----------------------
ResourceExhaustedError: 

Out of memory error on GPU 2. Cannot allocate 2.145370GB memory on GPU 2, 46.189331GB memory has been allocated and available memory is only 1.162109GB.

Please check whether there is any other process using GPU 2.
1. If yes, please stop them, or start PaddlePaddle on another GPU.
2. If no, please decrease the batch size of your model. 
If the above ways do not solve the out of memory problem, you can try to use CUDA managed memory. The command is `export FLAGS_use_cuda_managed_memory=false`.
 (at /paddle/paddle/fluid/memory/allocation/cuda_allocator.cc:95)



--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::pybind::ThrowExceptionToPython(std::__exception_ptr::exception_ptr)

----------------------
Error Message Summary:
----------------------
FatalError: `Process abort signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690694283 (unix time) try "date -d @1690694283" if you are using GNU date ***]
  [SignalInfo: *** SIGABRT (@0x2aca) received by PID 10954 (TID 0x7f7e7b3a4240) from PID 10954 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0730 13:20:42.840222  1524 tcp_utils.cc:130] Successfully connected to 172.17.0.7:60963
W0730 13:20:44.980954  1524 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:20:44.981915  1524 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[07/30 13:20:46 ufo]: Rank of current process: 0. World size: 1
[07/30 13:20:49 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:20:49 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:20:49 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1152[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1152[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:20:49 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fcf1f4e7310>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.24s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:20:54 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:20:54 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fcf2059c0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fcf205a7940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fcf205ad3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fcf20223940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fcf202239d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1152], 'max_size': 1152}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [], 'max_size': 1152}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fcf20227550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fcf202274c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fcf205a79d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fcf205a7940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fcf205ad3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fcf2021ac10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fcf207a6d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fcf20227550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fcf202274c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fd00669d670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fd00669d5e0>}}
fail to map sample transform [RandomShortSideResize_05c6e8] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_213a25] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

Exception in thread Thread-3:
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/threading.py", line 932, in _bootstrap_inner
    self.run()
  File "/root/miniconda3/lib/python3.8/threading.py", line 870, in run
    self._target(*self._args, **self._kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/dataloader_iter.py", line 536, in _thread_loop
    batch = self._get_data()
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/dataloader_iter.py", line 674, in _get_data
    batch.reraise()
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/worker.py", line 172, in reraise
    raise self.exc_type(msg)
IndexError: DataLoader worker(1) caught IndexError with message:
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/worker.py", line 339, in _worker_loop
    batch = fetcher.fetch(indices)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/fetcher.py", line 125, in fetch
    data.append(self.dataset[idx])
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/data/datasets/bases.py", line 261, in __getitem__
    return self.transform(roidb)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_05c6e8] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_213a25] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_05c6e8] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_213a25] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_05c6e8] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_213a25] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_05c6e8] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_213a25] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_05c6e8] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_213a25] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_05c6e8] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_213a25] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_05c6e8] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_213a25] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_05c6e8] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_213a25] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_05c6e8] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_213a25] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:20:58 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:20:58 ufo]: Optim:
Weight Decay, params: 
Exception during training:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 279, in run_step
    data = next(self._data_loader_iter)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/build.py", line 68, in __next__
    batch[name] = next(iter_)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/dataloader_iter.py", line 745, in __next__
    self._reader.read_next_list()[0])
SystemError: (Fatal) Blocking queue is killed because the data reader raises an exception.
  [Hint: Expected killed_ != true, but received killed_:1 == true:1.] (at /paddle/paddle/fluid/operators/reader/blocking_queue.h:175)

Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 162, in do_train
    trainer.train(start_iter, cfg.train.max_iter)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 279, in run_step
    data = next(self._data_loader_iter)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/build.py", line 68, in __next__
    batch[name] = next(iter_)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/dataloader_iter.py", line 745, in __next__
    self._reader.read_next_list()[0])
SystemError: (Fatal) Blocking queue is killed because the data reader raises an exception.
  [Hint: Expected killed_ != true, but received killed_:1 == true:1.] (at /paddle/paddle/fluid/operators/reader/blocking_queue.h:175)



--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
No stack trace in paddle, may be caused by external reasons.

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690694466 (unix time) try "date -d @1690694466" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x5d2) received by PID 1524 (TID 0x7fd090fe1240) from PID 1490 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0730 13:21:25.276958  8591 tcp_utils.cc:130] Successfully connected to 172.17.0.7:62578
W0730 13:21:27.304462  8591 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:21:27.305212  8591 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[07/30 13:21:29 ufo]: Rank of current process: 0. World size: 1
[07/30 13:21:31 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:21:31 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:21:31 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1152[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;141m1152[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1152[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:21:32 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f17ec09ea90>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.22s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:21:39 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:21:39 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f17f848f0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f17f849c940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f17f84a03a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f17f8116940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f17f81169d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1152], 'max_size': 1152}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1152], 'max_size': 1152}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f17f811a550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f17f811a4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f17f849c9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f17f849c940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f17f84a03a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f17f810ec10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f17f8698d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f17f811a550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f17f811a4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f18d3d28670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f18d3d285e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:21:42 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:21:42 ufo]: Optim:
Weight Decay, params: 
terminate called after throwing an instance of 'paddle::memory::allocation::BadAlloc'
  what():  

--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   egr::Backward(std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> > const&, std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> > const&, bool)
1   egr::RunBackward(std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> > const&, std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> > const&, bool, bool, std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> > const&, bool, std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> > const&)
2   MultiplyGradNode::operator()(paddle::small_vector<std::vector<paddle::experimental::Tensor, std::allocator<paddle::experimental::Tensor> >, 15u>&, bool, bool)
3   paddle::experimental::multiply_grad(paddle::experimental::Tensor const&, paddle::experimental::Tensor const&, paddle::experimental::Tensor const&, int, paddle::experimental::Tensor*, paddle::experimental::Tensor*)
4   void phi::ElementwiseMulGrad<float>(phi::GPUContext const&, phi::DenseTensor const&, phi::DenseTensor const&, phi::DenseTensor const&, phi::DenseTensor*, phi::DenseTensor*, int)
5   void phi::GetGradXAndYOut<(phi::ElementwiseType)3, float, phi::funcs::MultiplyGradXYFunctor<float, float> >(phi::GPUContext const&, phi::Place const&, int, std::vector<phi::DenseTensor const*, std::allocator<phi::DenseTensor const*> >, phi::DenseTensor const&, phi::DenseTensor*, phi::DenseTensor*, phi::funcs::MultiplyGradXYFunctor<float, float>)
6   float* phi::DeviceContext::Alloc<float>(phi::TensorBase*, unsigned long, bool) const
7   phi::DeviceContext::Impl::Alloc(phi::TensorBase*, phi::Place const&, paddle::experimental::DataType, unsigned long, bool) const
8   phi::DenseTensor::AllocateFrom(phi::Allocator*, paddle::experimental::DataType, unsigned long)
9   paddle::memory::allocation::StatAllocator::AllocateImpl(unsigned long)
10  paddle::memory::allocation::Allocator::Allocate(unsigned long)
11  paddle::memory::allocation::Allocator::Allocate(unsigned long)
12  paddle::memory::allocation::Allocator::Allocate(unsigned long)
13  paddle::memory::allocation::CUDAAllocator::AllocateImpl(unsigned long)
14  std::string phi::enforce::GetCompleteTraceBackString<std::string >(std::string&&, char const*, int)
15  phi::enforce::GetCurrentTraceBackString[abi:cxx11](bool)

----------------------
Error Message Summary:
----------------------
ResourceExhaustedError: 

Out of memory error on GPU 2. Cannot allocate 1.990646GB memory on GPU 2, 45.441284GB memory has been allocated and available memory is only 1.910156GB.

Please check whether there is any other process using GPU 2.
1. If yes, please stop them, or start PaddlePaddle on another GPU.
2. If no, please decrease the batch size of your model. 
If the above ways do not solve the out of memory problem, you can try to use CUDA managed memory. The command is `export FLAGS_use_cuda_managed_memory=false`.
 (at /paddle/paddle/fluid/memory/allocation/cuda_allocator.cc:95)



--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::pybind::ThrowExceptionToPython(std::__exception_ptr::exception_ptr)

----------------------
Error Message Summary:
----------------------
FatalError: `Process abort signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690694576 (unix time) try "date -d @1690694576" if you are using GNU date ***]
  [SignalInfo: *** SIGABRT (@0x218f) received by PID 8591 (TID 0x7f195e691240) from PID 8591 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0730 13:26:54.648485  1494 tcp_utils.cc:107] Retry to connect to 172.17.0.7:60939 while the server is not yet listening.
I0730 13:26:57.648747  1494 tcp_utils.cc:130] Successfully connected to 172.17.0.7:60939
W0730 13:26:59.905068  1494 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:26:59.906288  1494 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[07/30 13:27:01 ufo]: Rank of current process: 0. World size: 1
[07/30 13:27:05 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:27:05 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:27:05 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1152[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;141m1152[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1152[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:27:05 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f2e73dd60d0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.28s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:27:13 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:27:13 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f2e801d20d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f2e801de940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f2e801e33a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f2e74b9d940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f2e74b9d9d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1152], 'max_size': 1152}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1152], 'max_size': 1152}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f2e74ba1550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f2e74ba14c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f2e801de9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f2e801de940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f2e801e33a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f2e74b95c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f2e803ddd30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f2e74ba1550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f2e74ba14c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f2f59fc8670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f2f59fc85e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:27:17 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:27:17 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690694941 (unix time) try "date -d @1690694941" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x5b4) received by PID 1494 (TID 0x7f2fe4917240) from PID 1460 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0730 13:31:03.430828  1450 tcp_utils.cc:130] Successfully connected to 172.17.0.7:38829
W0730 13:31:05.601326  1450 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:31:05.602164  1450 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[07/30 13:31:07 ufo]: Rank of current process: 0. World size: 1
[07/30 13:31:08 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:31:08 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:31:09 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:31:09 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fe66d674370>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.25s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:31:13 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:31:13 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fe66e7af0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fe66e7bb940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fe66e7c13a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fe66e436940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fe66e4369d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fe66e43b550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fe66e43b4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fe66e7bb9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fe66e7bb940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fe66e7c13a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fe66e42ec10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fe66e9bad30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fe66e43b550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fe66e43b4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fe755c2b670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fe755c2b5e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:31:18 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:31:18 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690695321 (unix time) try "date -d @1690695321" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x587) received by PID 1450 (TID 0x7fe7dc567240) from PID 1415 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0730 13:35:34.402235 12072 tcp_utils.cc:107] Retry to connect to 172.17.0.7:56963 while the server is not yet listening.
I0730 13:35:37.402652 12072 tcp_utils.cc:130] Successfully connected to 172.17.0.7:56963
W0730 13:35:39.980394 12072 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:35:39.981215 12072 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[07/30 13:35:42 ufo]: Rank of current process: 0. World size: 1
[07/30 13:35:45 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:35:45 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:35:45 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:35:46 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fd1ec01f2e0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.23s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:35:52 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:35:52 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fd1ed158040>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fd1ed1638b0>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fd1ed168310>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fd1ecdde8b0>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fd1ecdde940>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fd1ecde24c0>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fd1ecde2430>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fd1ed163940>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fd1ed1638b0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fd1ed168310>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fd1ecdd6b80>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fd1ed361d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fd1ecde24c0>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fd1ecde2430>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fd2c6350670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fd2c63505e0>}}
patch_embed.proj.weight has [96, 3, 4, 4], but patch_embed.proj.weight has (96, 3, 4, 4)
patch_embed.proj.bias has [96], but patch_embed.proj.bias has (96,)
patch_embed.norm.weight has [96], but patch_embed.norm.weight has (96,)
patch_embed.norm.bias has [96], but patch_embed.norm.bias has (96,)
layers.0.blocks.0.norm1.weight has [96], but layers.0.blocks.0.norm1.weight has (96,)
layers.0.blocks.0.norm1.bias has [96], but layers.0.blocks.0.norm1.bias has (96,)
layers.0.blocks.0.attn.relative_position_bias_table has [169, 3], but layers.0.blocks.0.attn.relative_position_bias_table has (169, 3)
layers.0.blocks.0.attn.relative_position_index has [49, 49], but layers.0.blocks.0.attn.relative_position_index has (49, 49)
layers.0.blocks.0.attn.qkv.weight has [96, 288], but layers.0.blocks.0.attn.qkv.weight has (96, 288)
layers.0.blocks.0.attn.qkv.bias has [288], but layers.0.blocks.0.attn.qkv.bias has (288,)
layers.0.blocks.0.attn.proj.weight has [96, 96], but layers.0.blocks.0.attn.proj.weight has (96, 96)
layers.0.blocks.0.attn.proj.bias has [96], but layers.0.blocks.0.attn.proj.bias has (96,)
layers.0.blocks.0.norm2.weight has [96], but layers.0.blocks.0.norm2.weight has (96,)
layers.0.blocks.0.norm2.bias has [96], but layers.0.blocks.0.norm2.bias has (96,)
layers.0.blocks.0.mlp.fc1.weight has [96, 384], but layers.0.blocks.0.mlp.fc1.weight has (96, 384)
layers.0.blocks.0.mlp.fc1.bias has [384], but layers.0.blocks.0.mlp.fc1.bias has (384,)
layers.0.blocks.0.mlp.fc2.weight has [384, 96], but layers.0.blocks.0.mlp.fc2.weight has (384, 96)
layers.0.blocks.0.mlp.fc2.bias has [96], but layers.0.blocks.0.mlp.fc2.bias has (96,)
layers.0.blocks.1.norm1.weight has [96], but layers.0.blocks.1.norm1.weight has (96,)
layers.0.blocks.1.norm1.bias has [96], but layers.0.blocks.1.norm1.bias has (96,)
layers.0.blocks.1.attn.relative_position_bias_table has [169, 3], but layers.0.blocks.1.attn.relative_position_bias_table has (169, 3)
layers.0.blocks.1.attn.relative_position_index has [49, 49], but layers.0.blocks.1.attn.relative_position_index has (49, 49)
layers.0.blocks.1.attn.qkv.weight has [96, 288], but layers.0.blocks.1.attn.qkv.weight has (96, 288)
layers.0.blocks.1.attn.qkv.bias has [288], but layers.0.blocks.1.attn.qkv.bias has (288,)
layers.0.blocks.1.attn.proj.weight has [96, 96], but layers.0.blocks.1.attn.proj.weight has (96, 96)
layers.0.blocks.1.attn.proj.bias has [96], but layers.0.blocks.1.attn.proj.bias has (96,)
layers.0.blocks.1.norm2.weight has [96], but layers.0.blocks.1.norm2.weight has (96,)
layers.0.blocks.1.norm2.bias has [96], but layers.0.blocks.1.norm2.bias has (96,)
layers.0.blocks.1.mlp.fc1.weight has [96, 384], but layers.0.blocks.1.mlp.fc1.weight has (96, 384)
layers.0.blocks.1.mlp.fc1.bias has [384], but layers.0.blocks.1.mlp.fc1.bias has (384,)
layers.0.blocks.1.mlp.fc2.weight has [384, 96], but layers.0.blocks.1.mlp.fc2.weight has (384, 96)
layers.0.blocks.1.mlp.fc2.bias has [96], but layers.0.blocks.1.mlp.fc2.bias has (96,)
layers.0.downsample.reduction.weight has [384, 192], but layers.0.downsample.reduction.weight has (384, 192)
layers.0.downsample.norm.weight has [384], but layers.0.downsample.norm.weight has (384,)
layers.0.downsample.norm.bias has [384], but layers.0.downsample.norm.bias has (384,)
layers.1.blocks.0.norm1.weight has [192], but layers.1.blocks.0.norm1.weight has (192,)
layers.1.blocks.0.norm1.bias has [192], but layers.1.blocks.0.norm1.bias has (192,)
layers.1.blocks.0.attn.relative_position_bias_table has [169, 6], but layers.1.blocks.0.attn.relative_position_bias_table has (169, 6)
layers.1.blocks.0.attn.relative_position_index has [49, 49], but layers.1.blocks.0.attn.relative_position_index has (49, 49)
layers.1.blocks.0.attn.qkv.weight has [192, 576], but layers.1.blocks.0.attn.qkv.weight has (192, 576)
layers.1.blocks.0.attn.qkv.bias has [576], but layers.1.blocks.0.attn.qkv.bias has (576,)
layers.1.blocks.0.attn.proj.weight has [192, 192], but layers.1.blocks.0.attn.proj.weight has (192, 192)
layers.1.blocks.0.attn.proj.bias has [192], but layers.1.blocks.0.attn.proj.bias has (192,)
layers.1.blocks.0.norm2.weight has [192], but layers.1.blocks.0.norm2.weight has (192,)
layers.1.blocks.0.norm2.bias has [192], but layers.1.blocks.0.norm2.bias has (192,)
layers.1.blocks.0.mlp.fc1.weight has [192, 768], but layers.1.blocks.0.mlp.fc1.weight has (192, 768)
layers.1.blocks.0.mlp.fc1.bias has [768], but layers.1.blocks.0.mlp.fc1.bias has (768,)
layers.1.blocks.0.mlp.fc2.weight has [768, 192], but layers.1.blocks.0.mlp.fc2.weight has (768, 192)
layers.1.blocks.0.mlp.fc2.bias has [192], but layers.1.blocks.0.mlp.fc2.bias has (192,)
layers.1.blocks.1.norm1.weight has [192], but layers.1.blocks.1.norm1.weight has (192,)
layers.1.blocks.1.norm1.bias has [192], but layers.1.blocks.1.norm1.bias has (192,)
layers.1.blocks.1.attn.relative_position_bias_table has [169, 6], but layers.1.blocks.1.attn.relative_position_bias_table has (169, 6)
layers.1.blocks.1.attn.relative_position_index has [49, 49], but layers.1.blocks.1.attn.relative_position_index has (49, 49)
layers.1.blocks.1.attn.qkv.weight has [192, 576], but layers.1.blocks.1.attn.qkv.weight has (192, 576)
layers.1.blocks.1.attn.qkv.bias has [576], but layers.1.blocks.1.attn.qkv.bias has (576,)
layers.1.blocks.1.attn.proj.weight has [192, 192], but layers.1.blocks.1.attn.proj.weight has (192, 192)
layers.1.blocks.1.attn.proj.bias has [192], but layers.1.blocks.1.attn.proj.bias has (192,)
layers.1.blocks.1.norm2.weight has [192], but layers.1.blocks.1.norm2.weight has (192,)
layers.1.blocks.1.norm2.bias has [192], but layers.1.blocks.1.norm2.bias has (192,)
layers.1.blocks.1.mlp.fc1.weight has [192, 768], but layers.1.blocks.1.mlp.fc1.weight has (192, 768)
layers.1.blocks.1.mlp.fc1.bias has [768], but layers.1.blocks.1.mlp.fc1.bias has (768,)
layers.1.blocks.1.mlp.fc2.weight has [768, 192], but layers.1.blocks.1.mlp.fc2.weight has (768, 192)
layers.1.blocks.1.mlp.fc2.bias has [192], but layers.1.blocks.1.mlp.fc2.bias has (192,)
layers.1.downsample.reduction.weight has [768, 384], but layers.1.downsample.reduction.weight has (768, 384)
layers.1.downsample.norm.weight has [768], but layers.1.downsample.norm.weight has (768,)
layers.1.downsample.norm.bias has [768], but layers.1.downsample.norm.bias has (768,)
layers.2.blocks.0.norm1.weight has [384], but layers.2.blocks.0.norm1.weight has (384,)
layers.2.blocks.0.norm1.bias has [384], but layers.2.blocks.0.norm1.bias has (384,)
layers.2.blocks.0.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.0.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.0.attn.relative_position_index has [49, 49], but layers.2.blocks.0.attn.relative_position_index has (49, 49)
layers.2.blocks.0.attn.qkv.weight has [384, 1152], but layers.2.blocks.0.attn.qkv.weight has (384, 1152)
layers.2.blocks.0.attn.qkv.bias has [1152], but layers.2.blocks.0.attn.qkv.bias has (1152,)
layers.2.blocks.0.attn.proj.weight has [384, 384], but layers.2.blocks.0.attn.proj.weight has (384, 384)
layers.2.blocks.0.attn.proj.bias has [384], but layers.2.blocks.0.attn.proj.bias has (384,)
layers.2.blocks.0.norm2.weight has [384], but layers.2.blocks.0.norm2.weight has (384,)
layers.2.blocks.0.norm2.bias has [384], but layers.2.blocks.0.norm2.bias has (384,)
layers.2.blocks.0.mlp.fc1.weight has [384, 1536], but layers.2.blocks.0.mlp.fc1.weight has (384, 1536)
layers.2.blocks.0.mlp.fc1.bias has [1536], but layers.2.blocks.0.mlp.fc1.bias has (1536,)
layers.2.blocks.0.mlp.fc2.weight has [1536, 384], but layers.2.blocks.0.mlp.fc2.weight has (1536, 384)
layers.2.blocks.0.mlp.fc2.bias has [384], but layers.2.blocks.0.mlp.fc2.bias has (384,)
layers.2.blocks.1.norm1.weight has [384], but layers.2.blocks.1.norm1.weight has (384,)
layers.2.blocks.1.norm1.bias has [384], but layers.2.blocks.1.norm1.bias has (384,)
layers.2.blocks.1.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.1.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.1.attn.relative_position_index has [49, 49], but layers.2.blocks.1.attn.relative_position_index has (49, 49)
layers.2.blocks.1.attn.qkv.weight has [384, 1152], but layers.2.blocks.1.attn.qkv.weight has (384, 1152)
layers.2.blocks.1.attn.qkv.bias has [1152], but layers.2.blocks.1.attn.qkv.bias has (1152,)
layers.2.blocks.1.attn.proj.weight has [384, 384], but layers.2.blocks.1.attn.proj.weight has (384, 384)
layers.2.blocks.1.attn.proj.bias has [384], but layers.2.blocks.1.attn.proj.bias has (384,)
layers.2.blocks.1.norm2.weight has [384], but layers.2.blocks.1.norm2.weight has (384,)
layers.2.blocks.1.norm2.bias has [384], but layers.2.blocks.1.norm2.bias has (384,)
layers.2.blocks.1.mlp.fc1.weight has [384, 1536], but layers.2.blocks.1.mlp.fc1.weight has (384, 1536)
layers.2.blocks.1.mlp.fc1.bias has [1536], but layers.2.blocks.1.mlp.fc1.bias has (1536,)
layers.2.blocks.1.mlp.fc2.weight has [1536, 384], but layers.2.blocks.1.mlp.fc2.weight has (1536, 384)
layers.2.blocks.1.mlp.fc2.bias has [384], but layers.2.blocks.1.mlp.fc2.bias has (384,)
layers.2.blocks.2.norm1.weight has [384], but layers.2.blocks.2.norm1.weight has (384,)
layers.2.blocks.2.norm1.bias has [384], but layers.2.blocks.2.norm1.bias has (384,)
layers.2.blocks.2.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.2.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.2.attn.relative_position_index has [49, 49], but layers.2.blocks.2.attn.relative_position_index has (49, 49)
layers.2.blocks.2.attn.qkv.weight has [384, 1152], but layers.2.blocks.2.attn.qkv.weight has (384, 1152)
layers.2.blocks.2.attn.qkv.bias has [1152], but layers.2.blocks.2.attn.qkv.bias has (1152,)
layers.2.blocks.2.attn.proj.weight has [384, 384], but layers.2.blocks.2.attn.proj.weight has (384, 384)
layers.2.blocks.2.attn.proj.bias has [384], but layers.2.blocks.2.attn.proj.bias has (384,)
layers.2.blocks.2.norm2.weight has [384], but layers.2.blocks.2.norm2.weight has (384,)
layers.2.blocks.2.norm2.bias has [384], but layers.2.blocks.2.norm2.bias has (384,)
layers.2.blocks.2.mlp.fc1.weight has [384, 1536], but layers.2.blocks.2.mlp.fc1.weight has (384, 1536)
layers.2.blocks.2.mlp.fc1.bias has [1536], but layers.2.blocks.2.mlp.fc1.bias has (1536,)
layers.2.blocks.2.mlp.fc2.weight has [1536, 384], but layers.2.blocks.2.mlp.fc2.weight has (1536, 384)
layers.2.blocks.2.mlp.fc2.bias has [384], but layers.2.blocks.2.mlp.fc2.bias has (384,)
layers.2.blocks.3.norm1.weight has [384], but layers.2.blocks.3.norm1.weight has (384,)
layers.2.blocks.3.norm1.bias has [384], but layers.2.blocks.3.norm1.bias has (384,)
layers.2.blocks.3.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.3.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.3.attn.relative_position_index has [49, 49], but layers.2.blocks.3.attn.relative_position_index has (49, 49)
layers.2.blocks.3.attn.qkv.weight has [384, 1152], but layers.2.blocks.3.attn.qkv.weight has (384, 1152)
layers.2.blocks.3.attn.qkv.bias has [1152], but layers.2.blocks.3.attn.qkv.bias has (1152,)
layers.2.blocks.3.attn.proj.weight has [384, 384], but layers.2.blocks.3.attn.proj.weight has (384, 384)
layers.2.blocks.3.attn.proj.bias has [384], but layers.2.blocks.3.attn.proj.bias has (384,)
layers.2.blocks.3.norm2.weight has [384], but layers.2.blocks.3.norm2.weight has (384,)
layers.2.blocks.3.norm2.bias has [384], but layers.2.blocks.3.norm2.bias has (384,)
layers.2.blocks.3.mlp.fc1.weight has [384, 1536], but layers.2.blocks.3.mlp.fc1.weight has (384, 1536)
layers.2.blocks.3.mlp.fc1.bias has [1536], but layers.2.blocks.3.mlp.fc1.bias has (1536,)
layers.2.blocks.3.mlp.fc2.weight has [1536, 384], but layers.2.blocks.3.mlp.fc2.weight has (1536, 384)
layers.2.blocks.3.mlp.fc2.bias has [384], but layers.2.blocks.3.mlp.fc2.bias has (384,)
layers.2.blocks.4.norm1.weight has [384], but layers.2.blocks.4.norm1.weight has (384,)
layers.2.blocks.4.norm1.bias has [384], but layers.2.blocks.4.norm1.bias has (384,)
layers.2.blocks.4.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.4.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.4.attn.relative_position_index has [49, 49], but layers.2.blocks.4.attn.relative_position_index has (49, 49)
layers.2.blocks.4.attn.qkv.weight has [384, 1152], but layers.2.blocks.4.attn.qkv.weight has (384, 1152)
layers.2.blocks.4.attn.qkv.bias has [1152], but layers.2.blocks.4.attn.qkv.bias has (1152,)
layers.2.blocks.4.attn.proj.weight has [384, 384], but layers.2.blocks.4.attn.proj.weight has (384, 384)
layers.2.blocks.4.attn.proj.bias has [384], but layers.2.blocks.4.attn.proj.bias has (384,)
layers.2.blocks.4.norm2.weight has [384], but layers.2.blocks.4.norm2.weight has (384,)
layers.2.blocks.4.norm2.bias has [384], but layers.2.blocks.4.norm2.bias has (384,)
layers.2.blocks.4.mlp.fc1.weight has [384, 1536], but layers.2.blocks.4.mlp.fc1.weight has (384, 1536)
layers.2.blocks.4.mlp.fc1.bias has [1536], but layers.2.blocks.4.mlp.fc1.bias has (1536,)
layers.2.blocks.4.mlp.fc2.weight has [1536, 384], but layers.2.blocks.4.mlp.fc2.weight has (1536, 384)
layers.2.blocks.4.mlp.fc2.bias has [384], but layers.2.blocks.4.mlp.fc2.bias has (384,)
layers.2.blocks.5.norm1.weight has [384], but layers.2.blocks.5.norm1.weight has (384,)
layers.2.blocks.5.norm1.bias has [384], but layers.2.blocks.5.norm1.bias has (384,)
layers.2.blocks.5.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.5.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.5.attn.relative_position_index has [49, 49], but layers.2.blocks.5.attn.relative_position_index has (49, 49)
layers.2.blocks.5.attn.qkv.weight has [384, 1152], but layers.2.blocks.5.attn.qkv.weight has (384, 1152)
layers.2.blocks.5.attn.qkv.bias has [1152], but layers.2.blocks.5.attn.qkv.bias has (1152,)
layers.2.blocks.5.attn.proj.weight has [384, 384], but layers.2.blocks.5.attn.proj.weight has (384, 384)
layers.2.blocks.5.attn.proj.bias has [384], but layers.2.blocks.5.attn.proj.bias has (384,)
layers.2.blocks.5.norm2.weight has [384], but layers.2.blocks.5.norm2.weight has (384,)
layers.2.blocks.5.norm2.bias has [384], but layers.2.blocks.5.norm2.bias has (384,)
layers.2.blocks.5.mlp.fc1.weight has [384, 1536], but layers.2.blocks.5.mlp.fc1.weight has (384, 1536)
layers.2.blocks.5.mlp.fc1.bias has [1536], but layers.2.blocks.5.mlp.fc1.bias has (1536,)
layers.2.blocks.5.mlp.fc2.weight has [1536, 384], but layers.2.blocks.5.mlp.fc2.weight has (1536, 384)
layers.2.blocks.5.mlp.fc2.bias has [384], but layers.2.blocks.5.mlp.fc2.bias has (384,)
layers.2.blocks.6.norm1.weight has [384], but layers.2.blocks.6.norm1.weight has (384,)
layers.2.blocks.6.norm1.bias has [384], but layers.2.blocks.6.norm1.bias has (384,)
layers.2.blocks.6.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.6.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.6.attn.relative_position_index has [49, 49], but layers.2.blocks.6.attn.relative_position_index has (49, 49)
layers.2.blocks.6.attn.qkv.weight has [384, 1152], but layers.2.blocks.6.attn.qkv.weight has (384, 1152)
layers.2.blocks.6.attn.qkv.bias has [1152], but layers.2.blocks.6.attn.qkv.bias has (1152,)
layers.2.blocks.6.attn.proj.weight has [384, 384], but layers.2.blocks.6.attn.proj.weight has (384, 384)
layers.2.blocks.6.attn.proj.bias has [384], but layers.2.blocks.6.attn.proj.bias has (384,)
layers.2.blocks.6.norm2.weight has [384], but layers.2.blocks.6.norm2.weight has (384,)
layers.2.blocks.6.norm2.bias has [384], but layers.2.blocks.6.norm2.bias has (384,)
layers.2.blocks.6.mlp.fc1.weight has [384, 1536], but layers.2.blocks.6.mlp.fc1.weight has (384, 1536)
layers.2.blocks.6.mlp.fc1.bias has [1536], but layers.2.blocks.6.mlp.fc1.bias has (1536,)
layers.2.blocks.6.mlp.fc2.weight has [1536, 384], but layers.2.blocks.6.mlp.fc2.weight has (1536, 384)
layers.2.blocks.6.mlp.fc2.bias has [384], but layers.2.blocks.6.mlp.fc2.bias has (384,)
layers.2.blocks.7.norm1.weight has [384], but layers.2.blocks.7.norm1.weight has (384,)
layers.2.blocks.7.norm1.bias has [384], but layers.2.blocks.7.norm1.bias has (384,)
layers.2.blocks.7.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.7.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.7.attn.relative_position_index has [49, 49], but layers.2.blocks.7.attn.relative_position_index has (49, 49)
layers.2.blocks.7.attn.qkv.weight has [384, 1152], but layers.2.blocks.7.attn.qkv.weight has (384, 1152)
layers.2.blocks.7.attn.qkv.bias has [1152], but layers.2.blocks.7.attn.qkv.bias has (1152,)
layers.2.blocks.7.attn.proj.weight has [384, 384], but layers.2.blocks.7.attn.proj.weight has (384, 384)
layers.2.blocks.7.attn.proj.bias has [384], but layers.2.blocks.7.attn.proj.bias has (384,)
layers.2.blocks.7.norm2.weight has [384], but layers.2.blocks.7.norm2.weight has (384,)
layers.2.blocks.7.norm2.bias has [384], but layers.2.blocks.7.norm2.bias has (384,)
layers.2.blocks.7.mlp.fc1.weight has [384, 1536], but layers.2.blocks.7.mlp.fc1.weight has (384, 1536)
layers.2.blocks.7.mlp.fc1.bias has [1536], but layers.2.blocks.7.mlp.fc1.bias has (1536,)
layers.2.blocks.7.mlp.fc2.weight has [1536, 384], but layers.2.blocks.7.mlp.fc2.weight has (1536, 384)
layers.2.blocks.7.mlp.fc2.bias has [384], but layers.2.blocks.7.mlp.fc2.bias has (384,)
layers.2.blocks.8.norm1.weight has [384], but layers.2.blocks.8.norm1.weight has (384,)
layers.2.blocks.8.norm1.bias has [384], but layers.2.blocks.8.norm1.bias has (384,)
layers.2.blocks.8.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.8.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.8.attn.relative_position_index has [49, 49], but layers.2.blocks.8.attn.relative_position_index has (49, 49)
layers.2.blocks.8.attn.qkv.weight has [384, 1152], but layers.2.blocks.8.attn.qkv.weight has (384, 1152)
layers.2.blocks.8.attn.qkv.bias has [1152], but layers.2.blocks.8.attn.qkv.bias has (1152,)
layers.2.blocks.8.attn.proj.weight has [384, 384], but layers.2.blocks.8.attn.proj.weight has (384, 384)
layers.2.blocks.8.attn.proj.bias has [384], but layers.2.blocks.8.attn.proj.bias has (384,)
layers.2.blocks.8.norm2.weight has [384], but layers.2.blocks.8.norm2.weight has (384,)
layers.2.blocks.8.norm2.bias has [384], but layers.2.blocks.8.norm2.bias has (384,)
layers.2.blocks.8.mlp.fc1.weight has [384, 1536], but layers.2.blocks.8.mlp.fc1.weight has (384, 1536)
layers.2.blocks.8.mlp.fc1.bias has [1536], but layers.2.blocks.8.mlp.fc1.bias has (1536,)
layers.2.blocks.8.mlp.fc2.weight has [1536, 384], but layers.2.blocks.8.mlp.fc2.weight has (1536, 384)
layers.2.blocks.8.mlp.fc2.bias has [384], but layers.2.blocks.8.mlp.fc2.bias has (384,)
layers.2.blocks.9.norm1.weight has [384], but layers.2.blocks.9.norm1.weight has (384,)
layers.2.blocks.9.norm1.bias has [384], but layers.2.blocks.9.norm1.bias has (384,)
layers.2.blocks.9.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.9.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.9.attn.relative_position_index has [49, 49], but layers.2.blocks.9.attn.relative_position_index has (49, 49)
layers.2.blocks.9.attn.qkv.weight has [384, 1152], but layers.2.blocks.9.attn.qkv.weight has (384, 1152)
layers.2.blocks.9.attn.qkv.bias has [1152], but layers.2.blocks.9.attn.qkv.bias has (1152,)
layers.2.blocks.9.attn.proj.weight has [384, 384], but layers.2.blocks.9.attn.proj.weight has (384, 384)
layers.2.blocks.9.attn.proj.bias has [384], but layers.2.blocks.9.attn.proj.bias has (384,)
layers.2.blocks.9.norm2.weight has [384], but layers.2.blocks.9.norm2.weight has (384,)
layers.2.blocks.9.norm2.bias has [384], but layers.2.blocks.9.norm2.bias has (384,)
layers.2.blocks.9.mlp.fc1.weight has [384, 1536], but layers.2.blocks.9.mlp.fc1.weight has (384, 1536)
layers.2.blocks.9.mlp.fc1.bias has [1536], but layers.2.blocks.9.mlp.fc1.bias has (1536,)
layers.2.blocks.9.mlp.fc2.weight has [1536, 384], but layers.2.blocks.9.mlp.fc2.weight has (1536, 384)
layers.2.blocks.9.mlp.fc2.bias has [384], but layers.2.blocks.9.mlp.fc2.bias has (384,)
layers.2.blocks.10.norm1.weight has [384], but layers.2.blocks.10.norm1.weight has (384,)
layers.2.blocks.10.norm1.bias has [384], but layers.2.blocks.10.norm1.bias has (384,)
layers.2.blocks.10.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.10.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.10.attn.relative_position_index has [49, 49], but layers.2.blocks.10.attn.relative_position_index has (49, 49)
layers.2.blocks.10.attn.qkv.weight has [384, 1152], but layers.2.blocks.10.attn.qkv.weight has (384, 1152)
layers.2.blocks.10.attn.qkv.bias has [1152], but layers.2.blocks.10.attn.qkv.bias has (1152,)
layers.2.blocks.10.attn.proj.weight has [384, 384], but layers.2.blocks.10.attn.proj.weight has (384, 384)
layers.2.blocks.10.attn.proj.bias has [384], but layers.2.blocks.10.attn.proj.bias has (384,)
layers.2.blocks.10.norm2.weight has [384], but layers.2.blocks.10.norm2.weight has (384,)
layers.2.blocks.10.norm2.bias has [384], but layers.2.blocks.10.norm2.bias has (384,)
layers.2.blocks.10.mlp.fc1.weight has [384, 1536], but layers.2.blocks.10.mlp.fc1.weight has (384, 1536)
layers.2.blocks.10.mlp.fc1.bias has [1536], but layers.2.blocks.10.mlp.fc1.bias has (1536,)
layers.2.blocks.10.mlp.fc2.weight has [1536, 384], but layers.2.blocks.10.mlp.fc2.weight has (1536, 384)
layers.2.blocks.10.mlp.fc2.bias has [384], but layers.2.blocks.10.mlp.fc2.bias has (384,)
layers.2.blocks.11.norm1.weight has [384], but layers.2.blocks.11.norm1.weight has (384,)
layers.2.blocks.11.norm1.bias has [384], but layers.2.blocks.11.norm1.bias has (384,)
layers.2.blocks.11.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.11.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.11.attn.relative_position_index has [49, 49], but layers.2.blocks.11.attn.relative_position_index has (49, 49)
layers.2.blocks.11.attn.qkv.weight has [384, 1152], but layers.2.blocks.11.attn.qkv.weight has (384, 1152)
layers.2.blocks.11.attn.qkv.bias has [1152], but layers.2.blocks.11.attn.qkv.bias has (1152,)
layers.2.blocks.11.attn.proj.weight has [384, 384], but layers.2.blocks.11.attn.proj.weight has (384, 384)
layers.2.blocks.11.attn.proj.bias has [384], but layers.2.blocks.11.attn.proj.bias has (384,)
layers.2.blocks.11.norm2.weight has [384], but layers.2.blocks.11.norm2.weight has (384,)
layers.2.blocks.11.norm2.bias has [384], but layers.2.blocks.11.norm2.bias has (384,)
layers.2.blocks.11.mlp.fc1.weight has [384, 1536], but layers.2.blocks.11.mlp.fc1.weight has (384, 1536)
layers.2.blocks.11.mlp.fc1.bias has [1536], but layers.2.blocks.11.mlp.fc1.bias has (1536,)
layers.2.blocks.11.mlp.fc2.weight has [1536, 384], but layers.2.blocks.11.mlp.fc2.weight has (1536, 384)
layers.2.blocks.11.mlp.fc2.bias has [384], but layers.2.blocks.11.mlp.fc2.bias has (384,)
layers.2.blocks.12.norm1.weight has [384], but layers.2.blocks.12.norm1.weight has (384,)
layers.2.blocks.12.norm1.bias has [384], but layers.2.blocks.12.norm1.bias has (384,)
layers.2.blocks.12.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.12.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.12.attn.relative_position_index has [49, 49], but layers.2.blocks.12.attn.relative_position_index has (49, 49)
layers.2.blocks.12.attn.qkv.weight has [384, 1152], but layers.2.blocks.12.attn.qkv.weight has (384, 1152)
layers.2.blocks.12.attn.qkv.bias has [1152], but layers.2.blocks.12.attn.qkv.bias has (1152,)
layers.2.blocks.12.attn.proj.weight has [384, 384], but layers.2.blocks.12.attn.proj.weight has (384, 384)
layers.2.blocks.12.attn.proj.bias has [384], but layers.2.blocks.12.attn.proj.bias has (384,)
layers.2.blocks.12.norm2.weight has [384], but layers.2.blocks.12.norm2.weight has (384,)
layers.2.blocks.12.norm2.bias has [384], but layers.2.blocks.12.norm2.bias has (384,)
layers.2.blocks.12.mlp.fc1.weight has [384, 1536], but layers.2.blocks.12.mlp.fc1.weight has (384, 1536)
layers.2.blocks.12.mlp.fc1.bias has [1536], but layers.2.blocks.12.mlp.fc1.bias has (1536,)
layers.2.blocks.12.mlp.fc2.weight has [1536, 384], but layers.2.blocks.12.mlp.fc2.weight has (1536, 384)
layers.2.blocks.12.mlp.fc2.bias has [384], but layers.2.blocks.12.mlp.fc2.bias has (384,)
layers.2.blocks.13.norm1.weight has [384], but layers.2.blocks.13.norm1.weight has (384,)
layers.2.blocks.13.norm1.bias has [384], but layers.2.blocks.13.norm1.bias has (384,)
layers.2.blocks.13.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.13.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.13.attn.relative_position_index has [49, 49], but layers.2.blocks.13.attn.relative_position_index has (49, 49)
layers.2.blocks.13.attn.qkv.weight has [384, 1152], but layers.2.blocks.13.attn.qkv.weight has (384, 1152)
layers.2.blocks.13.attn.qkv.bias has [1152], but layers.2.blocks.13.attn.qkv.bias has (1152,)
layers.2.blocks.13.attn.proj.weight has [384, 384], but layers.2.blocks.13.attn.proj.weight has (384, 384)
layers.2.blocks.13.attn.proj.bias has [384], but layers.2.blocks.13.attn.proj.bias has (384,)
layers.2.blocks.13.norm2.weight has [384], but layers.2.blocks.13.norm2.weight has (384,)
layers.2.blocks.13.norm2.bias has [384], but layers.2.blocks.13.norm2.bias has (384,)
layers.2.blocks.13.mlp.fc1.weight has [384, 1536], but layers.2.blocks.13.mlp.fc1.weight has (384, 1536)
layers.2.blocks.13.mlp.fc1.bias has [1536], but layers.2.blocks.13.mlp.fc1.bias has (1536,)
layers.2.blocks.13.mlp.fc2.weight has [1536, 384], but layers.2.blocks.13.mlp.fc2.weight has (1536, 384)
layers.2.blocks.13.mlp.fc2.bias has [384], but layers.2.blocks.13.mlp.fc2.bias has (384,)
layers.2.blocks.14.norm1.weight has [384], but layers.2.blocks.14.norm1.weight has (384,)
layers.2.blocks.14.norm1.bias has [384], but layers.2.blocks.14.norm1.bias has (384,)
layers.2.blocks.14.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.14.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.14.attn.relative_position_index has [49, 49], but layers.2.blocks.14.attn.relative_position_index has (49, 49)
layers.2.blocks.14.attn.qkv.weight has [384, 1152], but layers.2.blocks.14.attn.qkv.weight has (384, 1152)
layers.2.blocks.14.attn.qkv.bias has [1152], but layers.2.blocks.14.attn.qkv.bias has (1152,)
layers.2.blocks.14.attn.proj.weight has [384, 384], but layers.2.blocks.14.attn.proj.weight has (384, 384)
layers.2.blocks.14.attn.proj.bias has [384], but layers.2.blocks.14.attn.proj.bias has (384,)
layers.2.blocks.14.norm2.weight has [384], but layers.2.blocks.14.norm2.weight has (384,)
layers.2.blocks.14.norm2.bias has [384], but layers.2.blocks.14.norm2.bias has (384,)
layers.2.blocks.14.mlp.fc1.weight has [384, 1536], but layers.2.blocks.14.mlp.fc1.weight has (384, 1536)
layers.2.blocks.14.mlp.fc1.bias has [1536], but layers.2.blocks.14.mlp.fc1.bias has (1536,)
layers.2.blocks.14.mlp.fc2.weight has [1536, 384], but layers.2.blocks.14.mlp.fc2.weight has (1536, 384)
layers.2.blocks.14.mlp.fc2.bias has [384], but layers.2.blocks.14.mlp.fc2.bias has (384,)
layers.2.blocks.15.norm1.weight has [384], but layers.2.blocks.15.norm1.weight has (384,)
layers.2.blocks.15.norm1.bias has [384], but layers.2.blocks.15.norm1.bias has (384,)
layers.2.blocks.15.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.15.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.15.attn.relative_position_index has [49, 49], but layers.2.blocks.15.attn.relative_position_index has (49, 49)
layers.2.blocks.15.attn.qkv.weight has [384, 1152], but layers.2.blocks.15.attn.qkv.weight has (384, 1152)
layers.2.blocks.15.attn.qkv.bias has [1152], but layers.2.blocks.15.attn.qkv.bias has (1152,)
layers.2.blocks.15.attn.proj.weight has [384, 384], but layers.2.blocks.15.attn.proj.weight has (384, 384)
layers.2.blocks.15.attn.proj.bias has [384], but layers.2.blocks.15.attn.proj.bias has (384,)
layers.2.blocks.15.norm2.weight has [384], but layers.2.blocks.15.norm2.weight has (384,)
layers.2.blocks.15.norm2.bias has [384], but layers.2.blocks.15.norm2.bias has (384,)
layers.2.blocks.15.mlp.fc1.weight has [384, 1536], but layers.2.blocks.15.mlp.fc1.weight has (384, 1536)
layers.2.blocks.15.mlp.fc1.bias has [1536], but layers.2.blocks.15.mlp.fc1.bias has (1536,)
layers.2.blocks.15.mlp.fc2.weight has [1536, 384], but layers.2.blocks.15.mlp.fc2.weight has (1536, 384)
layers.2.blocks.15.mlp.fc2.bias has [384], but layers.2.blocks.15.mlp.fc2.bias has (384,)
layers.2.blocks.16.norm1.weight has [384], but layers.2.blocks.16.norm1.weight has (384,)
layers.2.blocks.16.norm1.bias has [384], but layers.2.blocks.16.norm1.bias has (384,)
layers.2.blocks.16.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.16.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.16.attn.relative_position_index has [49, 49], but layers.2.blocks.16.attn.relative_position_index has (49, 49)
layers.2.blocks.16.attn.qkv.weight has [384, 1152], but layers.2.blocks.16.attn.qkv.weight has (384, 1152)
layers.2.blocks.16.attn.qkv.bias has [1152], but layers.2.blocks.16.attn.qkv.bias has (1152,)
layers.2.blocks.16.attn.proj.weight has [384, 384], but layers.2.blocks.16.attn.proj.weight has (384, 384)
layers.2.blocks.16.attn.proj.bias has [384], but layers.2.blocks.16.attn.proj.bias has (384,)
layers.2.blocks.16.norm2.weight has [384], but layers.2.blocks.16.norm2.weight has (384,)
layers.2.blocks.16.norm2.bias has [384], but layers.2.blocks.16.norm2.bias has (384,)
layers.2.blocks.16.mlp.fc1.weight has [384, 1536], but layers.2.blocks.16.mlp.fc1.weight has (384, 1536)
layers.2.blocks.16.mlp.fc1.bias has [1536], but layers.2.blocks.16.mlp.fc1.bias has (1536,)
layers.2.blocks.16.mlp.fc2.weight has [1536, 384], but layers.2.blocks.16.mlp.fc2.weight has (1536, 384)
layers.2.blocks.16.mlp.fc2.bias has [384], but layers.2.blocks.16.mlp.fc2.bias has (384,)
layers.2.blocks.17.norm1.weight has [384], but layers.2.blocks.17.norm1.weight has (384,)
layers.2.blocks.17.norm1.bias has [384], but layers.2.blocks.17.norm1.bias has (384,)
layers.2.blocks.17.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.17.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.17.attn.relative_position_index has [49, 49], but layers.2.blocks.17.attn.relative_position_index has (49, 49)
layers.2.blocks.17.attn.qkv.weight has [384, 1152], but layers.2.blocks.17.attn.qkv.weight has (384, 1152)
layers.2.blocks.17.attn.qkv.bias has [1152], but layers.2.blocks.17.attn.qkv.bias has (1152,)
layers.2.blocks.17.attn.proj.weight has [384, 384], but layers.2.blocks.17.attn.proj.weight has (384, 384)
layers.2.blocks.17.attn.proj.bias has [384], but layers.2.blocks.17.attn.proj.bias has (384,)
layers.2.blocks.17.norm2.weight has [384], but layers.2.blocks.17.norm2.weight has (384,)
layers.2.blocks.17.norm2.bias has [384], but layers.2.blocks.17.norm2.bias has (384,)
layers.2.blocks.17.mlp.fc1.weight has [384, 1536], but layers.2.blocks.17.mlp.fc1.weight has (384, 1536)
layers.2.blocks.17.mlp.fc1.bias has [1536], but layers.2.blocks.17.mlp.fc1.bias has (1536,)
layers.2.blocks.17.mlp.fc2.weight has [1536, 384], but layers.2.blocks.17.mlp.fc2.weight has (1536, 384)
layers.2.blocks.17.mlp.fc2.bias has [384], but layers.2.blocks.17.mlp.fc2.bias has (384,)
layers.2.downsample.reduction.weight has [1536, 768], but layers.2.downsample.reduction.weight has (1536, 768)
layers.2.downsample.norm.weight has [1536], but layers.2.downsample.norm.weight has (1536,)
layers.2.downsample.norm.bias has [1536], but layers.2.downsample.norm.bias has (1536,)
layers.3.blocks.0.norm1.weight has [768], but layers.3.blocks.0.norm1.weight has (768,)
layers.3.blocks.0.norm1.bias has [768], but layers.3.blocks.0.norm1.bias has (768,)
layers.3.blocks.0.attn.relative_position_bias_table has [169, 24], but layers.3.blocks.0.attn.relative_position_bias_table has (169, 24)
layers.3.blocks.0.attn.relative_position_index has [49, 49], but layers.3.blocks.0.attn.relative_position_index has (49, 49)
layers.3.blocks.0.attn.qkv.weight has [768, 2304], but layers.3.blocks.0.attn.qkv.weight has (768, 2304)
layers.3.blocks.0.attn.qkv.bias has [2304], but layers.3.blocks.0.attn.qkv.bias has (2304,)
layers.3.blocks.0.attn.proj.weight has [768, 768], but layers.3.blocks.0.attn.proj.weight has (768, 768)
layers.3.blocks.0.attn.proj.bias has [768], but layers.3.blocks.0.attn.proj.bias has (768,)
layers.3.blocks.0.norm2.weight has [768], but layers.3.blocks.0.norm2.weight has (768,)
layers.3.blocks.0.norm2.bias has [768], but layers.3.blocks.0.norm2.bias has (768,)
layers.3.blocks.0.mlp.fc1.weight has [768, 3072], but layers.3.blocks.0.mlp.fc1.weight has (768, 3072)
layers.3.blocks.0.mlp.fc1.bias has [3072], but layers.3.blocks.0.mlp.fc1.bias has (3072,)
layers.3.blocks.0.mlp.fc2.weight has [3072, 768], but layers.3.blocks.0.mlp.fc2.weight has (3072, 768)
layers.3.blocks.0.mlp.fc2.bias has [768], but layers.3.blocks.0.mlp.fc2.bias has (768,)
layers.3.blocks.1.norm1.weight has [768], but layers.3.blocks.1.norm1.weight has (768,)
layers.3.blocks.1.norm1.bias has [768], but layers.3.blocks.1.norm1.bias has (768,)
layers.3.blocks.1.attn.relative_position_bias_table has [169, 24], but layers.3.blocks.1.attn.relative_position_bias_table has (169, 24)
layers.3.blocks.1.attn.relative_position_index has [49, 49], but layers.3.blocks.1.attn.relative_position_index has (49, 49)
layers.3.blocks.1.attn.qkv.weight has [768, 2304], but layers.3.blocks.1.attn.qkv.weight has (768, 2304)
layers.3.blocks.1.attn.qkv.bias has [2304], but layers.3.blocks.1.attn.qkv.bias has (2304,)
layers.3.blocks.1.attn.proj.weight has [768, 768], but layers.3.blocks.1.attn.proj.weight has (768, 768)
layers.3.blocks.1.attn.proj.bias has [768], but layers.3.blocks.1.attn.proj.bias has (768,)
layers.3.blocks.1.norm2.weight has [768], but layers.3.blocks.1.norm2.weight has (768,)
layers.3.blocks.1.norm2.bias has [768], but layers.3.blocks.1.norm2.bias has (768,)
layers.3.blocks.1.mlp.fc1.weight has [768, 3072], but layers.3.blocks.1.mlp.fc1.weight has (768, 3072)
layers.3.blocks.1.mlp.fc1.bias has [3072], but layers.3.blocks.1.mlp.fc1.bias has (3072,)
layers.3.blocks.1.mlp.fc2.weight has [3072, 768], but layers.3.blocks.1.mlp.fc2.weight has (3072, 768)
layers.3.blocks.1.mlp.fc2.bias has [768], but layers.3.blocks.1.mlp.fc2.bias has (768,)
patch_embed.proj.weight has (96, 3, 4, 4), but patch_embed.proj.weight has [96, 3, 4, 4]
patch_embed.proj.bias has (96,), but patch_embed.proj.bias has [96]
patch_embed.norm.weight has (96,), but patch_embed.norm.weight has [96]
patch_embed.norm.bias has (96,), but patch_embed.norm.bias has [96]
layers.0.blocks.0.norm1.weight has (96,), but layers.0.blocks.0.norm1.weight has [96]
layers.0.blocks.0.norm1.bias has (96,), but layers.0.blocks.0.norm1.bias has [96]
layers.0.blocks.0.attn.qkv.weight has (96, 288), but layers.0.blocks.0.attn.qkv.weight has [96, 288]
layers.0.blocks.0.attn.qkv.bias has (288,), but layers.0.blocks.0.attn.qkv.bias has [288]
layers.0.blocks.0.attn.proj.weight has (96, 96), but layers.0.blocks.0.attn.proj.weight has [96, 96]
layers.0.blocks.0.attn.proj.bias has (96,), but layers.0.blocks.0.attn.proj.bias has [96]
layers.0.blocks.0.norm2.weight has (96,), but layers.0.blocks.0.norm2.weight has [96]
layers.0.blocks.0.norm2.bias has (96,), but layers.0.blocks.0.norm2.bias has [96]
layers.0.blocks.0.mlp.fc1.weight has (96, 384), but layers.0.blocks.0.mlp.fc1.weight has [96, 384]
layers.0.blocks.0.mlp.fc1.bias has (384,), but layers.0.blocks.0.mlp.fc1.bias has [384]
layers.0.blocks.0.mlp.fc2.weight has (384, 96), but layers.0.blocks.0.mlp.fc2.weight has [384, 96]
layers.0.blocks.0.mlp.fc2.bias has (96,), but layers.0.blocks.0.mlp.fc2.bias has [96]
layers.0.blocks.1.norm1.weight has (96,), but layers.0.blocks.1.norm1.weight has [96]
layers.0.blocks.1.norm1.bias has (96,), but layers.0.blocks.1.norm1.bias has [96]
layers.0.blocks.1.attn.qkv.weight has (96, 288), but layers.0.blocks.1.attn.qkv.weight has [96, 288]
layers.0.blocks.1.attn.qkv.bias has (288,), but layers.0.blocks.1.attn.qkv.bias has [288]
layers.0.blocks.1.attn.proj.weight has (96, 96), but layers.0.blocks.1.attn.proj.weight has [96, 96]
layers.0.blocks.1.attn.proj.bias has (96,), but layers.0.blocks.1.attn.proj.bias has [96]
layers.0.blocks.1.norm2.weight has (96,), but layers.0.blocks.1.norm2.weight has [96]
layers.0.blocks.1.norm2.bias has (96,), but layers.0.blocks.1.norm2.bias has [96]
layers.0.blocks.1.mlp.fc1.weight has (96, 384), but layers.0.blocks.1.mlp.fc1.weight has [96, 384]
layers.0.blocks.1.mlp.fc1.bias has (384,), but layers.0.blocks.1.mlp.fc1.bias has [384]
layers.0.blocks.1.mlp.fc2.weight has (384, 96), but layers.0.blocks.1.mlp.fc2.weight has [384, 96]
layers.0.blocks.1.mlp.fc2.bias has (96,), but layers.0.blocks.1.mlp.fc2.bias has [96]
layers.0.downsample.norm.weight has (384,), but layers.0.downsample.norm.weight has [384]
layers.0.downsample.norm.bias has (384,), but layers.0.downsample.norm.bias has [384]
layers.1.blocks.0.norm1.weight has (192,), but layers.1.blocks.0.norm1.weight has [192]
layers.1.blocks.0.norm1.bias has (192,), but layers.1.blocks.0.norm1.bias has [192]
layers.1.blocks.0.attn.qkv.weight has (192, 576), but layers.1.blocks.0.attn.qkv.weight has [192, 576]
layers.1.blocks.0.attn.qkv.bias has (576,), but layers.1.blocks.0.attn.qkv.bias has [576]
layers.1.blocks.0.attn.proj.weight has (192, 192), but layers.1.blocks.0.attn.proj.weight has [192, 192]
layers.1.blocks.0.attn.proj.bias has (192,), but layers.1.blocks.0.attn.proj.bias has [192]
layers.1.blocks.0.norm2.weight has (192,), but layers.1.blocks.0.norm2.weight has [192]
layers.1.blocks.0.norm2.bias has (192,), but layers.1.blocks.0.norm2.bias has [192]
layers.1.blocks.0.mlp.fc1.weight has (192, 768), but layers.1.blocks.0.mlp.fc1.weight has [192, 768]
layers.1.blocks.0.mlp.fc1.bias has (768,), but layers.1.blocks.0.mlp.fc1.bias has [768]
layers.1.blocks.0.mlp.fc2.weight has (768, 192), but layers.1.blocks.0.mlp.fc2.weight has [768, 192]
layers.1.blocks.0.mlp.fc2.bias has (192,), but layers.1.blocks.0.mlp.fc2.bias has [192]
layers.1.blocks.1.norm1.weight has (192,), but layers.1.blocks.1.norm1.weight has [192]
layers.1.blocks.1.norm1.bias has (192,), but layers.1.blocks.1.norm1.bias has [192]
layers.1.blocks.1.attn.qkv.weight has (192, 576), but layers.1.blocks.1.attn.qkv.weight has [192, 576]
layers.1.blocks.1.attn.qkv.bias has (576,), but layers.1.blocks.1.attn.qkv.bias has [576]
layers.1.blocks.1.attn.proj.weight has (192, 192), but layers.1.blocks.1.attn.proj.weight has [192, 192]
layers.1.blocks.1.attn.proj.bias has (192,), but layers.1.blocks.1.attn.proj.bias has [192]
layers.1.blocks.1.norm2.weight has (192,), but layers.1.blocks.1.norm2.weight has [192]
layers.1.blocks.1.norm2.bias has (192,), but layers.1.blocks.1.norm2.bias has [192]
layers.1.blocks.1.mlp.fc1.weight has (192, 768), but layers.1.blocks.1.mlp.fc1.weight has [192, 768]
layers.1.blocks.1.mlp.fc1.bias has (768,), but layers.1.blocks.1.mlp.fc1.bias has [768]
layers.1.blocks.1.mlp.fc2.weight has (768, 192), but layers.1.blocks.1.mlp.fc2.weight has [768, 192]
layers.1.blocks.1.mlp.fc2.bias has (192,), but layers.1.blocks.1.mlp.fc2.bias has [192]
layers.1.downsample.norm.weight has (768,), but layers.1.downsample.norm.weight has [768]
layers.1.downsample.norm.bias has (768,), but layers.1.downsample.norm.bias has [768]
layers.2.blocks.0.norm1.weight has (384,), but layers.2.blocks.0.norm1.weight has [384]
layers.2.blocks.0.norm1.bias has (384,), but layers.2.blocks.0.norm1.bias has [384]
layers.2.blocks.0.attn.qkv.weight has (384, 1152), but layers.2.blocks.0.attn.qkv.weight has [384, 1152]
layers.2.blocks.0.attn.qkv.bias has (1152,), but layers.2.blocks.0.attn.qkv.bias has [1152]
layers.2.blocks.0.attn.proj.weight has (384, 384), but layers.2.blocks.0.attn.proj.weight has [384, 384]
layers.2.blocks.0.attn.proj.bias has (384,), but layers.2.blocks.0.attn.proj.bias has [384]
layers.2.blocks.0.norm2.weight has (384,), but layers.2.blocks.0.norm2.weight has [384]
layers.2.blocks.0.norm2.bias has (384,), but layers.2.blocks.0.norm2.bias has [384]
layers.2.blocks.0.mlp.fc1.weight has (384, 1536), but layers.2.blocks.0.mlp.fc1.weight has [384, 1536]
layers.2.blocks.0.mlp.fc1.bias has (1536,), but layers.2.blocks.0.mlp.fc1.bias has [1536]
layers.2.blocks.0.mlp.fc2.weight has (1536, 384), but layers.2.blocks.0.mlp.fc2.weight has [1536, 384]
layers.2.blocks.0.mlp.fc2.bias has (384,), but layers.2.blocks.0.mlp.fc2.bias has [384]
layers.2.blocks.1.norm1.weight has (384,), but layers.2.blocks.1.norm1.weight has [384]
layers.2.blocks.1.norm1.bias has (384,), but layers.2.blocks.1.norm1.bias has [384]
layers.2.blocks.1.attn.qkv.weight has (384, 1152), but layers.2.blocks.1.attn.qkv.weight has [384, 1152]
layers.2.blocks.1.attn.qkv.bias has (1152,), but layers.2.blocks.1.attn.qkv.bias has [1152]
layers.2.blocks.1.attn.proj.weight has (384, 384), but layers.2.blocks.1.attn.proj.weight has [384, 384]
layers.2.blocks.1.attn.proj.bias has (384,), but layers.2.blocks.1.attn.proj.bias has [384]
layers.2.blocks.1.norm2.weight has (384,), but layers.2.blocks.1.norm2.weight has [384]
layers.2.blocks.1.norm2.bias has (384,), but layers.2.blocks.1.norm2.bias has [384]
layers.2.blocks.1.mlp.fc1.weight has (384, 1536), but layers.2.blocks.1.mlp.fc1.weight has [384, 1536]
layers.2.blocks.1.mlp.fc1.bias has (1536,), but layers.2.blocks.1.mlp.fc1.bias has [1536]
layers.2.blocks.1.mlp.fc2.weight has (1536, 384), but layers.2.blocks.1.mlp.fc2.weight has [1536, 384]
layers.2.blocks.1.mlp.fc2.bias has (384,), but layers.2.blocks.1.mlp.fc2.bias has [384]
layers.2.blocks.2.norm1.weight has (384,), but layers.2.blocks.2.norm1.weight has [384]
layers.2.blocks.2.norm1.bias has (384,), but layers.2.blocks.2.norm1.bias has [384]
layers.2.blocks.2.attn.qkv.weight has (384, 1152), but layers.2.blocks.2.attn.qkv.weight has [384, 1152]
layers.2.blocks.2.attn.qkv.bias has (1152,), but layers.2.blocks.2.attn.qkv.bias has [1152]
layers.2.blocks.2.attn.proj.weight has (384, 384), but layers.2.blocks.2.attn.proj.weight has [384, 384]
layers.2.blocks.2.attn.proj.bias has (384,), but layers.2.blocks.2.attn.proj.bias has [384]
layers.2.blocks.2.norm2.weight has (384,), but layers.2.blocks.2.norm2.weight has [384]
layers.2.blocks.2.norm2.bias has (384,), but layers.2.blocks.2.norm2.bias has [384]
layers.2.blocks.2.mlp.fc1.weight has (384, 1536), but layers.2.blocks.2.mlp.fc1.weight has [384, 1536]
layers.2.blocks.2.mlp.fc1.bias has (1536,), but layers.2.blocks.2.mlp.fc1.bias has [1536]
layers.2.blocks.2.mlp.fc2.weight has (1536, 384), but layers.2.blocks.2.mlp.fc2.weight has [1536, 384]
layers.2.blocks.2.mlp.fc2.bias has (384,), but layers.2.blocks.2.mlp.fc2.bias has [384]
layers.2.blocks.3.norm1.weight has (384,), but layers.2.blocks.3.norm1.weight has [384]
layers.2.blocks.3.norm1.bias has (384,), but layers.2.blocks.3.norm1.bias has [384]
layers.2.blocks.3.attn.qkv.weight has (384, 1152), but layers.2.blocks.3.attn.qkv.weight has [384, 1152]
layers.2.blocks.3.attn.qkv.bias has (1152,), but layers.2.blocks.3.attn.qkv.bias has [1152]
layers.2.blocks.3.attn.proj.weight has (384, 384), but layers.2.blocks.3.attn.proj.weight has [384, 384]
layers.2.blocks.3.attn.proj.bias has (384,), but layers.2.blocks.3.attn.proj.bias has [384]
layers.2.blocks.3.norm2.weight has (384,), but layers.2.blocks.3.norm2.weight has [384]
layers.2.blocks.3.norm2.bias has (384,), but layers.2.blocks.3.norm2.bias has [384]
layers.2.blocks.3.mlp.fc1.weight has (384, 1536), but layers.2.blocks.3.mlp.fc1.weight has [384, 1536]
layers.2.blocks.3.mlp.fc1.bias has (1536,), but layers.2.blocks.3.mlp.fc1.bias has [1536]
layers.2.blocks.3.mlp.fc2.weight has (1536, 384), but layers.2.blocks.3.mlp.fc2.weight has [1536, 384]
layers.2.blocks.3.mlp.fc2.bias has (384,), but layers.2.blocks.3.mlp.fc2.bias has [384]
layers.2.blocks.4.norm1.weight has (384,), but layers.2.blocks.4.norm1.weight has [384]
layers.2.blocks.4.norm1.bias has (384,), but layers.2.blocks.4.norm1.bias has [384]
layers.2.blocks.4.attn.qkv.weight has (384, 1152), but layers.2.blocks.4.attn.qkv.weight has [384, 1152]
layers.2.blocks.4.attn.qkv.bias has (1152,), but layers.2.blocks.4.attn.qkv.bias has [1152]
layers.2.blocks.4.attn.proj.weight has (384, 384), but layers.2.blocks.4.attn.proj.weight has [384, 384]
layers.2.blocks.4.attn.proj.bias has (384,), but layers.2.blocks.4.attn.proj.bias has [384]
layers.2.blocks.4.norm2.weight has (384,), but layers.2.blocks.4.norm2.weight has [384]
layers.2.blocks.4.norm2.bias has (384,), but layers.2.blocks.4.norm2.bias has [384]
layers.2.blocks.4.mlp.fc1.weight has (384, 1536), but layers.2.blocks.4.mlp.fc1.weight has [384, 1536]
layers.2.blocks.4.mlp.fc1.bias has (1536,), but layers.2.blocks.4.mlp.fc1.bias has [1536]
layers.2.blocks.4.mlp.fc2.weight has (1536, 384), but layers.2.blocks.4.mlp.fc2.weight has [1536, 384]
layers.2.blocks.4.mlp.fc2.bias has (384,), but layers.2.blocks.4.mlp.fc2.bias has [384]
layers.2.blocks.5.norm1.weight has (384,), but layers.2.blocks.5.norm1.weight has [384]
layers.2.blocks.5.norm1.bias has (384,), but layers.2.blocks.5.norm1.bias has [384]
layers.2.blocks.5.attn.qkv.weight has (384, 1152), but layers.2.blocks.5.attn.qkv.weight has [384, 1152]
layers.2.blocks.5.attn.qkv.bias has (1152,), but layers.2.blocks.5.attn.qkv.bias has [1152]
layers.2.blocks.5.attn.proj.weight has (384, 384), but layers.2.blocks.5.attn.proj.weight has [384, 384]
layers.2.blocks.5.attn.proj.bias has (384,), but layers.2.blocks.5.attn.proj.bias has [384]
layers.2.blocks.5.norm2.weight has (384,), but layers.2.blocks.5.norm2.weight has [384]
layers.2.blocks.5.norm2.bias has (384,), but layers.2.blocks.5.norm2.bias has [384]
layers.2.blocks.5.mlp.fc1.weight has (384, 1536), but layers.2.blocks.5.mlp.fc1.weight has [384, 1536]
layers.2.blocks.5.mlp.fc1.bias has (1536,), but layers.2.blocks.5.mlp.fc1.bias has [1536]
layers.2.blocks.5.mlp.fc2.weight has (1536, 384), but layers.2.blocks.5.mlp.fc2.weight has [1536, 384]
layers.2.blocks.5.mlp.fc2.bias has (384,), but layers.2.blocks.5.mlp.fc2.bias has [384]
layers.2.blocks.6.norm1.weight has (384,), but layers.2.blocks.6.norm1.weight has [384]
layers.2.blocks.6.norm1.bias has (384,), but layers.2.blocks.6.norm1.bias has [384]
layers.2.blocks.6.attn.qkv.weight has (384, 1152), but layers.2.blocks.6.attn.qkv.weight has [384, 1152]
layers.2.blocks.6.attn.qkv.bias has (1152,), but layers.2.blocks.6.attn.qkv.bias has [1152]
layers.2.blocks.6.attn.proj.weight has (384, 384), but layers.2.blocks.6.attn.proj.weight has [384, 384]
layers.2.blocks.6.attn.proj.bias has (384,), but layers.2.blocks.6.attn.proj.bias has [384]
layers.2.blocks.6.norm2.weight has (384,), but layers.2.blocks.6.norm2.weight has [384]
layers.2.blocks.6.norm2.bias has (384,), but layers.2.blocks.6.norm2.bias has [384]
layers.2.blocks.6.mlp.fc1.weight has (384, 1536), but layers.2.blocks.6.mlp.fc1.weight has [384, 1536]
layers.2.blocks.6.mlp.fc1.bias has (1536,), but layers.2.blocks.6.mlp.fc1.bias has [1536]
layers.2.blocks.6.mlp.fc2.weight has (1536, 384), but layers.2.blocks.6.mlp.fc2.weight has [1536, 384]
layers.2.blocks.6.mlp.fc2.bias has (384,), but layers.2.blocks.6.mlp.fc2.bias has [384]
layers.2.blocks.7.norm1.weight has (384,), but layers.2.blocks.7.norm1.weight has [384]
layers.2.blocks.7.norm1.bias has (384,), but layers.2.blocks.7.norm1.bias has [384]
layers.2.blocks.7.attn.qkv.weight has (384, 1152), but layers.2.blocks.7.attn.qkv.weight has [384, 1152]
layers.2.blocks.7.attn.qkv.bias has (1152,), but layers.2.blocks.7.attn.qkv.bias has [1152]
layers.2.blocks.7.attn.proj.weight has (384, 384), but layers.2.blocks.7.attn.proj.weight has [384, 384]
layers.2.blocks.7.attn.proj.bias has (384,), but layers.2.blocks.7.attn.proj.bias has [384]
layers.2.blocks.7.norm2.weight has (384,), but layers.2.blocks.7.norm2.weight has [384]
layers.2.blocks.7.norm2.bias has (384,), but layers.2.blocks.7.norm2.bias has [384]
layers.2.blocks.7.mlp.fc1.weight has (384, 1536), but layers.2.blocks.7.mlp.fc1.weight has [384, 1536]
layers.2.blocks.7.mlp.fc1.bias has (1536,), but layers.2.blocks.7.mlp.fc1.bias has [1536]
layers.2.blocks.7.mlp.fc2.weight has (1536, 384), but layers.2.blocks.7.mlp.fc2.weight has [1536, 384]
layers.2.blocks.7.mlp.fc2.bias has (384,), but layers.2.blocks.7.mlp.fc2.bias has [384]
layers.2.blocks.8.norm1.weight has (384,), but layers.2.blocks.8.norm1.weight has [384]
layers.2.blocks.8.norm1.bias has (384,), but layers.2.blocks.8.norm1.bias has [384]
layers.2.blocks.8.attn.qkv.weight has (384, 1152), but layers.2.blocks.8.attn.qkv.weight has [384, 1152]
layers.2.blocks.8.attn.qkv.bias has (1152,), but layers.2.blocks.8.attn.qkv.bias has [1152]
layers.2.blocks.8.attn.proj.weight has (384, 384), but layers.2.blocks.8.attn.proj.weight has [384, 384]
layers.2.blocks.8.attn.proj.bias has (384,), but layers.2.blocks.8.attn.proj.bias has [384]
layers.2.blocks.8.norm2.weight has (384,), but layers.2.blocks.8.norm2.weight has [384]
layers.2.blocks.8.norm2.bias has (384,), but layers.2.blocks.8.norm2.bias has [384]
layers.2.blocks.8.mlp.fc1.weight has (384, 1536), but layers.2.blocks.8.mlp.fc1.weight has [384, 1536]
layers.2.blocks.8.mlp.fc1.bias has (1536,), but layers.2.blocks.8.mlp.fc1.bias has [1536]
layers.2.blocks.8.mlp.fc2.weight has (1536, 384), but layers.2.blocks.8.mlp.fc2.weight has [1536, 384]
layers.2.blocks.8.mlp.fc2.bias has (384,), but layers.2.blocks.8.mlp.fc2.bias has [384]
layers.2.blocks.9.norm1.weight has (384,), but layers.2.blocks.9.norm1.weight has [384]
layers.2.blocks.9.norm1.bias has (384,), but layers.2.blocks.9.norm1.bias has [384]
layers.2.blocks.9.attn.qkv.weight has (384, 1152), but layers.2.blocks.9.attn.qkv.weight has [384, 1152]
layers.2.blocks.9.attn.qkv.bias has (1152,), but layers.2.blocks.9.attn.qkv.bias has [1152]
layers.2.blocks.9.attn.proj.weight has (384, 384), but layers.2.blocks.9.attn.proj.weight has [384, 384]
layers.2.blocks.9.attn.proj.bias has (384,), but layers.2.blocks.9.attn.proj.bias has [384]
layers.2.blocks.9.norm2.weight has (384,), but layers.2.blocks.9.norm2.weight has [384]
layers.2.blocks.9.norm2.bias has (384,), but layers.2.blocks.9.norm2.bias has [384]
layers.2.blocks.9.mlp.fc1.weight has (384, 1536), but layers.2.blocks.9.mlp.fc1.weight has [384, 1536]
layers.2.blocks.9.mlp.fc1.bias has (1536,), but layers.2.blocks.9.mlp.fc1.bias has [1536]
layers.2.blocks.9.mlp.fc2.weight has (1536, 384), but layers.2.blocks.9.mlp.fc2.weight has [1536, 384]
layers.2.blocks.9.mlp.fc2.bias has (384,), but layers.2.blocks.9.mlp.fc2.bias has [384]
layers.2.blocks.10.norm1.weight has (384,), but layers.2.blocks.10.norm1.weight has [384]
layers.2.blocks.10.norm1.bias has (384,), but layers.2.blocks.10.norm1.bias has [384]
layers.2.blocks.10.attn.qkv.weight has (384, 1152), but layers.2.blocks.10.attn.qkv.weight has [384, 1152]
layers.2.blocks.10.attn.qkv.bias has (1152,), but layers.2.blocks.10.attn.qkv.bias has [1152]
layers.2.blocks.10.attn.proj.weight has (384, 384), but layers.2.blocks.10.attn.proj.weight has [384, 384]
layers.2.blocks.10.attn.proj.bias has (384,), but layers.2.blocks.10.attn.proj.bias has [384]
layers.2.blocks.10.norm2.weight has (384,), but layers.2.blocks.10.norm2.weight has [384]
layers.2.blocks.10.norm2.bias has (384,), but layers.2.blocks.10.norm2.bias has [384]
layers.2.blocks.10.mlp.fc1.weight has (384, 1536), but layers.2.blocks.10.mlp.fc1.weight has [384, 1536]
layers.2.blocks.10.mlp.fc1.bias has (1536,), but layers.2.blocks.10.mlp.fc1.bias has [1536]
layers.2.blocks.10.mlp.fc2.weight has (1536, 384), but layers.2.blocks.10.mlp.fc2.weight has [1536, 384]
layers.2.blocks.10.mlp.fc2.bias has (384,), but layers.2.blocks.10.mlp.fc2.bias has [384]
layers.2.blocks.11.norm1.weight has (384,), but layers.2.blocks.11.norm1.weight has [384]
layers.2.blocks.11.norm1.bias has (384,), but layers.2.blocks.11.norm1.bias has [384]
layers.2.blocks.11.attn.qkv.weight has (384, 1152), but layers.2.blocks.11.attn.qkv.weight has [384, 1152]
layers.2.blocks.11.attn.qkv.bias has (1152,), but layers.2.blocks.11.attn.qkv.bias has [1152]
layers.2.blocks.11.attn.proj.weight has (384, 384), but layers.2.blocks.11.attn.proj.weight has [384, 384]
layers.2.blocks.11.attn.proj.bias has (384,), but layers.2.blocks.11.attn.proj.bias has [384]
layers.2.blocks.11.norm2.weight has (384,), but layers.2.blocks.11.norm2.weight has [384]
layers.2.blocks.11.norm2.bias has (384,), but layers.2.blocks.11.norm2.bias has [384]
layers.2.blocks.11.mlp.fc1.weight has (384, 1536), but layers.2.blocks.11.mlp.fc1.weight has [384, 1536]
layers.2.blocks.11.mlp.fc1.bias has (1536,), but layers.2.blocks.11.mlp.fc1.bias has [1536]
layers.2.blocks.11.mlp.fc2.weight has (1536, 384), but layers.2.blocks.11.mlp.fc2.weight has [1536, 384]
layers.2.blocks.11.mlp.fc2.bias has (384,), but layers.2.blocks.11.mlp.fc2.bias has [384]
layers.2.blocks.12.norm1.weight has (384,), but layers.2.blocks.12.norm1.weight has [384]
layers.2.blocks.12.norm1.bias has (384,), but layers.2.blocks.12.norm1.bias has [384]
layers.2.blocks.12.attn.qkv.weight has (384, 1152), but layers.2.blocks.12.attn.qkv.weight has [384, 1152]
layers.2.blocks.12.attn.qkv.bias has (1152,), but layers.2.blocks.12.attn.qkv.bias has [1152]
layers.2.blocks.12.attn.proj.weight has (384, 384), but layers.2.blocks.12.attn.proj.weight has [384, 384]
layers.2.blocks.12.attn.proj.bias has (384,), but layers.2.blocks.12.attn.proj.bias has [384]
layers.2.blocks.12.norm2.weight has (384,), but layers.2.blocks.12.norm2.weight has [384]
layers.2.blocks.12.norm2.bias has (384,), but layers.2.blocks.12.norm2.bias has [384]
layers.2.blocks.12.mlp.fc1.weight has (384, 1536), but layers.2.blocks.12.mlp.fc1.weight has [384, 1536]
layers.2.blocks.12.mlp.fc1.bias has (1536,), but layers.2.blocks.12.mlp.fc1.bias has [1536]
layers.2.blocks.12.mlp.fc2.weight has (1536, 384), but layers.2.blocks.12.mlp.fc2.weight has [1536, 384]
layers.2.blocks.12.mlp.fc2.bias has (384,), but layers.2.blocks.12.mlp.fc2.bias has [384]
layers.2.blocks.13.norm1.weight has (384,), but layers.2.blocks.13.norm1.weight has [384]
layers.2.blocks.13.norm1.bias has (384,), but layers.2.blocks.13.norm1.bias has [384]
layers.2.blocks.13.attn.qkv.weight has (384, 1152), but layers.2.blocks.13.attn.qkv.weight has [384, 1152]
layers.2.blocks.13.attn.qkv.bias has (1152,), but layers.2.blocks.13.attn.qkv.bias has [1152]
layers.2.blocks.13.attn.proj.weight has (384, 384), but layers.2.blocks.13.attn.proj.weight has [384, 384]
layers.2.blocks.13.attn.proj.bias has (384,), but layers.2.blocks.13.attn.proj.bias has [384]
layers.2.blocks.13.norm2.weight has (384,), but layers.2.blocks.13.norm2.weight has [384]
layers.2.blocks.13.norm2.bias has (384,), but layers.2.blocks.13.norm2.bias has [384]
layers.2.blocks.13.mlp.fc1.weight has (384, 1536), but layers.2.blocks.13.mlp.fc1.weight has [384, 1536]
layers.2.blocks.13.mlp.fc1.bias has (1536,), but layers.2.blocks.13.mlp.fc1.bias has [1536]
layers.2.blocks.13.mlp.fc2.weight has (1536, 384), but layers.2.blocks.13.mlp.fc2.weight has [1536, 384]
layers.2.blocks.13.mlp.fc2.bias has (384,), but layers.2.blocks.13.mlp.fc2.bias has [384]
layers.2.blocks.14.norm1.weight has (384,), but layers.2.blocks.14.norm1.weight has [384]
layers.2.blocks.14.norm1.bias has (384,), but layers.2.blocks.14.norm1.bias has [384]
layers.2.blocks.14.attn.qkv.weight has (384, 1152), but layers.2.blocks.14.attn.qkv.weight has [384, 1152]
layers.2.blocks.14.attn.qkv.bias has (1152,), but layers.2.blocks.14.attn.qkv.bias has [1152]
layers.2.blocks.14.attn.proj.weight has (384, 384), but layers.2.blocks.14.attn.proj.weight has [384, 384]
layers.2.blocks.14.attn.proj.bias has (384,), but layers.2.blocks.14.attn.proj.bias has [384]
layers.2.blocks.14.norm2.weight has (384,), but layers.2.blocks.14.norm2.weight has [384]
layers.2.blocks.14.norm2.bias has (384,), but layers.2.blocks.14.norm2.bias has [384]
layers.2.blocks.14.mlp.fc1.weight has (384, 1536), but layers.2.blocks.14.mlp.fc1.weight has [384, 1536]
layers.2.blocks.14.mlp.fc1.bias has (1536,), but layers.2.blocks.14.mlp.fc1.bias has [1536]
layers.2.blocks.14.mlp.fc2.weight has (1536, 384), but layers.2.blocks.14.mlp.fc2.weight has [1536, 384]
layers.2.blocks.14.mlp.fc2.bias has (384,), but layers.2.blocks.14.mlp.fc2.bias has [384]
layers.2.blocks.15.norm1.weight has (384,), but layers.2.blocks.15.norm1.weight has [384]
layers.2.blocks.15.norm1.bias has (384,), but layers.2.blocks.15.norm1.bias has [384]
layers.2.blocks.15.attn.qkv.weight has (384, 1152), but layers.2.blocks.15.attn.qkv.weight has [384, 1152]
layers.2.blocks.15.attn.qkv.bias has (1152,), but layers.2.blocks.15.attn.qkv.bias has [1152]
layers.2.blocks.15.attn.proj.weight has (384, 384), but layers.2.blocks.15.attn.proj.weight has [384, 384]
layers.2.blocks.15.attn.proj.bias has (384,), but layers.2.blocks.15.attn.proj.bias has [384]
layers.2.blocks.15.norm2.weight has (384,), but layers.2.blocks.15.norm2.weight has [384]
layers.2.blocks.15.norm2.bias has (384,), but layers.2.blocks.15.norm2.bias has [384]
layers.2.blocks.15.mlp.fc1.weight has (384, 1536), but layers.2.blocks.15.mlp.fc1.weight has [384, 1536]
layers.2.blocks.15.mlp.fc1.bias has (1536,), but layers.2.blocks.15.mlp.fc1.bias has [1536]
layers.2.blocks.15.mlp.fc2.weight has (1536, 384), but layers.2.blocks.15.mlp.fc2.weight has [1536, 384]
layers.2.blocks.15.mlp.fc2.bias has (384,), but layers.2.blocks.15.mlp.fc2.bias has [384]
layers.2.blocks.16.norm1.weight has (384,), but layers.2.blocks.16.norm1.weight has [384]
layers.2.blocks.16.norm1.bias has (384,), but layers.2.blocks.16.norm1.bias has [384]
layers.2.blocks.16.attn.qkv.weight has (384, 1152), but layers.2.blocks.16.attn.qkv.weight has [384, 1152]
layers.2.blocks.16.attn.qkv.bias has (1152,), but layers.2.blocks.16.attn.qkv.bias has [1152]
layers.2.blocks.16.attn.proj.weight has (384, 384), but layers.2.blocks.16.attn.proj.weight has [384, 384]
layers.2.blocks.16.attn.proj.bias has (384,), but layers.2.blocks.16.attn.proj.bias has [384]
layers.2.blocks.16.norm2.weight has (384,), but layers.2.blocks.16.norm2.weight has [384]
layers.2.blocks.16.norm2.bias has (384,), but layers.2.blocks.16.norm2.bias has [384]
layers.2.blocks.16.mlp.fc1.weight has (384, 1536), but layers.2.blocks.16.mlp.fc1.weight has [384, 1536]
layers.2.blocks.16.mlp.fc1.bias has (1536,), but layers.2.blocks.16.mlp.fc1.bias has [1536]
layers.2.blocks.16.mlp.fc2.weight has (1536, 384), but layers.2.blocks.16.mlp.fc2.weight has [1536, 384]
layers.2.blocks.16.mlp.fc2.bias has (384,), but layers.2.blocks.16.mlp.fc2.bias has [384]
layers.2.blocks.17.norm1.weight has (384,), but layers.2.blocks.17.norm1.weight has [384]
layers.2.blocks.17.norm1.bias has (384,), but layers.2.blocks.17.norm1.bias has [384]
layers.2.blocks.17.attn.qkv.weight has (384, 1152), but layers.2.blocks.17.attn.qkv.weight has [384, 1152]
layers.2.blocks.17.attn.qkv.bias has (1152,), but layers.2.blocks.17.attn.qkv.bias has [1152]
layers.2.blocks.17.attn.proj.weight has (384, 384), but layers.2.blocks.17.attn.proj.weight has [384, 384]
layers.2.blocks.17.attn.proj.bias has (384,), but layers.2.blocks.17.attn.proj.bias has [384]
layers.2.blocks.17.norm2.weight has (384,), but layers.2.blocks.17.norm2.weight has [384]
layers.2.blocks.17.norm2.bias has (384,), but layers.2.blocks.17.norm2.bias has [384]
layers.2.blocks.17.mlp.fc1.weight has (384, 1536), but layers.2.blocks.17.mlp.fc1.weight has [384, 1536]
layers.2.blocks.17.mlp.fc1.bias has (1536,), but layers.2.blocks.17.mlp.fc1.bias has [1536]
layers.2.blocks.17.mlp.fc2.weight has (1536, 384), but layers.2.blocks.17.mlp.fc2.weight has [1536, 384]
layers.2.blocks.17.mlp.fc2.bias has (384,), but layers.2.blocks.17.mlp.fc2.bias has [384]
layers.2.downsample.norm.weight has (1536,), but layers.2.downsample.norm.weight has [1536]
layers.2.downsample.norm.bias has (1536,), but layers.2.downsample.norm.bias has [1536]
layers.3.blocks.0.norm1.weight has (768,), but layers.3.blocks.0.norm1.weight has [768]
layers.3.blocks.0.norm1.bias has (768,), but layers.3.blocks.0.norm1.bias has [768]
layers.3.blocks.0.attn.qkv.weight has (768, 2304), but layers.3.blocks.0.attn.qkv.weight has [768, 2304]
layers.3.blocks.0.attn.qkv.bias has (2304,), but layers.3.blocks.0.attn.qkv.bias has [2304]
layers.3.blocks.0.attn.proj.weight has (768, 768), but layers.3.blocks.0.attn.proj.weight has [768, 768]
layers.3.blocks.0.attn.proj.bias has (768,), but layers.3.blocks.0.attn.proj.bias has [768]
layers.3.blocks.0.norm2.weight has (768,), but layers.3.blocks.0.norm2.weight has [768]
layers.3.blocks.0.norm2.bias has (768,), but layers.3.blocks.0.norm2.bias has [768]
layers.3.blocks.0.mlp.fc1.weight has (768, 3072), but layers.3.blocks.0.mlp.fc1.weight has [768, 3072]
layers.3.blocks.0.mlp.fc1.bias has (3072,), but layers.3.blocks.0.mlp.fc1.bias has [3072]
layers.3.blocks.0.mlp.fc2.weight has (3072, 768), but layers.3.blocks.0.mlp.fc2.weight has [3072, 768]
layers.3.blocks.0.mlp.fc2.bias has (768,), but layers.3.blocks.0.mlp.fc2.bias has [768]
layers.3.blocks.1.norm1.weight has (768,), but layers.3.blocks.1.norm1.weight has [768]
layers.3.blocks.1.norm1.bias has (768,), but layers.3.blocks.1.norm1.bias has [768]
layers.3.blocks.1.attn.qkv.weight has (768, 2304), but layers.3.blocks.1.attn.qkv.weight has [768, 2304]
layers.3.blocks.1.attn.qkv.bias has (2304,), but layers.3.blocks.1.attn.qkv.bias has [2304]
layers.3.blocks.1.attn.proj.weight has (768, 768), but layers.3.blocks.1.attn.proj.weight has [768, 768]
layers.3.blocks.1.attn.proj.bias has (768,), but layers.3.blocks.1.attn.proj.bias has [768]
layers.3.blocks.1.norm2.weight has (768,), but layers.3.blocks.1.norm2.weight has [768]
layers.3.blocks.1.norm2.bias has (768,), but layers.3.blocks.1.norm2.bias has [768]
layers.3.blocks.1.mlp.fc1.weight has (768, 3072), but layers.3.blocks.1.mlp.fc1.weight has [768, 3072]
layers.3.blocks.1.mlp.fc1.bias has (3072,), but layers.3.blocks.1.mlp.fc1.bias has [3072]
layers.3.blocks.1.mlp.fc2.weight has (3072, 768), but layers.3.blocks.1.mlp.fc2.weight has [3072, 768]
layers.3.blocks.1.mlp.fc2.bias has (768,), but layers.3.blocks.1.mlp.fc2.bias has [768]
layers.0.blocks.0.attn.relative_position_index has (49, 49), but layers.0.blocks.0.attn.relative_position_index has [49, 49]
layers.0.blocks.1.attn.relative_position_index has (49, 49), but layers.0.blocks.1.attn.relative_position_index has [49, 49]
layers.1.blocks.0.attn.relative_position_index has (49, 49), but layers.1.blocks.0.attn.relative_position_index has [49, 49]
layers.1.blocks.1.attn.relative_position_index has (49, 49), but layers.1.blocks.1.attn.relative_position_index has [49, 49]
layers.2.blocks.0.attn.relative_position_index has (49, 49), but layers.2.blocks.0.attn.relative_position_index has [49, 49]
layers.2.blocks.1.attn.relative_position_index has (49, 49), but layers.2.blocks.1.attn.relative_position_index has [49, 49]
layers.2.blocks.2.attn.relative_position_index has (49, 49), but layers.2.blocks.2.attn.relative_position_index has [49, 49]
layers.2.blocks.3.attn.relative_position_index has (49, 49), but layers.2.blocks.3.attn.relative_position_index has [49, 49]
layers.2.blocks.4.attn.relative_position_index has (49, 49), but layers.2.blocks.4.attn.relative_position_index has [49, 49]
layers.2.blocks.5.attn.relative_position_index has (49, 49), but layers.2.blocks.5.attn.relative_position_index has [49, 49]
layers.2.blocks.6.attn.relative_position_index has (49, 49), but layers.2.blocks.6.attn.relative_position_index has [49, 49]
layers.2.blocks.7.attn.relative_position_index has (49, 49), but layers.2.blocks.7.attn.relative_position_index has [49, 49]
layers.2.blocks.8.attn.relative_position_index has (49, 49), but layers.2.blocks.8.attn.relative_position_index has [49, 49]
layers.2.blocks.9.attn.relative_position_index has (49, 49), but layers.2.blocks.9.attn.relative_position_index has [49, 49]
layers.2.blocks.10.attn.relative_position_index has (49, 49), but layers.2.blocks.10.attn.relative_position_index has [49, 49]
layers.2.blocks.11.attn.relative_position_index has (49, 49), but layers.2.blocks.11.attn.relative_position_index has [49, 49]
layers.2.blocks.12.attn.relative_position_index has (49, 49), but layers.2.blocks.12.attn.relative_position_index has [49, 49]
layers.2.blocks.13.attn.relative_position_index has (49, 49), but layers.2.blocks.13.attn.relative_position_index has [49, 49]
layers.2.blocks.14.attn.relative_position_index has (49, 49), but layers.2.blocks.14.attn.relative_position_index has [49, 49]
layers.2.blocks.15.attn.relative_position_index has (49, 49), but layers.2.blocks.15.attn.relative_position_index has [49, 49]
layers.2.blocks.16.attn.relative_position_index has (49, 49), but layers.2.blocks.16.attn.relative_position_index has [49, 49]
layers.2.blocks.17.attn.relative_position_index has (49, 49), but layers.2.blocks.17.attn.relative_position_index has [49, 49]
layers.3.blocks.0.attn.relative_position_index has (49, 49), but layers.3.blocks.0.attn.relative_position_index has [49, 49]
layers.3.blocks.1.attn.relative_position_index has (49, 49), but layers.3.blocks.1.attn.relative_position_index has [49, 49]
layers.0.blocks.0.attn.relative_position_bias_table has (169, 3), but layers.0.blocks.0.attn.relative_position_bias_table has [169, 3]
layers.0.blocks.1.attn.relative_position_bias_table has (169, 3), but layers.0.blocks.1.attn.relative_position_bias_table has [169, 3]
layers.1.blocks.0.attn.relative_position_bias_table has (169, 6), but layers.1.blocks.0.attn.relative_position_bias_table has [169, 6]
layers.1.blocks.1.attn.relative_position_bias_table has (169, 6), but layers.1.blocks.1.attn.relative_position_bias_table has [169, 6]
layers.2.blocks.0.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.0.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.1.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.1.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.2.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.2.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.3.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.3.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.4.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.4.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.5.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.5.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.6.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.6.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.7.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.7.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.8.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.8.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.9.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.9.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.10.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.10.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.11.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.11.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.12.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.12.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.13.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.13.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.14.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.14.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.15.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.15.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.16.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.16.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.17.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.17.attn.relative_position_bias_table has [169, 12]
layers.3.blocks.0.attn.relative_position_bias_table has (169, 24), but layers.3.blocks.0.attn.relative_position_bias_table has [169, 24]
layers.3.blocks.1.attn.relative_position_bias_table has (169, 24), but layers.3.blocks.1.attn.relative_position_bias_table has [169, 24]
layers.0.downsample.reduction.weight has (384, 192), but layers.0.downsample.reduction.weight has [384, 192]
layers.1.downsample.reduction.weight has (768, 384), but layers.1.downsample.reduction.weight has [768, 384]
layers.2.downsample.reduction.weight has (1536, 768), but layers.2.downsample.reduction.weight has [1536, 768]
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
[07/30 13:36:10 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:36:10 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690695384 (unix time) try "date -d @1690695384" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x2f03) received by PID 12072 (TID 0x7fd350c99240) from PID 12035 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0730 13:37:02.558832 21222 tcp_utils.cc:130] Successfully connected to 172.17.0.7:61840
W0730 13:37:08.790083 21222 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:37:08.790990 21222 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[07/30 13:37:10 ufo]: Rank of current process: 0. World size: 1
[07/30 13:37:13 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:37:13 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:37:13 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:37:14 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f4e009a12b0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.27s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:37:17 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:37:17 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f4e0cd60040>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f4e0cd6b8b0>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f4e0cd70310>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f4e0c9e68b0>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f4e0c9e6940>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f4e0c9eb4c0>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f4e0c9eb430>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f4e0cd6b940>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f4e0cd6b8b0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f4e0cd70310>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f4e0c9dfb80>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f4e0cf69d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f4e0c9eb4c0>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f4e0c9eb430>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f4ee7ee8670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f4ee7ee85e0>}}
patch_embed.proj.weight has [96, 3, 4, 4], but patch_embed.proj.weight has (96, 3, 4, 4)
patch_embed.proj.bias has [96], but patch_embed.proj.bias has (96,)
patch_embed.norm.weight has [96], but patch_embed.norm.weight has (96,)
patch_embed.norm.bias has [96], but patch_embed.norm.bias has (96,)
layers.0.blocks.0.norm1.weight has [96], but layers.0.blocks.0.norm1.weight has (96,)
layers.0.blocks.0.norm1.bias has [96], but layers.0.blocks.0.norm1.bias has (96,)
layers.0.blocks.0.attn.relative_position_bias_table has [169, 3], but layers.0.blocks.0.attn.relative_position_bias_table has (169, 3)
layers.0.blocks.0.attn.relative_position_index has [49, 49], but layers.0.blocks.0.attn.relative_position_index has (49, 49)
layers.0.blocks.0.attn.qkv.weight has [96, 288], but layers.0.blocks.0.attn.qkv.weight has (96, 288)
layers.0.blocks.0.attn.qkv.bias has [288], but layers.0.blocks.0.attn.qkv.bias has (288,)
layers.0.blocks.0.attn.proj.weight has [96, 96], but layers.0.blocks.0.attn.proj.weight has (96, 96)
layers.0.blocks.0.attn.proj.bias has [96], but layers.0.blocks.0.attn.proj.bias has (96,)
layers.0.blocks.0.norm2.weight has [96], but layers.0.blocks.0.norm2.weight has (96,)
layers.0.blocks.0.norm2.bias has [96], but layers.0.blocks.0.norm2.bias has (96,)
layers.0.blocks.0.mlp.fc1.weight has [96, 384], but layers.0.blocks.0.mlp.fc1.weight has (96, 384)
layers.0.blocks.0.mlp.fc1.bias has [384], but layers.0.blocks.0.mlp.fc1.bias has (384,)
layers.0.blocks.0.mlp.fc2.weight has [384, 96], but layers.0.blocks.0.mlp.fc2.weight has (384, 96)
layers.0.blocks.0.mlp.fc2.bias has [96], but layers.0.blocks.0.mlp.fc2.bias has (96,)
layers.0.blocks.1.norm1.weight has [96], but layers.0.blocks.1.norm1.weight has (96,)
layers.0.blocks.1.norm1.bias has [96], but layers.0.blocks.1.norm1.bias has (96,)
layers.0.blocks.1.attn.relative_position_bias_table has [169, 3], but layers.0.blocks.1.attn.relative_position_bias_table has (169, 3)
layers.0.blocks.1.attn.relative_position_index has [49, 49], but layers.0.blocks.1.attn.relative_position_index has (49, 49)
layers.0.blocks.1.attn.qkv.weight has [96, 288], but layers.0.blocks.1.attn.qkv.weight has (96, 288)
layers.0.blocks.1.attn.qkv.bias has [288], but layers.0.blocks.1.attn.qkv.bias has (288,)
layers.0.blocks.1.attn.proj.weight has [96, 96], but layers.0.blocks.1.attn.proj.weight has (96, 96)
layers.0.blocks.1.attn.proj.bias has [96], but layers.0.blocks.1.attn.proj.bias has (96,)
layers.0.blocks.1.norm2.weight has [96], but layers.0.blocks.1.norm2.weight has (96,)
layers.0.blocks.1.norm2.bias has [96], but layers.0.blocks.1.norm2.bias has (96,)
layers.0.blocks.1.mlp.fc1.weight has [96, 384], but layers.0.blocks.1.mlp.fc1.weight has (96, 384)
layers.0.blocks.1.mlp.fc1.bias has [384], but layers.0.blocks.1.mlp.fc1.bias has (384,)
layers.0.blocks.1.mlp.fc2.weight has [384, 96], but layers.0.blocks.1.mlp.fc2.weight has (384, 96)
layers.0.blocks.1.mlp.fc2.bias has [96], but layers.0.blocks.1.mlp.fc2.bias has (96,)
layers.0.downsample.reduction.weight has [384, 192], but layers.0.downsample.reduction.weight has (384, 192)
layers.0.downsample.norm.weight has [384], but layers.0.downsample.norm.weight has (384,)
layers.0.downsample.norm.bias has [384], but layers.0.downsample.norm.bias has (384,)
layers.1.blocks.0.norm1.weight has [192], but layers.1.blocks.0.norm1.weight has (192,)
layers.1.blocks.0.norm1.bias has [192], but layers.1.blocks.0.norm1.bias has (192,)
layers.1.blocks.0.attn.relative_position_bias_table has [169, 6], but layers.1.blocks.0.attn.relative_position_bias_table has (169, 6)
layers.1.blocks.0.attn.relative_position_index has [49, 49], but layers.1.blocks.0.attn.relative_position_index has (49, 49)
layers.1.blocks.0.attn.qkv.weight has [192, 576], but layers.1.blocks.0.attn.qkv.weight has (192, 576)
layers.1.blocks.0.attn.qkv.bias has [576], but layers.1.blocks.0.attn.qkv.bias has (576,)
layers.1.blocks.0.attn.proj.weight has [192, 192], but layers.1.blocks.0.attn.proj.weight has (192, 192)
layers.1.blocks.0.attn.proj.bias has [192], but layers.1.blocks.0.attn.proj.bias has (192,)
layers.1.blocks.0.norm2.weight has [192], but layers.1.blocks.0.norm2.weight has (192,)
layers.1.blocks.0.norm2.bias has [192], but layers.1.blocks.0.norm2.bias has (192,)
layers.1.blocks.0.mlp.fc1.weight has [192, 768], but layers.1.blocks.0.mlp.fc1.weight has (192, 768)
layers.1.blocks.0.mlp.fc1.bias has [768], but layers.1.blocks.0.mlp.fc1.bias has (768,)
layers.1.blocks.0.mlp.fc2.weight has [768, 192], but layers.1.blocks.0.mlp.fc2.weight has (768, 192)
layers.1.blocks.0.mlp.fc2.bias has [192], but layers.1.blocks.0.mlp.fc2.bias has (192,)
layers.1.blocks.1.norm1.weight has [192], but layers.1.blocks.1.norm1.weight has (192,)
layers.1.blocks.1.norm1.bias has [192], but layers.1.blocks.1.norm1.bias has (192,)
layers.1.blocks.1.attn.relative_position_bias_table has [169, 6], but layers.1.blocks.1.attn.relative_position_bias_table has (169, 6)
layers.1.blocks.1.attn.relative_position_index has [49, 49], but layers.1.blocks.1.attn.relative_position_index has (49, 49)
layers.1.blocks.1.attn.qkv.weight has [192, 576], but layers.1.blocks.1.attn.qkv.weight has (192, 576)
layers.1.blocks.1.attn.qkv.bias has [576], but layers.1.blocks.1.attn.qkv.bias has (576,)
layers.1.blocks.1.attn.proj.weight has [192, 192], but layers.1.blocks.1.attn.proj.weight has (192, 192)
layers.1.blocks.1.attn.proj.bias has [192], but layers.1.blocks.1.attn.proj.bias has (192,)
layers.1.blocks.1.norm2.weight has [192], but layers.1.blocks.1.norm2.weight has (192,)
layers.1.blocks.1.norm2.bias has [192], but layers.1.blocks.1.norm2.bias has (192,)
layers.1.blocks.1.mlp.fc1.weight has [192, 768], but layers.1.blocks.1.mlp.fc1.weight has (192, 768)
layers.1.blocks.1.mlp.fc1.bias has [768], but layers.1.blocks.1.mlp.fc1.bias has (768,)
layers.1.blocks.1.mlp.fc2.weight has [768, 192], but layers.1.blocks.1.mlp.fc2.weight has (768, 192)
layers.1.blocks.1.mlp.fc2.bias has [192], but layers.1.blocks.1.mlp.fc2.bias has (192,)
layers.1.downsample.reduction.weight has [768, 384], but layers.1.downsample.reduction.weight has (768, 384)
layers.1.downsample.norm.weight has [768], but layers.1.downsample.norm.weight has (768,)
layers.1.downsample.norm.bias has [768], but layers.1.downsample.norm.bias has (768,)
layers.2.blocks.0.norm1.weight has [384], but layers.2.blocks.0.norm1.weight has (384,)
layers.2.blocks.0.norm1.bias has [384], but layers.2.blocks.0.norm1.bias has (384,)
layers.2.blocks.0.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.0.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.0.attn.relative_position_index has [49, 49], but layers.2.blocks.0.attn.relative_position_index has (49, 49)
layers.2.blocks.0.attn.qkv.weight has [384, 1152], but layers.2.blocks.0.attn.qkv.weight has (384, 1152)
layers.2.blocks.0.attn.qkv.bias has [1152], but layers.2.blocks.0.attn.qkv.bias has (1152,)
layers.2.blocks.0.attn.proj.weight has [384, 384], but layers.2.blocks.0.attn.proj.weight has (384, 384)
layers.2.blocks.0.attn.proj.bias has [384], but layers.2.blocks.0.attn.proj.bias has (384,)
layers.2.blocks.0.norm2.weight has [384], but layers.2.blocks.0.norm2.weight has (384,)
layers.2.blocks.0.norm2.bias has [384], but layers.2.blocks.0.norm2.bias has (384,)
layers.2.blocks.0.mlp.fc1.weight has [384, 1536], but layers.2.blocks.0.mlp.fc1.weight has (384, 1536)
layers.2.blocks.0.mlp.fc1.bias has [1536], but layers.2.blocks.0.mlp.fc1.bias has (1536,)
layers.2.blocks.0.mlp.fc2.weight has [1536, 384], but layers.2.blocks.0.mlp.fc2.weight has (1536, 384)
layers.2.blocks.0.mlp.fc2.bias has [384], but layers.2.blocks.0.mlp.fc2.bias has (384,)
layers.2.blocks.1.norm1.weight has [384], but layers.2.blocks.1.norm1.weight has (384,)
layers.2.blocks.1.norm1.bias has [384], but layers.2.blocks.1.norm1.bias has (384,)
layers.2.blocks.1.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.1.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.1.attn.relative_position_index has [49, 49], but layers.2.blocks.1.attn.relative_position_index has (49, 49)
layers.2.blocks.1.attn.qkv.weight has [384, 1152], but layers.2.blocks.1.attn.qkv.weight has (384, 1152)
layers.2.blocks.1.attn.qkv.bias has [1152], but layers.2.blocks.1.attn.qkv.bias has (1152,)
layers.2.blocks.1.attn.proj.weight has [384, 384], but layers.2.blocks.1.attn.proj.weight has (384, 384)
layers.2.blocks.1.attn.proj.bias has [384], but layers.2.blocks.1.attn.proj.bias has (384,)
layers.2.blocks.1.norm2.weight has [384], but layers.2.blocks.1.norm2.weight has (384,)
layers.2.blocks.1.norm2.bias has [384], but layers.2.blocks.1.norm2.bias has (384,)
layers.2.blocks.1.mlp.fc1.weight has [384, 1536], but layers.2.blocks.1.mlp.fc1.weight has (384, 1536)
layers.2.blocks.1.mlp.fc1.bias has [1536], but layers.2.blocks.1.mlp.fc1.bias has (1536,)
layers.2.blocks.1.mlp.fc2.weight has [1536, 384], but layers.2.blocks.1.mlp.fc2.weight has (1536, 384)
layers.2.blocks.1.mlp.fc2.bias has [384], but layers.2.blocks.1.mlp.fc2.bias has (384,)
layers.2.blocks.2.norm1.weight has [384], but layers.2.blocks.2.norm1.weight has (384,)
layers.2.blocks.2.norm1.bias has [384], but layers.2.blocks.2.norm1.bias has (384,)
layers.2.blocks.2.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.2.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.2.attn.relative_position_index has [49, 49], but layers.2.blocks.2.attn.relative_position_index has (49, 49)
layers.2.blocks.2.attn.qkv.weight has [384, 1152], but layers.2.blocks.2.attn.qkv.weight has (384, 1152)
layers.2.blocks.2.attn.qkv.bias has [1152], but layers.2.blocks.2.attn.qkv.bias has (1152,)
layers.2.blocks.2.attn.proj.weight has [384, 384], but layers.2.blocks.2.attn.proj.weight has (384, 384)
layers.2.blocks.2.attn.proj.bias has [384], but layers.2.blocks.2.attn.proj.bias has (384,)
layers.2.blocks.2.norm2.weight has [384], but layers.2.blocks.2.norm2.weight has (384,)
layers.2.blocks.2.norm2.bias has [384], but layers.2.blocks.2.norm2.bias has (384,)
layers.2.blocks.2.mlp.fc1.weight has [384, 1536], but layers.2.blocks.2.mlp.fc1.weight has (384, 1536)
layers.2.blocks.2.mlp.fc1.bias has [1536], but layers.2.blocks.2.mlp.fc1.bias has (1536,)
layers.2.blocks.2.mlp.fc2.weight has [1536, 384], but layers.2.blocks.2.mlp.fc2.weight has (1536, 384)
layers.2.blocks.2.mlp.fc2.bias has [384], but layers.2.blocks.2.mlp.fc2.bias has (384,)
layers.2.blocks.3.norm1.weight has [384], but layers.2.blocks.3.norm1.weight has (384,)
layers.2.blocks.3.norm1.bias has [384], but layers.2.blocks.3.norm1.bias has (384,)
layers.2.blocks.3.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.3.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.3.attn.relative_position_index has [49, 49], but layers.2.blocks.3.attn.relative_position_index has (49, 49)
layers.2.blocks.3.attn.qkv.weight has [384, 1152], but layers.2.blocks.3.attn.qkv.weight has (384, 1152)
layers.2.blocks.3.attn.qkv.bias has [1152], but layers.2.blocks.3.attn.qkv.bias has (1152,)
layers.2.blocks.3.attn.proj.weight has [384, 384], but layers.2.blocks.3.attn.proj.weight has (384, 384)
layers.2.blocks.3.attn.proj.bias has [384], but layers.2.blocks.3.attn.proj.bias has (384,)
layers.2.blocks.3.norm2.weight has [384], but layers.2.blocks.3.norm2.weight has (384,)
layers.2.blocks.3.norm2.bias has [384], but layers.2.blocks.3.norm2.bias has (384,)
layers.2.blocks.3.mlp.fc1.weight has [384, 1536], but layers.2.blocks.3.mlp.fc1.weight has (384, 1536)
layers.2.blocks.3.mlp.fc1.bias has [1536], but layers.2.blocks.3.mlp.fc1.bias has (1536,)
layers.2.blocks.3.mlp.fc2.weight has [1536, 384], but layers.2.blocks.3.mlp.fc2.weight has (1536, 384)
layers.2.blocks.3.mlp.fc2.bias has [384], but layers.2.blocks.3.mlp.fc2.bias has (384,)
layers.2.blocks.4.norm1.weight has [384], but layers.2.blocks.4.norm1.weight has (384,)
layers.2.blocks.4.norm1.bias has [384], but layers.2.blocks.4.norm1.bias has (384,)
layers.2.blocks.4.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.4.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.4.attn.relative_position_index has [49, 49], but layers.2.blocks.4.attn.relative_position_index has (49, 49)
layers.2.blocks.4.attn.qkv.weight has [384, 1152], but layers.2.blocks.4.attn.qkv.weight has (384, 1152)
layers.2.blocks.4.attn.qkv.bias has [1152], but layers.2.blocks.4.attn.qkv.bias has (1152,)
layers.2.blocks.4.attn.proj.weight has [384, 384], but layers.2.blocks.4.attn.proj.weight has (384, 384)
layers.2.blocks.4.attn.proj.bias has [384], but layers.2.blocks.4.attn.proj.bias has (384,)
layers.2.blocks.4.norm2.weight has [384], but layers.2.blocks.4.norm2.weight has (384,)
layers.2.blocks.4.norm2.bias has [384], but layers.2.blocks.4.norm2.bias has (384,)
layers.2.blocks.4.mlp.fc1.weight has [384, 1536], but layers.2.blocks.4.mlp.fc1.weight has (384, 1536)
layers.2.blocks.4.mlp.fc1.bias has [1536], but layers.2.blocks.4.mlp.fc1.bias has (1536,)
layers.2.blocks.4.mlp.fc2.weight has [1536, 384], but layers.2.blocks.4.mlp.fc2.weight has (1536, 384)
layers.2.blocks.4.mlp.fc2.bias has [384], but layers.2.blocks.4.mlp.fc2.bias has (384,)
layers.2.blocks.5.norm1.weight has [384], but layers.2.blocks.5.norm1.weight has (384,)
layers.2.blocks.5.norm1.bias has [384], but layers.2.blocks.5.norm1.bias has (384,)
layers.2.blocks.5.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.5.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.5.attn.relative_position_index has [49, 49], but layers.2.blocks.5.attn.relative_position_index has (49, 49)
layers.2.blocks.5.attn.qkv.weight has [384, 1152], but layers.2.blocks.5.attn.qkv.weight has (384, 1152)
layers.2.blocks.5.attn.qkv.bias has [1152], but layers.2.blocks.5.attn.qkv.bias has (1152,)
layers.2.blocks.5.attn.proj.weight has [384, 384], but layers.2.blocks.5.attn.proj.weight has (384, 384)
layers.2.blocks.5.attn.proj.bias has [384], but layers.2.blocks.5.attn.proj.bias has (384,)
layers.2.blocks.5.norm2.weight has [384], but layers.2.blocks.5.norm2.weight has (384,)
layers.2.blocks.5.norm2.bias has [384], but layers.2.blocks.5.norm2.bias has (384,)
layers.2.blocks.5.mlp.fc1.weight has [384, 1536], but layers.2.blocks.5.mlp.fc1.weight has (384, 1536)
layers.2.blocks.5.mlp.fc1.bias has [1536], but layers.2.blocks.5.mlp.fc1.bias has (1536,)
layers.2.blocks.5.mlp.fc2.weight has [1536, 384], but layers.2.blocks.5.mlp.fc2.weight has (1536, 384)
layers.2.blocks.5.mlp.fc2.bias has [384], but layers.2.blocks.5.mlp.fc2.bias has (384,)
layers.2.blocks.6.norm1.weight has [384], but layers.2.blocks.6.norm1.weight has (384,)
layers.2.blocks.6.norm1.bias has [384], but layers.2.blocks.6.norm1.bias has (384,)
layers.2.blocks.6.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.6.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.6.attn.relative_position_index has [49, 49], but layers.2.blocks.6.attn.relative_position_index has (49, 49)
layers.2.blocks.6.attn.qkv.weight has [384, 1152], but layers.2.blocks.6.attn.qkv.weight has (384, 1152)
layers.2.blocks.6.attn.qkv.bias has [1152], but layers.2.blocks.6.attn.qkv.bias has (1152,)
layers.2.blocks.6.attn.proj.weight has [384, 384], but layers.2.blocks.6.attn.proj.weight has (384, 384)
layers.2.blocks.6.attn.proj.bias has [384], but layers.2.blocks.6.attn.proj.bias has (384,)
layers.2.blocks.6.norm2.weight has [384], but layers.2.blocks.6.norm2.weight has (384,)
layers.2.blocks.6.norm2.bias has [384], but layers.2.blocks.6.norm2.bias has (384,)
layers.2.blocks.6.mlp.fc1.weight has [384, 1536], but layers.2.blocks.6.mlp.fc1.weight has (384, 1536)
layers.2.blocks.6.mlp.fc1.bias has [1536], but layers.2.blocks.6.mlp.fc1.bias has (1536,)
layers.2.blocks.6.mlp.fc2.weight has [1536, 384], but layers.2.blocks.6.mlp.fc2.weight has (1536, 384)
layers.2.blocks.6.mlp.fc2.bias has [384], but layers.2.blocks.6.mlp.fc2.bias has (384,)
layers.2.blocks.7.norm1.weight has [384], but layers.2.blocks.7.norm1.weight has (384,)
layers.2.blocks.7.norm1.bias has [384], but layers.2.blocks.7.norm1.bias has (384,)
layers.2.blocks.7.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.7.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.7.attn.relative_position_index has [49, 49], but layers.2.blocks.7.attn.relative_position_index has (49, 49)
layers.2.blocks.7.attn.qkv.weight has [384, 1152], but layers.2.blocks.7.attn.qkv.weight has (384, 1152)
layers.2.blocks.7.attn.qkv.bias has [1152], but layers.2.blocks.7.attn.qkv.bias has (1152,)
layers.2.blocks.7.attn.proj.weight has [384, 384], but layers.2.blocks.7.attn.proj.weight has (384, 384)
layers.2.blocks.7.attn.proj.bias has [384], but layers.2.blocks.7.attn.proj.bias has (384,)
layers.2.blocks.7.norm2.weight has [384], but layers.2.blocks.7.norm2.weight has (384,)
layers.2.blocks.7.norm2.bias has [384], but layers.2.blocks.7.norm2.bias has (384,)
layers.2.blocks.7.mlp.fc1.weight has [384, 1536], but layers.2.blocks.7.mlp.fc1.weight has (384, 1536)
layers.2.blocks.7.mlp.fc1.bias has [1536], but layers.2.blocks.7.mlp.fc1.bias has (1536,)
layers.2.blocks.7.mlp.fc2.weight has [1536, 384], but layers.2.blocks.7.mlp.fc2.weight has (1536, 384)
layers.2.blocks.7.mlp.fc2.bias has [384], but layers.2.blocks.7.mlp.fc2.bias has (384,)
layers.2.blocks.8.norm1.weight has [384], but layers.2.blocks.8.norm1.weight has (384,)
layers.2.blocks.8.norm1.bias has [384], but layers.2.blocks.8.norm1.bias has (384,)
layers.2.blocks.8.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.8.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.8.attn.relative_position_index has [49, 49], but layers.2.blocks.8.attn.relative_position_index has (49, 49)
layers.2.blocks.8.attn.qkv.weight has [384, 1152], but layers.2.blocks.8.attn.qkv.weight has (384, 1152)
layers.2.blocks.8.attn.qkv.bias has [1152], but layers.2.blocks.8.attn.qkv.bias has (1152,)
layers.2.blocks.8.attn.proj.weight has [384, 384], but layers.2.blocks.8.attn.proj.weight has (384, 384)
layers.2.blocks.8.attn.proj.bias has [384], but layers.2.blocks.8.attn.proj.bias has (384,)
layers.2.blocks.8.norm2.weight has [384], but layers.2.blocks.8.norm2.weight has (384,)
layers.2.blocks.8.norm2.bias has [384], but layers.2.blocks.8.norm2.bias has (384,)
layers.2.blocks.8.mlp.fc1.weight has [384, 1536], but layers.2.blocks.8.mlp.fc1.weight has (384, 1536)
layers.2.blocks.8.mlp.fc1.bias has [1536], but layers.2.blocks.8.mlp.fc1.bias has (1536,)
layers.2.blocks.8.mlp.fc2.weight has [1536, 384], but layers.2.blocks.8.mlp.fc2.weight has (1536, 384)
layers.2.blocks.8.mlp.fc2.bias has [384], but layers.2.blocks.8.mlp.fc2.bias has (384,)
layers.2.blocks.9.norm1.weight has [384], but layers.2.blocks.9.norm1.weight has (384,)
layers.2.blocks.9.norm1.bias has [384], but layers.2.blocks.9.norm1.bias has (384,)
layers.2.blocks.9.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.9.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.9.attn.relative_position_index has [49, 49], but layers.2.blocks.9.attn.relative_position_index has (49, 49)
layers.2.blocks.9.attn.qkv.weight has [384, 1152], but layers.2.blocks.9.attn.qkv.weight has (384, 1152)
layers.2.blocks.9.attn.qkv.bias has [1152], but layers.2.blocks.9.attn.qkv.bias has (1152,)
layers.2.blocks.9.attn.proj.weight has [384, 384], but layers.2.blocks.9.attn.proj.weight has (384, 384)
layers.2.blocks.9.attn.proj.bias has [384], but layers.2.blocks.9.attn.proj.bias has (384,)
layers.2.blocks.9.norm2.weight has [384], but layers.2.blocks.9.norm2.weight has (384,)
layers.2.blocks.9.norm2.bias has [384], but layers.2.blocks.9.norm2.bias has (384,)
layers.2.blocks.9.mlp.fc1.weight has [384, 1536], but layers.2.blocks.9.mlp.fc1.weight has (384, 1536)
layers.2.blocks.9.mlp.fc1.bias has [1536], but layers.2.blocks.9.mlp.fc1.bias has (1536,)
layers.2.blocks.9.mlp.fc2.weight has [1536, 384], but layers.2.blocks.9.mlp.fc2.weight has (1536, 384)
layers.2.blocks.9.mlp.fc2.bias has [384], but layers.2.blocks.9.mlp.fc2.bias has (384,)
layers.2.blocks.10.norm1.weight has [384], but layers.2.blocks.10.norm1.weight has (384,)
layers.2.blocks.10.norm1.bias has [384], but layers.2.blocks.10.norm1.bias has (384,)
layers.2.blocks.10.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.10.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.10.attn.relative_position_index has [49, 49], but layers.2.blocks.10.attn.relative_position_index has (49, 49)
layers.2.blocks.10.attn.qkv.weight has [384, 1152], but layers.2.blocks.10.attn.qkv.weight has (384, 1152)
layers.2.blocks.10.attn.qkv.bias has [1152], but layers.2.blocks.10.attn.qkv.bias has (1152,)
layers.2.blocks.10.attn.proj.weight has [384, 384], but layers.2.blocks.10.attn.proj.weight has (384, 384)
layers.2.blocks.10.attn.proj.bias has [384], but layers.2.blocks.10.attn.proj.bias has (384,)
layers.2.blocks.10.norm2.weight has [384], but layers.2.blocks.10.norm2.weight has (384,)
layers.2.blocks.10.norm2.bias has [384], but layers.2.blocks.10.norm2.bias has (384,)
layers.2.blocks.10.mlp.fc1.weight has [384, 1536], but layers.2.blocks.10.mlp.fc1.weight has (384, 1536)
layers.2.blocks.10.mlp.fc1.bias has [1536], but layers.2.blocks.10.mlp.fc1.bias has (1536,)
layers.2.blocks.10.mlp.fc2.weight has [1536, 384], but layers.2.blocks.10.mlp.fc2.weight has (1536, 384)
layers.2.blocks.10.mlp.fc2.bias has [384], but layers.2.blocks.10.mlp.fc2.bias has (384,)
layers.2.blocks.11.norm1.weight has [384], but layers.2.blocks.11.norm1.weight has (384,)
layers.2.blocks.11.norm1.bias has [384], but layers.2.blocks.11.norm1.bias has (384,)
layers.2.blocks.11.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.11.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.11.attn.relative_position_index has [49, 49], but layers.2.blocks.11.attn.relative_position_index has (49, 49)
layers.2.blocks.11.attn.qkv.weight has [384, 1152], but layers.2.blocks.11.attn.qkv.weight has (384, 1152)
layers.2.blocks.11.attn.qkv.bias has [1152], but layers.2.blocks.11.attn.qkv.bias has (1152,)
layers.2.blocks.11.attn.proj.weight has [384, 384], but layers.2.blocks.11.attn.proj.weight has (384, 384)
layers.2.blocks.11.attn.proj.bias has [384], but layers.2.blocks.11.attn.proj.bias has (384,)
layers.2.blocks.11.norm2.weight has [384], but layers.2.blocks.11.norm2.weight has (384,)
layers.2.blocks.11.norm2.bias has [384], but layers.2.blocks.11.norm2.bias has (384,)
layers.2.blocks.11.mlp.fc1.weight has [384, 1536], but layers.2.blocks.11.mlp.fc1.weight has (384, 1536)
layers.2.blocks.11.mlp.fc1.bias has [1536], but layers.2.blocks.11.mlp.fc1.bias has (1536,)
layers.2.blocks.11.mlp.fc2.weight has [1536, 384], but layers.2.blocks.11.mlp.fc2.weight has (1536, 384)
layers.2.blocks.11.mlp.fc2.bias has [384], but layers.2.blocks.11.mlp.fc2.bias has (384,)
layers.2.blocks.12.norm1.weight has [384], but layers.2.blocks.12.norm1.weight has (384,)
layers.2.blocks.12.norm1.bias has [384], but layers.2.blocks.12.norm1.bias has (384,)
layers.2.blocks.12.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.12.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.12.attn.relative_position_index has [49, 49], but layers.2.blocks.12.attn.relative_position_index has (49, 49)
layers.2.blocks.12.attn.qkv.weight has [384, 1152], but layers.2.blocks.12.attn.qkv.weight has (384, 1152)
layers.2.blocks.12.attn.qkv.bias has [1152], but layers.2.blocks.12.attn.qkv.bias has (1152,)
layers.2.blocks.12.attn.proj.weight has [384, 384], but layers.2.blocks.12.attn.proj.weight has (384, 384)
layers.2.blocks.12.attn.proj.bias has [384], but layers.2.blocks.12.attn.proj.bias has (384,)
layers.2.blocks.12.norm2.weight has [384], but layers.2.blocks.12.norm2.weight has (384,)
layers.2.blocks.12.norm2.bias has [384], but layers.2.blocks.12.norm2.bias has (384,)
layers.2.blocks.12.mlp.fc1.weight has [384, 1536], but layers.2.blocks.12.mlp.fc1.weight has (384, 1536)
layers.2.blocks.12.mlp.fc1.bias has [1536], but layers.2.blocks.12.mlp.fc1.bias has (1536,)
layers.2.blocks.12.mlp.fc2.weight has [1536, 384], but layers.2.blocks.12.mlp.fc2.weight has (1536, 384)
layers.2.blocks.12.mlp.fc2.bias has [384], but layers.2.blocks.12.mlp.fc2.bias has (384,)
layers.2.blocks.13.norm1.weight has [384], but layers.2.blocks.13.norm1.weight has (384,)
layers.2.blocks.13.norm1.bias has [384], but layers.2.blocks.13.norm1.bias has (384,)
layers.2.blocks.13.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.13.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.13.attn.relative_position_index has [49, 49], but layers.2.blocks.13.attn.relative_position_index has (49, 49)
layers.2.blocks.13.attn.qkv.weight has [384, 1152], but layers.2.blocks.13.attn.qkv.weight has (384, 1152)
layers.2.blocks.13.attn.qkv.bias has [1152], but layers.2.blocks.13.attn.qkv.bias has (1152,)
layers.2.blocks.13.attn.proj.weight has [384, 384], but layers.2.blocks.13.attn.proj.weight has (384, 384)
layers.2.blocks.13.attn.proj.bias has [384], but layers.2.blocks.13.attn.proj.bias has (384,)
layers.2.blocks.13.norm2.weight has [384], but layers.2.blocks.13.norm2.weight has (384,)
layers.2.blocks.13.norm2.bias has [384], but layers.2.blocks.13.norm2.bias has (384,)
layers.2.blocks.13.mlp.fc1.weight has [384, 1536], but layers.2.blocks.13.mlp.fc1.weight has (384, 1536)
layers.2.blocks.13.mlp.fc1.bias has [1536], but layers.2.blocks.13.mlp.fc1.bias has (1536,)
layers.2.blocks.13.mlp.fc2.weight has [1536, 384], but layers.2.blocks.13.mlp.fc2.weight has (1536, 384)
layers.2.blocks.13.mlp.fc2.bias has [384], but layers.2.blocks.13.mlp.fc2.bias has (384,)
layers.2.blocks.14.norm1.weight has [384], but layers.2.blocks.14.norm1.weight has (384,)
layers.2.blocks.14.norm1.bias has [384], but layers.2.blocks.14.norm1.bias has (384,)
layers.2.blocks.14.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.14.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.14.attn.relative_position_index has [49, 49], but layers.2.blocks.14.attn.relative_position_index has (49, 49)
layers.2.blocks.14.attn.qkv.weight has [384, 1152], but layers.2.blocks.14.attn.qkv.weight has (384, 1152)
layers.2.blocks.14.attn.qkv.bias has [1152], but layers.2.blocks.14.attn.qkv.bias has (1152,)
layers.2.blocks.14.attn.proj.weight has [384, 384], but layers.2.blocks.14.attn.proj.weight has (384, 384)
layers.2.blocks.14.attn.proj.bias has [384], but layers.2.blocks.14.attn.proj.bias has (384,)
layers.2.blocks.14.norm2.weight has [384], but layers.2.blocks.14.norm2.weight has (384,)
layers.2.blocks.14.norm2.bias has [384], but layers.2.blocks.14.norm2.bias has (384,)
layers.2.blocks.14.mlp.fc1.weight has [384, 1536], but layers.2.blocks.14.mlp.fc1.weight has (384, 1536)
layers.2.blocks.14.mlp.fc1.bias has [1536], but layers.2.blocks.14.mlp.fc1.bias has (1536,)
layers.2.blocks.14.mlp.fc2.weight has [1536, 384], but layers.2.blocks.14.mlp.fc2.weight has (1536, 384)
layers.2.blocks.14.mlp.fc2.bias has [384], but layers.2.blocks.14.mlp.fc2.bias has (384,)
layers.2.blocks.15.norm1.weight has [384], but layers.2.blocks.15.norm1.weight has (384,)
layers.2.blocks.15.norm1.bias has [384], but layers.2.blocks.15.norm1.bias has (384,)
layers.2.blocks.15.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.15.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.15.attn.relative_position_index has [49, 49], but layers.2.blocks.15.attn.relative_position_index has (49, 49)
layers.2.blocks.15.attn.qkv.weight has [384, 1152], but layers.2.blocks.15.attn.qkv.weight has (384, 1152)
layers.2.blocks.15.attn.qkv.bias has [1152], but layers.2.blocks.15.attn.qkv.bias has (1152,)
layers.2.blocks.15.attn.proj.weight has [384, 384], but layers.2.blocks.15.attn.proj.weight has (384, 384)
layers.2.blocks.15.attn.proj.bias has [384], but layers.2.blocks.15.attn.proj.bias has (384,)
layers.2.blocks.15.norm2.weight has [384], but layers.2.blocks.15.norm2.weight has (384,)
layers.2.blocks.15.norm2.bias has [384], but layers.2.blocks.15.norm2.bias has (384,)
layers.2.blocks.15.mlp.fc1.weight has [384, 1536], but layers.2.blocks.15.mlp.fc1.weight has (384, 1536)
layers.2.blocks.15.mlp.fc1.bias has [1536], but layers.2.blocks.15.mlp.fc1.bias has (1536,)
layers.2.blocks.15.mlp.fc2.weight has [1536, 384], but layers.2.blocks.15.mlp.fc2.weight has (1536, 384)
layers.2.blocks.15.mlp.fc2.bias has [384], but layers.2.blocks.15.mlp.fc2.bias has (384,)
layers.2.blocks.16.norm1.weight has [384], but layers.2.blocks.16.norm1.weight has (384,)
layers.2.blocks.16.norm1.bias has [384], but layers.2.blocks.16.norm1.bias has (384,)
layers.2.blocks.16.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.16.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.16.attn.relative_position_index has [49, 49], but layers.2.blocks.16.attn.relative_position_index has (49, 49)
layers.2.blocks.16.attn.qkv.weight has [384, 1152], but layers.2.blocks.16.attn.qkv.weight has (384, 1152)
layers.2.blocks.16.attn.qkv.bias has [1152], but layers.2.blocks.16.attn.qkv.bias has (1152,)
layers.2.blocks.16.attn.proj.weight has [384, 384], but layers.2.blocks.16.attn.proj.weight has (384, 384)
layers.2.blocks.16.attn.proj.bias has [384], but layers.2.blocks.16.attn.proj.bias has (384,)
layers.2.blocks.16.norm2.weight has [384], but layers.2.blocks.16.norm2.weight has (384,)
layers.2.blocks.16.norm2.bias has [384], but layers.2.blocks.16.norm2.bias has (384,)
layers.2.blocks.16.mlp.fc1.weight has [384, 1536], but layers.2.blocks.16.mlp.fc1.weight has (384, 1536)
layers.2.blocks.16.mlp.fc1.bias has [1536], but layers.2.blocks.16.mlp.fc1.bias has (1536,)
layers.2.blocks.16.mlp.fc2.weight has [1536, 384], but layers.2.blocks.16.mlp.fc2.weight has (1536, 384)
layers.2.blocks.16.mlp.fc2.bias has [384], but layers.2.blocks.16.mlp.fc2.bias has (384,)
layers.2.blocks.17.norm1.weight has [384], but layers.2.blocks.17.norm1.weight has (384,)
layers.2.blocks.17.norm1.bias has [384], but layers.2.blocks.17.norm1.bias has (384,)
layers.2.blocks.17.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.17.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.17.attn.relative_position_index has [49, 49], but layers.2.blocks.17.attn.relative_position_index has (49, 49)
layers.2.blocks.17.attn.qkv.weight has [384, 1152], but layers.2.blocks.17.attn.qkv.weight has (384, 1152)
layers.2.blocks.17.attn.qkv.bias has [1152], but layers.2.blocks.17.attn.qkv.bias has (1152,)
layers.2.blocks.17.attn.proj.weight has [384, 384], but layers.2.blocks.17.attn.proj.weight has (384, 384)
layers.2.blocks.17.attn.proj.bias has [384], but layers.2.blocks.17.attn.proj.bias has (384,)
layers.2.blocks.17.norm2.weight has [384], but layers.2.blocks.17.norm2.weight has (384,)
layers.2.blocks.17.norm2.bias has [384], but layers.2.blocks.17.norm2.bias has (384,)
layers.2.blocks.17.mlp.fc1.weight has [384, 1536], but layers.2.blocks.17.mlp.fc1.weight has (384, 1536)
layers.2.blocks.17.mlp.fc1.bias has [1536], but layers.2.blocks.17.mlp.fc1.bias has (1536,)
layers.2.blocks.17.mlp.fc2.weight has [1536, 384], but layers.2.blocks.17.mlp.fc2.weight has (1536, 384)
layers.2.blocks.17.mlp.fc2.bias has [384], but layers.2.blocks.17.mlp.fc2.bias has (384,)
layers.2.downsample.reduction.weight has [1536, 768], but layers.2.downsample.reduction.weight has (1536, 768)
layers.2.downsample.norm.weight has [1536], but layers.2.downsample.norm.weight has (1536,)
layers.2.downsample.norm.bias has [1536], but layers.2.downsample.norm.bias has (1536,)
layers.3.blocks.0.norm1.weight has [768], but layers.3.blocks.0.norm1.weight has (768,)
layers.3.blocks.0.norm1.bias has [768], but layers.3.blocks.0.norm1.bias has (768,)
layers.3.blocks.0.attn.relative_position_bias_table has [169, 24], but layers.3.blocks.0.attn.relative_position_bias_table has (169, 24)
layers.3.blocks.0.attn.relative_position_index has [49, 49], but layers.3.blocks.0.attn.relative_position_index has (49, 49)
layers.3.blocks.0.attn.qkv.weight has [768, 2304], but layers.3.blocks.0.attn.qkv.weight has (768, 2304)
layers.3.blocks.0.attn.qkv.bias has [2304], but layers.3.blocks.0.attn.qkv.bias has (2304,)
layers.3.blocks.0.attn.proj.weight has [768, 768], but layers.3.blocks.0.attn.proj.weight has (768, 768)
layers.3.blocks.0.attn.proj.bias has [768], but layers.3.blocks.0.attn.proj.bias has (768,)
layers.3.blocks.0.norm2.weight has [768], but layers.3.blocks.0.norm2.weight has (768,)
layers.3.blocks.0.norm2.bias has [768], but layers.3.blocks.0.norm2.bias has (768,)
layers.3.blocks.0.mlp.fc1.weight has [768, 3072], but layers.3.blocks.0.mlp.fc1.weight has (768, 3072)
layers.3.blocks.0.mlp.fc1.bias has [3072], but layers.3.blocks.0.mlp.fc1.bias has (3072,)
layers.3.blocks.0.mlp.fc2.weight has [3072, 768], but layers.3.blocks.0.mlp.fc2.weight has (3072, 768)
layers.3.blocks.0.mlp.fc2.bias has [768], but layers.3.blocks.0.mlp.fc2.bias has (768,)
layers.3.blocks.1.norm1.weight has [768], but layers.3.blocks.1.norm1.weight has (768,)
layers.3.blocks.1.norm1.bias has [768], but layers.3.blocks.1.norm1.bias has (768,)
layers.3.blocks.1.attn.relative_position_bias_table has [169, 24], but layers.3.blocks.1.attn.relative_position_bias_table has (169, 24)
layers.3.blocks.1.attn.relative_position_index has [49, 49], but layers.3.blocks.1.attn.relative_position_index has (49, 49)
layers.3.blocks.1.attn.qkv.weight has [768, 2304], but layers.3.blocks.1.attn.qkv.weight has (768, 2304)
layers.3.blocks.1.attn.qkv.bias has [2304], but layers.3.blocks.1.attn.qkv.bias has (2304,)
layers.3.blocks.1.attn.proj.weight has [768, 768], but layers.3.blocks.1.attn.proj.weight has (768, 768)
layers.3.blocks.1.attn.proj.bias has [768], but layers.3.blocks.1.attn.proj.bias has (768,)
layers.3.blocks.1.norm2.weight has [768], but layers.3.blocks.1.norm2.weight has (768,)
layers.3.blocks.1.norm2.bias has [768], but layers.3.blocks.1.norm2.bias has (768,)
layers.3.blocks.1.mlp.fc1.weight has [768, 3072], but layers.3.blocks.1.mlp.fc1.weight has (768, 3072)
layers.3.blocks.1.mlp.fc1.bias has [3072], but layers.3.blocks.1.mlp.fc1.bias has (3072,)
layers.3.blocks.1.mlp.fc2.weight has [3072, 768], but layers.3.blocks.1.mlp.fc2.weight has (3072, 768)
layers.3.blocks.1.mlp.fc2.bias has [768], but layers.3.blocks.1.mlp.fc2.bias has (768,)
patch_embed.proj.weight has (96, 3, 4, 4), but patch_embed.proj.weight has [96, 3, 4, 4]
patch_embed.proj.bias has (96,), but patch_embed.proj.bias has [96]
patch_embed.norm.weight has (96,), but patch_embed.norm.weight has [96]
patch_embed.norm.bias has (96,), but patch_embed.norm.bias has [96]
layers.0.blocks.0.norm1.weight has (96,), but layers.0.blocks.0.norm1.weight has [96]
layers.0.blocks.0.norm1.bias has (96,), but layers.0.blocks.0.norm1.bias has [96]
layers.0.blocks.0.attn.qkv.weight has (96, 288), but layers.0.blocks.0.attn.qkv.weight has [96, 288]
layers.0.blocks.0.attn.qkv.bias has (288,), but layers.0.blocks.0.attn.qkv.bias has [288]
layers.0.blocks.0.attn.proj.weight has (96, 96), but layers.0.blocks.0.attn.proj.weight has [96, 96]
layers.0.blocks.0.attn.proj.bias has (96,), but layers.0.blocks.0.attn.proj.bias has [96]
layers.0.blocks.0.norm2.weight has (96,), but layers.0.blocks.0.norm2.weight has [96]
layers.0.blocks.0.norm2.bias has (96,), but layers.0.blocks.0.norm2.bias has [96]
layers.0.blocks.0.mlp.fc1.weight has (96, 384), but layers.0.blocks.0.mlp.fc1.weight has [96, 384]
layers.0.blocks.0.mlp.fc1.bias has (384,), but layers.0.blocks.0.mlp.fc1.bias has [384]
layers.0.blocks.0.mlp.fc2.weight has (384, 96), but layers.0.blocks.0.mlp.fc2.weight has [384, 96]
layers.0.blocks.0.mlp.fc2.bias has (96,), but layers.0.blocks.0.mlp.fc2.bias has [96]
layers.0.blocks.1.norm1.weight has (96,), but layers.0.blocks.1.norm1.weight has [96]
layers.0.blocks.1.norm1.bias has (96,), but layers.0.blocks.1.norm1.bias has [96]
layers.0.blocks.1.attn.qkv.weight has (96, 288), but layers.0.blocks.1.attn.qkv.weight has [96, 288]
layers.0.blocks.1.attn.qkv.bias has (288,), but layers.0.blocks.1.attn.qkv.bias has [288]
layers.0.blocks.1.attn.proj.weight has (96, 96), but layers.0.blocks.1.attn.proj.weight has [96, 96]
layers.0.blocks.1.attn.proj.bias has (96,), but layers.0.blocks.1.attn.proj.bias has [96]
layers.0.blocks.1.norm2.weight has (96,), but layers.0.blocks.1.norm2.weight has [96]
layers.0.blocks.1.norm2.bias has (96,), but layers.0.blocks.1.norm2.bias has [96]
layers.0.blocks.1.mlp.fc1.weight has (96, 384), but layers.0.blocks.1.mlp.fc1.weight has [96, 384]
layers.0.blocks.1.mlp.fc1.bias has (384,), but layers.0.blocks.1.mlp.fc1.bias has [384]
layers.0.blocks.1.mlp.fc2.weight has (384, 96), but layers.0.blocks.1.mlp.fc2.weight has [384, 96]
layers.0.blocks.1.mlp.fc2.bias has (96,), but layers.0.blocks.1.mlp.fc2.bias has [96]
layers.0.downsample.norm.weight has (384,), but layers.0.downsample.norm.weight has [384]
layers.0.downsample.norm.bias has (384,), but layers.0.downsample.norm.bias has [384]
layers.1.blocks.0.norm1.weight has (192,), but layers.1.blocks.0.norm1.weight has [192]
layers.1.blocks.0.norm1.bias has (192,), but layers.1.blocks.0.norm1.bias has [192]
layers.1.blocks.0.attn.qkv.weight has (192, 576), but layers.1.blocks.0.attn.qkv.weight has [192, 576]
layers.1.blocks.0.attn.qkv.bias has (576,), but layers.1.blocks.0.attn.qkv.bias has [576]
layers.1.blocks.0.attn.proj.weight has (192, 192), but layers.1.blocks.0.attn.proj.weight has [192, 192]
layers.1.blocks.0.attn.proj.bias has (192,), but layers.1.blocks.0.attn.proj.bias has [192]
layers.1.blocks.0.norm2.weight has (192,), but layers.1.blocks.0.norm2.weight has [192]
layers.1.blocks.0.norm2.bias has (192,), but layers.1.blocks.0.norm2.bias has [192]
layers.1.blocks.0.mlp.fc1.weight has (192, 768), but layers.1.blocks.0.mlp.fc1.weight has [192, 768]
layers.1.blocks.0.mlp.fc1.bias has (768,), but layers.1.blocks.0.mlp.fc1.bias has [768]
layers.1.blocks.0.mlp.fc2.weight has (768, 192), but layers.1.blocks.0.mlp.fc2.weight has [768, 192]
layers.1.blocks.0.mlp.fc2.bias has (192,), but layers.1.blocks.0.mlp.fc2.bias has [192]
layers.1.blocks.1.norm1.weight has (192,), but layers.1.blocks.1.norm1.weight has [192]
layers.1.blocks.1.norm1.bias has (192,), but layers.1.blocks.1.norm1.bias has [192]
layers.1.blocks.1.attn.qkv.weight has (192, 576), but layers.1.blocks.1.attn.qkv.weight has [192, 576]
layers.1.blocks.1.attn.qkv.bias has (576,), but layers.1.blocks.1.attn.qkv.bias has [576]
layers.1.blocks.1.attn.proj.weight has (192, 192), but layers.1.blocks.1.attn.proj.weight has [192, 192]
layers.1.blocks.1.attn.proj.bias has (192,), but layers.1.blocks.1.attn.proj.bias has [192]
layers.1.blocks.1.norm2.weight has (192,), but layers.1.blocks.1.norm2.weight has [192]
layers.1.blocks.1.norm2.bias has (192,), but layers.1.blocks.1.norm2.bias has [192]
layers.1.blocks.1.mlp.fc1.weight has (192, 768), but layers.1.blocks.1.mlp.fc1.weight has [192, 768]
layers.1.blocks.1.mlp.fc1.bias has (768,), but layers.1.blocks.1.mlp.fc1.bias has [768]
layers.1.blocks.1.mlp.fc2.weight has (768, 192), but layers.1.blocks.1.mlp.fc2.weight has [768, 192]
layers.1.blocks.1.mlp.fc2.bias has (192,), but layers.1.blocks.1.mlp.fc2.bias has [192]
layers.1.downsample.norm.weight has (768,), but layers.1.downsample.norm.weight has [768]
layers.1.downsample.norm.bias has (768,), but layers.1.downsample.norm.bias has [768]
layers.2.blocks.0.norm1.weight has (384,), but layers.2.blocks.0.norm1.weight has [384]
layers.2.blocks.0.norm1.bias has (384,), but layers.2.blocks.0.norm1.bias has [384]
layers.2.blocks.0.attn.qkv.weight has (384, 1152), but layers.2.blocks.0.attn.qkv.weight has [384, 1152]
layers.2.blocks.0.attn.qkv.bias has (1152,), but layers.2.blocks.0.attn.qkv.bias has [1152]
layers.2.blocks.0.attn.proj.weight has (384, 384), but layers.2.blocks.0.attn.proj.weight has [384, 384]
layers.2.blocks.0.attn.proj.bias has (384,), but layers.2.blocks.0.attn.proj.bias has [384]
layers.2.blocks.0.norm2.weight has (384,), but layers.2.blocks.0.norm2.weight has [384]
layers.2.blocks.0.norm2.bias has (384,), but layers.2.blocks.0.norm2.bias has [384]
layers.2.blocks.0.mlp.fc1.weight has (384, 1536), but layers.2.blocks.0.mlp.fc1.weight has [384, 1536]
layers.2.blocks.0.mlp.fc1.bias has (1536,), but layers.2.blocks.0.mlp.fc1.bias has [1536]
layers.2.blocks.0.mlp.fc2.weight has (1536, 384), but layers.2.blocks.0.mlp.fc2.weight has [1536, 384]
layers.2.blocks.0.mlp.fc2.bias has (384,), but layers.2.blocks.0.mlp.fc2.bias has [384]
layers.2.blocks.1.norm1.weight has (384,), but layers.2.blocks.1.norm1.weight has [384]
layers.2.blocks.1.norm1.bias has (384,), but layers.2.blocks.1.norm1.bias has [384]
layers.2.blocks.1.attn.qkv.weight has (384, 1152), but layers.2.blocks.1.attn.qkv.weight has [384, 1152]
layers.2.blocks.1.attn.qkv.bias has (1152,), but layers.2.blocks.1.attn.qkv.bias has [1152]
layers.2.blocks.1.attn.proj.weight has (384, 384), but layers.2.blocks.1.attn.proj.weight has [384, 384]
layers.2.blocks.1.attn.proj.bias has (384,), but layers.2.blocks.1.attn.proj.bias has [384]
layers.2.blocks.1.norm2.weight has (384,), but layers.2.blocks.1.norm2.weight has [384]
layers.2.blocks.1.norm2.bias has (384,), but layers.2.blocks.1.norm2.bias has [384]
layers.2.blocks.1.mlp.fc1.weight has (384, 1536), but layers.2.blocks.1.mlp.fc1.weight has [384, 1536]
layers.2.blocks.1.mlp.fc1.bias has (1536,), but layers.2.blocks.1.mlp.fc1.bias has [1536]
layers.2.blocks.1.mlp.fc2.weight has (1536, 384), but layers.2.blocks.1.mlp.fc2.weight has [1536, 384]
layers.2.blocks.1.mlp.fc2.bias has (384,), but layers.2.blocks.1.mlp.fc2.bias has [384]
layers.2.blocks.2.norm1.weight has (384,), but layers.2.blocks.2.norm1.weight has [384]
layers.2.blocks.2.norm1.bias has (384,), but layers.2.blocks.2.norm1.bias has [384]
layers.2.blocks.2.attn.qkv.weight has (384, 1152), but layers.2.blocks.2.attn.qkv.weight has [384, 1152]
layers.2.blocks.2.attn.qkv.bias has (1152,), but layers.2.blocks.2.attn.qkv.bias has [1152]
layers.2.blocks.2.attn.proj.weight has (384, 384), but layers.2.blocks.2.attn.proj.weight has [384, 384]
layers.2.blocks.2.attn.proj.bias has (384,), but layers.2.blocks.2.attn.proj.bias has [384]
layers.2.blocks.2.norm2.weight has (384,), but layers.2.blocks.2.norm2.weight has [384]
layers.2.blocks.2.norm2.bias has (384,), but layers.2.blocks.2.norm2.bias has [384]
layers.2.blocks.2.mlp.fc1.weight has (384, 1536), but layers.2.blocks.2.mlp.fc1.weight has [384, 1536]
layers.2.blocks.2.mlp.fc1.bias has (1536,), but layers.2.blocks.2.mlp.fc1.bias has [1536]
layers.2.blocks.2.mlp.fc2.weight has (1536, 384), but layers.2.blocks.2.mlp.fc2.weight has [1536, 384]
layers.2.blocks.2.mlp.fc2.bias has (384,), but layers.2.blocks.2.mlp.fc2.bias has [384]
layers.2.blocks.3.norm1.weight has (384,), but layers.2.blocks.3.norm1.weight has [384]
layers.2.blocks.3.norm1.bias has (384,), but layers.2.blocks.3.norm1.bias has [384]
layers.2.blocks.3.attn.qkv.weight has (384, 1152), but layers.2.blocks.3.attn.qkv.weight has [384, 1152]
layers.2.blocks.3.attn.qkv.bias has (1152,), but layers.2.blocks.3.attn.qkv.bias has [1152]
layers.2.blocks.3.attn.proj.weight has (384, 384), but layers.2.blocks.3.attn.proj.weight has [384, 384]
layers.2.blocks.3.attn.proj.bias has (384,), but layers.2.blocks.3.attn.proj.bias has [384]
layers.2.blocks.3.norm2.weight has (384,), but layers.2.blocks.3.norm2.weight has [384]
layers.2.blocks.3.norm2.bias has (384,), but layers.2.blocks.3.norm2.bias has [384]
layers.2.blocks.3.mlp.fc1.weight has (384, 1536), but layers.2.blocks.3.mlp.fc1.weight has [384, 1536]
layers.2.blocks.3.mlp.fc1.bias has (1536,), but layers.2.blocks.3.mlp.fc1.bias has [1536]
layers.2.blocks.3.mlp.fc2.weight has (1536, 384), but layers.2.blocks.3.mlp.fc2.weight has [1536, 384]
layers.2.blocks.3.mlp.fc2.bias has (384,), but layers.2.blocks.3.mlp.fc2.bias has [384]
layers.2.blocks.4.norm1.weight has (384,), but layers.2.blocks.4.norm1.weight has [384]
layers.2.blocks.4.norm1.bias has (384,), but layers.2.blocks.4.norm1.bias has [384]
layers.2.blocks.4.attn.qkv.weight has (384, 1152), but layers.2.blocks.4.attn.qkv.weight has [384, 1152]
layers.2.blocks.4.attn.qkv.bias has (1152,), but layers.2.blocks.4.attn.qkv.bias has [1152]
layers.2.blocks.4.attn.proj.weight has (384, 384), but layers.2.blocks.4.attn.proj.weight has [384, 384]
layers.2.blocks.4.attn.proj.bias has (384,), but layers.2.blocks.4.attn.proj.bias has [384]
layers.2.blocks.4.norm2.weight has (384,), but layers.2.blocks.4.norm2.weight has [384]
layers.2.blocks.4.norm2.bias has (384,), but layers.2.blocks.4.norm2.bias has [384]
layers.2.blocks.4.mlp.fc1.weight has (384, 1536), but layers.2.blocks.4.mlp.fc1.weight has [384, 1536]
layers.2.blocks.4.mlp.fc1.bias has (1536,), but layers.2.blocks.4.mlp.fc1.bias has [1536]
layers.2.blocks.4.mlp.fc2.weight has (1536, 384), but layers.2.blocks.4.mlp.fc2.weight has [1536, 384]
layers.2.blocks.4.mlp.fc2.bias has (384,), but layers.2.blocks.4.mlp.fc2.bias has [384]
layers.2.blocks.5.norm1.weight has (384,), but layers.2.blocks.5.norm1.weight has [384]
layers.2.blocks.5.norm1.bias has (384,), but layers.2.blocks.5.norm1.bias has [384]
layers.2.blocks.5.attn.qkv.weight has (384, 1152), but layers.2.blocks.5.attn.qkv.weight has [384, 1152]
layers.2.blocks.5.attn.qkv.bias has (1152,), but layers.2.blocks.5.attn.qkv.bias has [1152]
layers.2.blocks.5.attn.proj.weight has (384, 384), but layers.2.blocks.5.attn.proj.weight has [384, 384]
layers.2.blocks.5.attn.proj.bias has (384,), but layers.2.blocks.5.attn.proj.bias has [384]
layers.2.blocks.5.norm2.weight has (384,), but layers.2.blocks.5.norm2.weight has [384]
layers.2.blocks.5.norm2.bias has (384,), but layers.2.blocks.5.norm2.bias has [384]
layers.2.blocks.5.mlp.fc1.weight has (384, 1536), but layers.2.blocks.5.mlp.fc1.weight has [384, 1536]
layers.2.blocks.5.mlp.fc1.bias has (1536,), but layers.2.blocks.5.mlp.fc1.bias has [1536]
layers.2.blocks.5.mlp.fc2.weight has (1536, 384), but layers.2.blocks.5.mlp.fc2.weight has [1536, 384]
layers.2.blocks.5.mlp.fc2.bias has (384,), but layers.2.blocks.5.mlp.fc2.bias has [384]
layers.2.blocks.6.norm1.weight has (384,), but layers.2.blocks.6.norm1.weight has [384]
layers.2.blocks.6.norm1.bias has (384,), but layers.2.blocks.6.norm1.bias has [384]
layers.2.blocks.6.attn.qkv.weight has (384, 1152), but layers.2.blocks.6.attn.qkv.weight has [384, 1152]
layers.2.blocks.6.attn.qkv.bias has (1152,), but layers.2.blocks.6.attn.qkv.bias has [1152]
layers.2.blocks.6.attn.proj.weight has (384, 384), but layers.2.blocks.6.attn.proj.weight has [384, 384]
layers.2.blocks.6.attn.proj.bias has (384,), but layers.2.blocks.6.attn.proj.bias has [384]
layers.2.blocks.6.norm2.weight has (384,), but layers.2.blocks.6.norm2.weight has [384]
layers.2.blocks.6.norm2.bias has (384,), but layers.2.blocks.6.norm2.bias has [384]
layers.2.blocks.6.mlp.fc1.weight has (384, 1536), but layers.2.blocks.6.mlp.fc1.weight has [384, 1536]
layers.2.blocks.6.mlp.fc1.bias has (1536,), but layers.2.blocks.6.mlp.fc1.bias has [1536]
layers.2.blocks.6.mlp.fc2.weight has (1536, 384), but layers.2.blocks.6.mlp.fc2.weight has [1536, 384]
layers.2.blocks.6.mlp.fc2.bias has (384,), but layers.2.blocks.6.mlp.fc2.bias has [384]
layers.2.blocks.7.norm1.weight has (384,), but layers.2.blocks.7.norm1.weight has [384]
layers.2.blocks.7.norm1.bias has (384,), but layers.2.blocks.7.norm1.bias has [384]
layers.2.blocks.7.attn.qkv.weight has (384, 1152), but layers.2.blocks.7.attn.qkv.weight has [384, 1152]
layers.2.blocks.7.attn.qkv.bias has (1152,), but layers.2.blocks.7.attn.qkv.bias has [1152]
layers.2.blocks.7.attn.proj.weight has (384, 384), but layers.2.blocks.7.attn.proj.weight has [384, 384]
layers.2.blocks.7.attn.proj.bias has (384,), but layers.2.blocks.7.attn.proj.bias has [384]
layers.2.blocks.7.norm2.weight has (384,), but layers.2.blocks.7.norm2.weight has [384]
layers.2.blocks.7.norm2.bias has (384,), but layers.2.blocks.7.norm2.bias has [384]
layers.2.blocks.7.mlp.fc1.weight has (384, 1536), but layers.2.blocks.7.mlp.fc1.weight has [384, 1536]
layers.2.blocks.7.mlp.fc1.bias has (1536,), but layers.2.blocks.7.mlp.fc1.bias has [1536]
layers.2.blocks.7.mlp.fc2.weight has (1536, 384), but layers.2.blocks.7.mlp.fc2.weight has [1536, 384]
layers.2.blocks.7.mlp.fc2.bias has (384,), but layers.2.blocks.7.mlp.fc2.bias has [384]
layers.2.blocks.8.norm1.weight has (384,), but layers.2.blocks.8.norm1.weight has [384]
layers.2.blocks.8.norm1.bias has (384,), but layers.2.blocks.8.norm1.bias has [384]
layers.2.blocks.8.attn.qkv.weight has (384, 1152), but layers.2.blocks.8.attn.qkv.weight has [384, 1152]
layers.2.blocks.8.attn.qkv.bias has (1152,), but layers.2.blocks.8.attn.qkv.bias has [1152]
layers.2.blocks.8.attn.proj.weight has (384, 384), but layers.2.blocks.8.attn.proj.weight has [384, 384]
layers.2.blocks.8.attn.proj.bias has (384,), but layers.2.blocks.8.attn.proj.bias has [384]
layers.2.blocks.8.norm2.weight has (384,), but layers.2.blocks.8.norm2.weight has [384]
layers.2.blocks.8.norm2.bias has (384,), but layers.2.blocks.8.norm2.bias has [384]
layers.2.blocks.8.mlp.fc1.weight has (384, 1536), but layers.2.blocks.8.mlp.fc1.weight has [384, 1536]
layers.2.blocks.8.mlp.fc1.bias has (1536,), but layers.2.blocks.8.mlp.fc1.bias has [1536]
layers.2.blocks.8.mlp.fc2.weight has (1536, 384), but layers.2.blocks.8.mlp.fc2.weight has [1536, 384]
layers.2.blocks.8.mlp.fc2.bias has (384,), but layers.2.blocks.8.mlp.fc2.bias has [384]
layers.2.blocks.9.norm1.weight has (384,), but layers.2.blocks.9.norm1.weight has [384]
layers.2.blocks.9.norm1.bias has (384,), but layers.2.blocks.9.norm1.bias has [384]
layers.2.blocks.9.attn.qkv.weight has (384, 1152), but layers.2.blocks.9.attn.qkv.weight has [384, 1152]
layers.2.blocks.9.attn.qkv.bias has (1152,), but layers.2.blocks.9.attn.qkv.bias has [1152]
layers.2.blocks.9.attn.proj.weight has (384, 384), but layers.2.blocks.9.attn.proj.weight has [384, 384]
layers.2.blocks.9.attn.proj.bias has (384,), but layers.2.blocks.9.attn.proj.bias has [384]
layers.2.blocks.9.norm2.weight has (384,), but layers.2.blocks.9.norm2.weight has [384]
layers.2.blocks.9.norm2.bias has (384,), but layers.2.blocks.9.norm2.bias has [384]
layers.2.blocks.9.mlp.fc1.weight has (384, 1536), but layers.2.blocks.9.mlp.fc1.weight has [384, 1536]
layers.2.blocks.9.mlp.fc1.bias has (1536,), but layers.2.blocks.9.mlp.fc1.bias has [1536]
layers.2.blocks.9.mlp.fc2.weight has (1536, 384), but layers.2.blocks.9.mlp.fc2.weight has [1536, 384]
layers.2.blocks.9.mlp.fc2.bias has (384,), but layers.2.blocks.9.mlp.fc2.bias has [384]
layers.2.blocks.10.norm1.weight has (384,), but layers.2.blocks.10.norm1.weight has [384]
layers.2.blocks.10.norm1.bias has (384,), but layers.2.blocks.10.norm1.bias has [384]
layers.2.blocks.10.attn.qkv.weight has (384, 1152), but layers.2.blocks.10.attn.qkv.weight has [384, 1152]
layers.2.blocks.10.attn.qkv.bias has (1152,), but layers.2.blocks.10.attn.qkv.bias has [1152]
layers.2.blocks.10.attn.proj.weight has (384, 384), but layers.2.blocks.10.attn.proj.weight has [384, 384]
layers.2.blocks.10.attn.proj.bias has (384,), but layers.2.blocks.10.attn.proj.bias has [384]
layers.2.blocks.10.norm2.weight has (384,), but layers.2.blocks.10.norm2.weight has [384]
layers.2.blocks.10.norm2.bias has (384,), but layers.2.blocks.10.norm2.bias has [384]
layers.2.blocks.10.mlp.fc1.weight has (384, 1536), but layers.2.blocks.10.mlp.fc1.weight has [384, 1536]
layers.2.blocks.10.mlp.fc1.bias has (1536,), but layers.2.blocks.10.mlp.fc1.bias has [1536]
layers.2.blocks.10.mlp.fc2.weight has (1536, 384), but layers.2.blocks.10.mlp.fc2.weight has [1536, 384]
layers.2.blocks.10.mlp.fc2.bias has (384,), but layers.2.blocks.10.mlp.fc2.bias has [384]
layers.2.blocks.11.norm1.weight has (384,), but layers.2.blocks.11.norm1.weight has [384]
layers.2.blocks.11.norm1.bias has (384,), but layers.2.blocks.11.norm1.bias has [384]
layers.2.blocks.11.attn.qkv.weight has (384, 1152), but layers.2.blocks.11.attn.qkv.weight has [384, 1152]
layers.2.blocks.11.attn.qkv.bias has (1152,), but layers.2.blocks.11.attn.qkv.bias has [1152]
layers.2.blocks.11.attn.proj.weight has (384, 384), but layers.2.blocks.11.attn.proj.weight has [384, 384]
layers.2.blocks.11.attn.proj.bias has (384,), but layers.2.blocks.11.attn.proj.bias has [384]
layers.2.blocks.11.norm2.weight has (384,), but layers.2.blocks.11.norm2.weight has [384]
layers.2.blocks.11.norm2.bias has (384,), but layers.2.blocks.11.norm2.bias has [384]
layers.2.blocks.11.mlp.fc1.weight has (384, 1536), but layers.2.blocks.11.mlp.fc1.weight has [384, 1536]
layers.2.blocks.11.mlp.fc1.bias has (1536,), but layers.2.blocks.11.mlp.fc1.bias has [1536]
layers.2.blocks.11.mlp.fc2.weight has (1536, 384), but layers.2.blocks.11.mlp.fc2.weight has [1536, 384]
layers.2.blocks.11.mlp.fc2.bias has (384,), but layers.2.blocks.11.mlp.fc2.bias has [384]
layers.2.blocks.12.norm1.weight has (384,), but layers.2.blocks.12.norm1.weight has [384]
layers.2.blocks.12.norm1.bias has (384,), but layers.2.blocks.12.norm1.bias has [384]
layers.2.blocks.12.attn.qkv.weight has (384, 1152), but layers.2.blocks.12.attn.qkv.weight has [384, 1152]
layers.2.blocks.12.attn.qkv.bias has (1152,), but layers.2.blocks.12.attn.qkv.bias has [1152]
layers.2.blocks.12.attn.proj.weight has (384, 384), but layers.2.blocks.12.attn.proj.weight has [384, 384]
layers.2.blocks.12.attn.proj.bias has (384,), but layers.2.blocks.12.attn.proj.bias has [384]
layers.2.blocks.12.norm2.weight has (384,), but layers.2.blocks.12.norm2.weight has [384]
layers.2.blocks.12.norm2.bias has (384,), but layers.2.blocks.12.norm2.bias has [384]
layers.2.blocks.12.mlp.fc1.weight has (384, 1536), but layers.2.blocks.12.mlp.fc1.weight has [384, 1536]
layers.2.blocks.12.mlp.fc1.bias has (1536,), but layers.2.blocks.12.mlp.fc1.bias has [1536]
layers.2.blocks.12.mlp.fc2.weight has (1536, 384), but layers.2.blocks.12.mlp.fc2.weight has [1536, 384]
layers.2.blocks.12.mlp.fc2.bias has (384,), but layers.2.blocks.12.mlp.fc2.bias has [384]
layers.2.blocks.13.norm1.weight has (384,), but layers.2.blocks.13.norm1.weight has [384]
layers.2.blocks.13.norm1.bias has (384,), but layers.2.blocks.13.norm1.bias has [384]
layers.2.blocks.13.attn.qkv.weight has (384, 1152), but layers.2.blocks.13.attn.qkv.weight has [384, 1152]
layers.2.blocks.13.attn.qkv.bias has (1152,), but layers.2.blocks.13.attn.qkv.bias has [1152]
layers.2.blocks.13.attn.proj.weight has (384, 384), but layers.2.blocks.13.attn.proj.weight has [384, 384]
layers.2.blocks.13.attn.proj.bias has (384,), but layers.2.blocks.13.attn.proj.bias has [384]
layers.2.blocks.13.norm2.weight has (384,), but layers.2.blocks.13.norm2.weight has [384]
layers.2.blocks.13.norm2.bias has (384,), but layers.2.blocks.13.norm2.bias has [384]
layers.2.blocks.13.mlp.fc1.weight has (384, 1536), but layers.2.blocks.13.mlp.fc1.weight has [384, 1536]
layers.2.blocks.13.mlp.fc1.bias has (1536,), but layers.2.blocks.13.mlp.fc1.bias has [1536]
layers.2.blocks.13.mlp.fc2.weight has (1536, 384), but layers.2.blocks.13.mlp.fc2.weight has [1536, 384]
layers.2.blocks.13.mlp.fc2.bias has (384,), but layers.2.blocks.13.mlp.fc2.bias has [384]
layers.2.blocks.14.norm1.weight has (384,), but layers.2.blocks.14.norm1.weight has [384]
layers.2.blocks.14.norm1.bias has (384,), but layers.2.blocks.14.norm1.bias has [384]
layers.2.blocks.14.attn.qkv.weight has (384, 1152), but layers.2.blocks.14.attn.qkv.weight has [384, 1152]
layers.2.blocks.14.attn.qkv.bias has (1152,), but layers.2.blocks.14.attn.qkv.bias has [1152]
layers.2.blocks.14.attn.proj.weight has (384, 384), but layers.2.blocks.14.attn.proj.weight has [384, 384]
layers.2.blocks.14.attn.proj.bias has (384,), but layers.2.blocks.14.attn.proj.bias has [384]
layers.2.blocks.14.norm2.weight has (384,), but layers.2.blocks.14.norm2.weight has [384]
layers.2.blocks.14.norm2.bias has (384,), but layers.2.blocks.14.norm2.bias has [384]
layers.2.blocks.14.mlp.fc1.weight has (384, 1536), but layers.2.blocks.14.mlp.fc1.weight has [384, 1536]
layers.2.blocks.14.mlp.fc1.bias has (1536,), but layers.2.blocks.14.mlp.fc1.bias has [1536]
layers.2.blocks.14.mlp.fc2.weight has (1536, 384), but layers.2.blocks.14.mlp.fc2.weight has [1536, 384]
layers.2.blocks.14.mlp.fc2.bias has (384,), but layers.2.blocks.14.mlp.fc2.bias has [384]
layers.2.blocks.15.norm1.weight has (384,), but layers.2.blocks.15.norm1.weight has [384]
layers.2.blocks.15.norm1.bias has (384,), but layers.2.blocks.15.norm1.bias has [384]
layers.2.blocks.15.attn.qkv.weight has (384, 1152), but layers.2.blocks.15.attn.qkv.weight has [384, 1152]
layers.2.blocks.15.attn.qkv.bias has (1152,), but layers.2.blocks.15.attn.qkv.bias has [1152]
layers.2.blocks.15.attn.proj.weight has (384, 384), but layers.2.blocks.15.attn.proj.weight has [384, 384]
layers.2.blocks.15.attn.proj.bias has (384,), but layers.2.blocks.15.attn.proj.bias has [384]
layers.2.blocks.15.norm2.weight has (384,), but layers.2.blocks.15.norm2.weight has [384]
layers.2.blocks.15.norm2.bias has (384,), but layers.2.blocks.15.norm2.bias has [384]
layers.2.blocks.15.mlp.fc1.weight has (384, 1536), but layers.2.blocks.15.mlp.fc1.weight has [384, 1536]
layers.2.blocks.15.mlp.fc1.bias has (1536,), but layers.2.blocks.15.mlp.fc1.bias has [1536]
layers.2.blocks.15.mlp.fc2.weight has (1536, 384), but layers.2.blocks.15.mlp.fc2.weight has [1536, 384]
layers.2.blocks.15.mlp.fc2.bias has (384,), but layers.2.blocks.15.mlp.fc2.bias has [384]
layers.2.blocks.16.norm1.weight has (384,), but layers.2.blocks.16.norm1.weight has [384]
layers.2.blocks.16.norm1.bias has (384,), but layers.2.blocks.16.norm1.bias has [384]
layers.2.blocks.16.attn.qkv.weight has (384, 1152), but layers.2.blocks.16.attn.qkv.weight has [384, 1152]
layers.2.blocks.16.attn.qkv.bias has (1152,), but layers.2.blocks.16.attn.qkv.bias has [1152]
layers.2.blocks.16.attn.proj.weight has (384, 384), but layers.2.blocks.16.attn.proj.weight has [384, 384]
layers.2.blocks.16.attn.proj.bias has (384,), but layers.2.blocks.16.attn.proj.bias has [384]
layers.2.blocks.16.norm2.weight has (384,), but layers.2.blocks.16.norm2.weight has [384]
layers.2.blocks.16.norm2.bias has (384,), but layers.2.blocks.16.norm2.bias has [384]
layers.2.blocks.16.mlp.fc1.weight has (384, 1536), but layers.2.blocks.16.mlp.fc1.weight has [384, 1536]
layers.2.blocks.16.mlp.fc1.bias has (1536,), but layers.2.blocks.16.mlp.fc1.bias has [1536]
layers.2.blocks.16.mlp.fc2.weight has (1536, 384), but layers.2.blocks.16.mlp.fc2.weight has [1536, 384]
layers.2.blocks.16.mlp.fc2.bias has (384,), but layers.2.blocks.16.mlp.fc2.bias has [384]
layers.2.blocks.17.norm1.weight has (384,), but layers.2.blocks.17.norm1.weight has [384]
layers.2.blocks.17.norm1.bias has (384,), but layers.2.blocks.17.norm1.bias has [384]
layers.2.blocks.17.attn.qkv.weight has (384, 1152), but layers.2.blocks.17.attn.qkv.weight has [384, 1152]
layers.2.blocks.17.attn.qkv.bias has (1152,), but layers.2.blocks.17.attn.qkv.bias has [1152]
layers.2.blocks.17.attn.proj.weight has (384, 384), but layers.2.blocks.17.attn.proj.weight has [384, 384]
layers.2.blocks.17.attn.proj.bias has (384,), but layers.2.blocks.17.attn.proj.bias has [384]
layers.2.blocks.17.norm2.weight has (384,), but layers.2.blocks.17.norm2.weight has [384]
layers.2.blocks.17.norm2.bias has (384,), but layers.2.blocks.17.norm2.bias has [384]
layers.2.blocks.17.mlp.fc1.weight has (384, 1536), but layers.2.blocks.17.mlp.fc1.weight has [384, 1536]
layers.2.blocks.17.mlp.fc1.bias has (1536,), but layers.2.blocks.17.mlp.fc1.bias has [1536]
layers.2.blocks.17.mlp.fc2.weight has (1536, 384), but layers.2.blocks.17.mlp.fc2.weight has [1536, 384]
layers.2.blocks.17.mlp.fc2.bias has (384,), but layers.2.blocks.17.mlp.fc2.bias has [384]
layers.2.downsample.norm.weight has (1536,), but layers.2.downsample.norm.weight has [1536]
layers.2.downsample.norm.bias has (1536,), but layers.2.downsample.norm.bias has [1536]
layers.3.blocks.0.norm1.weight has (768,), but layers.3.blocks.0.norm1.weight has [768]
layers.3.blocks.0.norm1.bias has (768,), but layers.3.blocks.0.norm1.bias has [768]
layers.3.blocks.0.attn.qkv.weight has (768, 2304), but layers.3.blocks.0.attn.qkv.weight has [768, 2304]
layers.3.blocks.0.attn.qkv.bias has (2304,), but layers.3.blocks.0.attn.qkv.bias has [2304]
layers.3.blocks.0.attn.proj.weight has (768, 768), but layers.3.blocks.0.attn.proj.weight has [768, 768]
layers.3.blocks.0.attn.proj.bias has (768,), but layers.3.blocks.0.attn.proj.bias has [768]
layers.3.blocks.0.norm2.weight has (768,), but layers.3.blocks.0.norm2.weight has [768]
layers.3.blocks.0.norm2.bias has (768,), but layers.3.blocks.0.norm2.bias has [768]
layers.3.blocks.0.mlp.fc1.weight has (768, 3072), but layers.3.blocks.0.mlp.fc1.weight has [768, 3072]
layers.3.blocks.0.mlp.fc1.bias has (3072,), but layers.3.blocks.0.mlp.fc1.bias has [3072]
layers.3.blocks.0.mlp.fc2.weight has (3072, 768), but layers.3.blocks.0.mlp.fc2.weight has [3072, 768]
layers.3.blocks.0.mlp.fc2.bias has (768,), but layers.3.blocks.0.mlp.fc2.bias has [768]
layers.3.blocks.1.norm1.weight has (768,), but layers.3.blocks.1.norm1.weight has [768]
layers.3.blocks.1.norm1.bias has (768,), but layers.3.blocks.1.norm1.bias has [768]
layers.3.blocks.1.attn.qkv.weight has (768, 2304), but layers.3.blocks.1.attn.qkv.weight has [768, 2304]
layers.3.blocks.1.attn.qkv.bias has (2304,), but layers.3.blocks.1.attn.qkv.bias has [2304]
layers.3.blocks.1.attn.proj.weight has (768, 768), but layers.3.blocks.1.attn.proj.weight has [768, 768]
layers.3.blocks.1.attn.proj.bias has (768,), but layers.3.blocks.1.attn.proj.bias has [768]
layers.3.blocks.1.norm2.weight has (768,), but layers.3.blocks.1.norm2.weight has [768]
layers.3.blocks.1.norm2.bias has (768,), but layers.3.blocks.1.norm2.bias has [768]
layers.3.blocks.1.mlp.fc1.weight has (768, 3072), but layers.3.blocks.1.mlp.fc1.weight has [768, 3072]
layers.3.blocks.1.mlp.fc1.bias has (3072,), but layers.3.blocks.1.mlp.fc1.bias has [3072]
layers.3.blocks.1.mlp.fc2.weight has (3072, 768), but layers.3.blocks.1.mlp.fc2.weight has [3072, 768]
layers.3.blocks.1.mlp.fc2.bias has (768,), but layers.3.blocks.1.mlp.fc2.bias has [768]
layers.0.blocks.0.attn.relative_position_index has (49, 49), but layers.0.blocks.0.attn.relative_position_index has [49, 49]
layers.0.blocks.1.attn.relative_position_index has (49, 49), but layers.0.blocks.1.attn.relative_position_index has [49, 49]
layers.1.blocks.0.attn.relative_position_index has (49, 49), but layers.1.blocks.0.attn.relative_position_index has [49, 49]
layers.1.blocks.1.attn.relative_position_index has (49, 49), but layers.1.blocks.1.attn.relative_position_index has [49, 49]
layers.2.blocks.0.attn.relative_position_index has (49, 49), but layers.2.blocks.0.attn.relative_position_index has [49, 49]
layers.2.blocks.1.attn.relative_position_index has (49, 49), but layers.2.blocks.1.attn.relative_position_index has [49, 49]
layers.2.blocks.2.attn.relative_position_index has (49, 49), but layers.2.blocks.2.attn.relative_position_index has [49, 49]
layers.2.blocks.3.attn.relative_position_index has (49, 49), but layers.2.blocks.3.attn.relative_position_index has [49, 49]
layers.2.blocks.4.attn.relative_position_index has (49, 49), but layers.2.blocks.4.attn.relative_position_index has [49, 49]
layers.2.blocks.5.attn.relative_position_index has (49, 49), but layers.2.blocks.5.attn.relative_position_index has [49, 49]
layers.2.blocks.6.attn.relative_position_index has (49, 49), but layers.2.blocks.6.attn.relative_position_index has [49, 49]
layers.2.blocks.7.attn.relative_position_index has (49, 49), but layers.2.blocks.7.attn.relative_position_index has [49, 49]
layers.2.blocks.8.attn.relative_position_index has (49, 49), but layers.2.blocks.8.attn.relative_position_index has [49, 49]
layers.2.blocks.9.attn.relative_position_index has (49, 49), but layers.2.blocks.9.attn.relative_position_index has [49, 49]
layers.2.blocks.10.attn.relative_position_index has (49, 49), but layers.2.blocks.10.attn.relative_position_index has [49, 49]
layers.2.blocks.11.attn.relative_position_index has (49, 49), but layers.2.blocks.11.attn.relative_position_index has [49, 49]
layers.2.blocks.12.attn.relative_position_index has (49, 49), but layers.2.blocks.12.attn.relative_position_index has [49, 49]
layers.2.blocks.13.attn.relative_position_index has (49, 49), but layers.2.blocks.13.attn.relative_position_index has [49, 49]
layers.2.blocks.14.attn.relative_position_index has (49, 49), but layers.2.blocks.14.attn.relative_position_index has [49, 49]
layers.2.blocks.15.attn.relative_position_index has (49, 49), but layers.2.blocks.15.attn.relative_position_index has [49, 49]
layers.2.blocks.16.attn.relative_position_index has (49, 49), but layers.2.blocks.16.attn.relative_position_index has [49, 49]
layers.2.blocks.17.attn.relative_position_index has (49, 49), but layers.2.blocks.17.attn.relative_position_index has [49, 49]
layers.3.blocks.0.attn.relative_position_index has (49, 49), but layers.3.blocks.0.attn.relative_position_index has [49, 49]
layers.3.blocks.1.attn.relative_position_index has (49, 49), but layers.3.blocks.1.attn.relative_position_index has [49, 49]
layers.0.blocks.0.attn.relative_position_bias_table has (169, 3), but layers.0.blocks.0.attn.relative_position_bias_table has [169, 3]
layers.0.blocks.1.attn.relative_position_bias_table has (169, 3), but layers.0.blocks.1.attn.relative_position_bias_table has [169, 3]
layers.1.blocks.0.attn.relative_position_bias_table has (169, 6), but layers.1.blocks.0.attn.relative_position_bias_table has [169, 6]
layers.1.blocks.1.attn.relative_position_bias_table has (169, 6), but layers.1.blocks.1.attn.relative_position_bias_table has [169, 6]
layers.2.blocks.0.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.0.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.1.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.1.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.2.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.2.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.3.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.3.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.4.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.4.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.5.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.5.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.6.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.6.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.7.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.7.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.8.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.8.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.9.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.9.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.10.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.10.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.11.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.11.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.12.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.12.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.13.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.13.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.14.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.14.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.15.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.15.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.16.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.16.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.17.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.17.attn.relative_position_bias_table has [169, 12]
layers.3.blocks.0.attn.relative_position_bias_table has (169, 24), but layers.3.blocks.0.attn.relative_position_bias_table has [169, 24]
layers.3.blocks.1.attn.relative_position_bias_table has (169, 24), but layers.3.blocks.1.attn.relative_position_bias_table has [169, 24]
layers.0.downsample.reduction.weight has (384, 192), but layers.0.downsample.reduction.weight has [384, 192]
layers.1.downsample.reduction.weight has (768, 384), but layers.1.downsample.reduction.weight has [768, 384]
layers.2.downsample.reduction.weight has (1536, 768), but layers.2.downsample.reduction.weight has [1536, 768]
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
[07/30 13:37:38 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690695480 (unix time) try "date -d @1690695480" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x52b7) received by PID 21222 (TID 0x7f4f72993240) from PID 21175 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0730 13:46:32.542202 33134 tcp_utils.cc:130] Successfully connected to 172.17.0.7:44002
W0730 13:46:34.714367 33134 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:46:34.715090 33134 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[07/30 13:46:36 ufo]: Rank of current process: 0. World size: 1
[07/30 13:46:38 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:46:38 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:46:38 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:46:38 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fe90f0a71f0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.25s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:46:42 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:46:42 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 3500, 'max_to_keep': 15}, 'eval_period': 3500, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fe910225f70>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fe910207820>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fe91020b280>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fe90fe86820>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fe90fe868b0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fe90fe8a430>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fe90fe8a3a0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fe9102078b0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fe910207820>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fe91020b280>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fe90fe7eaf0>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fe910409d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fe90fe8a430>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fe90fe8a3a0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fe9f9b6a670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fe9f9b6a5e0>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[07/30 13:46:54 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   unsqueeze_ad_func(paddle::experimental::Tensor const&, paddle::experimental::IntArrayBase<paddle::experimental::Tensor>)
1   paddle::experimental::unsqueeze_intermediate(paddle::experimental::Tensor const&, paddle::experimental::IntArrayBase<paddle::experimental::Tensor> const&)
2   paddle::experimental::PrepareData(paddle::experimental::Tensor const&, phi::TensorArgDef const&, paddle::experimental::TransformFlag const&)
3   paddle::experimental::TransformData(phi::DenseTensor*, phi::TensorArgDef const&, paddle::experimental::TransformFlag const&)
4   paddle::experimental::TransDataPlace(phi::DenseTensor const&, phi::Place)
5   paddle::framework::TensorCopySync(phi::DenseTensor const&, phi::Place const&, phi::DenseTensor*)
6   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
7   void paddle::memory::Copy<phi::GPUPlace, phi::GPUPinnedPlace>(phi::GPUPlace, void*, phi::GPUPinnedPlace, void const*, unsigned long, void*)
8   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690696687 (unix time) try "date -d @1690696687" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x8139) received by PID 33134 (TID 0x7fea804a6240) from PID 33081 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0730 13:58:38.065228 49542 tcp_utils.cc:107] Retry to connect to 172.17.0.7:41342 while the server is not yet listening.
I0730 13:58:41.065661 49542 tcp_utils.cc:130] Successfully connected to 172.17.0.7:41342
W0730 13:58:42.640609 49542 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:58:42.641417 49542 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[07/30 13:58:45 ufo]: Rank of current process: 0. World size: 1
[07/30 13:58:47 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:58:47 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:58:47 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:58:48 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f8f5ced6250>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.25s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:58:55 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:58:55 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 3500, 'max_to_keep': 15}, 'eval_period': 3500, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f8f5e0d1040>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f8f5e0dc8b0>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f8f5e0e2310>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f8f5dd598b0>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f8f5dd59940>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f8f5dd5c4c0>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f8f5dd5c430>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f8f5e0dc940>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f8f5e0dc8b0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f8f5e0e2310>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f8f5dd52b80>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f8f5e2ddd30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f8f5dd5c4c0>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f8f5dd5c430>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f90438d7670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f90438d75e0>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[07/30 13:59:03 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691068248 (unix time) try "date -d @1691068248" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0xc14b) received by PID 49542 (TID 0x7f90ce24f240) from PID 49483 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0803 21:11:27.253055 176364 tcp_utils.cc:107] Retry to connect to 172.17.0.7:55911 while the server is not yet listening.
I0803 21:11:30.253394 176364 tcp_utils.cc:130] Successfully connected to 172.17.0.7:55911
W0803 21:11:33.085129 176364 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0803 21:11:33.086285 176364 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/03 21:11:35 ufo]: Rank of current process: 0. World size: 1
[08/03 21:11:37 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/03 21:11:37 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/03 21:11:38 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/03 21:11:38 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fe19b2e2250>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.30s)
creating index...
index created!
COCODataSet has 6103 samples
[08/03 21:11:42 ufo]: Autoscale fgvc number of classes: 196
[08/03 21:11:42 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fe19c4b20d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fe19c4bf940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fe19c4c43a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fe19c13b940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fe19c13b9d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fe19c13f550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fe19c13f4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fe19c4bf9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fe19c4bf940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fe19c4c43a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fe19c134c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fe19c6bfdc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fe19c13f550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fe19c13f4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fe283357700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fe283357670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/03 21:11:53 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0804 18:53:59.201292 313828 tcp_utils.cc:130] Successfully connected to 172.17.0.7:39419
W0804 18:54:01.489545 313828 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 18:54:01.490388 313828 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/04 18:54:03 ufo]: Rank of current process: 0. World size: 1
[08/04 18:54:06 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 18:54:06 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_2.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 18:54:06 ufo]: Contents of args.config_file=configs/swin_small_230730_2.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m
[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0185499.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_2[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 18:54:06 ufo]: Full config saved to outputs/swinbase_joint_training_230730_2/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fcd5f79f1f0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.28s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 18:54:12 ufo]: Autoscale fgvc number of classes: 196
[08/04 18:54:12 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_2', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0185499.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fcd608610d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fcd6086d940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fcd608723a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fcd604e9940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fcd604e99d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fcd604ed550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fcd604ed4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fcd6086d9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fcd6086d940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fcd608723a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fcd604e1c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fcd60a6cdc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fcd604ed550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fcd604ed4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fce49503700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fce49503670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 18:54:19 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691146614 (unix time) try "date -d @1691146614" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x4c9c2) received by PID 313828 (TID 0x7fcecfe3f240) from PID 313794 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0804 18:58:44.787549 321962 tcp_utils.cc:107] Retry to connect to 172.17.0.7:38485 while the server is not yet listening.
I0804 18:58:47.787842 321962 tcp_utils.cc:130] Successfully connected to 172.17.0.7:38485
W0804 18:58:49.320096 321962 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 18:58:49.320833 321962 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/04 18:58:51 ufo]: Rank of current process: 0. World size: 1
[08/04 18:58:52 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 18:58:52 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_2.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 18:58:52 ufo]: Contents of args.config_file=configs/swin_small_230730_2.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0185499.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_2[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 18:58:52 ufo]: Full config saved to outputs/swinbase_joint_training_230730_2/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7feb4301b190>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.18s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 18:58:56 ufo]: Autoscale fgvc number of classes: 196
[08/04 18:58:56 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_2', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0185499.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7feb442110d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7feb4421e940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7feb442223a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7feb43e99940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7feb43e999d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7feb43e9d550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7feb43e9d4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7feb4421e9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7feb4421e940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7feb442223a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7feb43e92c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7feb4441cdc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7feb43e9d550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7feb43e9d4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fec3080f700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fec3080f670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 18:59:05 ufo]: Optim:
Weight Decay, params: 
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1044, in load
    load_result = pickle.load(f, encoding='latin1')
_pickle.UnpicklingError: pickle data was truncated

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1076, in load
    tensor, _ = _load_selected_rows(path)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 610, in _load_selected_rows
    _seek = core.load_selected_rows(temp_sr, file_name)
ValueError: (InvalidArgument) Only version 0 SelectedRows is supported.
  [Hint: Expected version == 0U, but received version:3532981376 != 0U:0.] (at /paddle/paddle/phi/core/serialization.cc:163)


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1080, in load
    tensor, _ = _load_lod_tensor(path)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 567, in _load_lod_tensor
    _seek = paddle.fluid.core.load_lod_tensor(temp_t, file_name)
ValueError: (InvalidArgument) Deserialize to tensor failed, maybe the loaded file is not a paddle model(expected file format: 0, but 3532981376 found).
  [Hint: Expected version == 0U, but received version:3532981376 != 0U:0.] (at /paddle/paddle/phi/core/serialization.cc:106)


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1091, in load
    program = Program.parse_from_string(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/framework.py", line 6301, in parse_from_string
    p.desc = core.ProgramDesc(binary_str)
ValueError: (InvalidArgument) Failed to parse program_desc from binary string.
  [Hint: Expected desc_.ParseFromString(binary_str) == true, but received desc_.ParseFromString(binary_str):0 != true:1.] (at /paddle/paddle/fluid/framework/program_desc.cc:143)


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 154, in do_train
    checkpointer.resume_or_load(cfg.train.init_checkpoint, resume=args.resume)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 211, in resume_or_load
    return self.load(path, checkpointables=[])
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 121, in load
    checkpoint = self._load_file(path)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 236, in _load_file
    return paddle.load(f)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1096, in load
    raise ValueError(
ValueError: `paddle.load` can not parse the file:/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0185499.pdmodel.
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0804 19:00:11.099977 328814 tcp_utils.cc:107] Retry to connect to 172.17.0.7:59932 while the server is not yet listening.
I0804 19:00:14.100260 328814 tcp_utils.cc:130] Successfully connected to 172.17.0.7:59932
W0804 19:00:16.148118 328814 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:00:16.149302 328814 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/04 19:00:17 ufo]: Rank of current process: 0. World size: 1
[08/04 19:00:20 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:00:20 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_2.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:00:20 ufo]: Contents of args.config_file=configs/swin_small_230730_2.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0185499.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_2[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:00:20 ufo]: Full config saved to outputs/swinbase_joint_training_230730_2/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f85cf272220>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.21s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:00:25 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:00:25 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_2', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0185499.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f85d03b60d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f85d03c4940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f85d03c93a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f85d003e940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f85d003e9d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f85d0043550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f85d00434c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f85d03c49d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f85d03c4940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f85d03c93a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f85d0037c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f85d05c2dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f85d0043550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f85d00434c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f86b6905700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f86b6905670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:00:33 ufo]: Optim:
Weight Decay, params: 
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1044, in load
    load_result = pickle.load(f, encoding='latin1')
_pickle.UnpicklingError: pickle data was truncated

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1076, in load
    tensor, _ = _load_selected_rows(path)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 610, in _load_selected_rows
    _seek = core.load_selected_rows(temp_sr, file_name)
ValueError: (InvalidArgument) Only version 0 SelectedRows is supported.
  [Hint: Expected version == 0U, but received version:3532981376 != 0U:0.] (at /paddle/paddle/phi/core/serialization.cc:163)


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1080, in load
    tensor, _ = _load_lod_tensor(path)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 567, in _load_lod_tensor
    _seek = paddle.fluid.core.load_lod_tensor(temp_t, file_name)
ValueError: (InvalidArgument) Deserialize to tensor failed, maybe the loaded file is not a paddle model(expected file format: 0, but 3532981376 found).
  [Hint: Expected version == 0U, but received version:3532981376 != 0U:0.] (at /paddle/paddle/phi/core/serialization.cc:106)


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1091, in load
    program = Program.parse_from_string(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/framework.py", line 6301, in parse_from_string
    p.desc = core.ProgramDesc(binary_str)
ValueError: (InvalidArgument) Failed to parse program_desc from binary string.
  [Hint: Expected desc_.ParseFromString(binary_str) == true, but received desc_.ParseFromString(binary_str):0 != true:1.] (at /paddle/paddle/fluid/framework/program_desc.cc:143)


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 154, in do_train
    checkpointer.resume_or_load(cfg.train.init_checkpoint, resume=args.resume)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 211, in resume_or_load
    return self.load(path, checkpointables=[])
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 121, in load
    checkpoint = self._load_file(path)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 236, in _load_file
    return paddle.load(f)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1096, in load
    raise ValueError(
ValueError: `paddle.load` can not parse the file:/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0185499.pdmodel.
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0804 19:01:34.070573 335619 tcp_utils.cc:130] Successfully connected to 172.17.0.7:62141
W0804 19:01:38.493103 335619 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:01:38.493921 335619 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/04 19:01:40 ufo]: Rank of current process: 0. World size: 1
[08/04 19:01:43 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:01:43 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_2.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:01:43 ufo]: Contents of args.config_file=configs/swin_small_230730_2.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_2[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:01:43 ufo]: Full config saved to outputs/swinbase_joint_training_230730_2/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f5385f95250>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.25s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:01:48 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:01:48 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_2', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f538719b0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f53871a8940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f53871ac3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f5386e23940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f5386e239d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f5386e27550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f5386e274c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f53871a89d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f53871a8940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f53871ac3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f5386e1cc10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f53873a6dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f5386e27550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f5386e274c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f5470ea9700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f5470ea9670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:01:56 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691147073 (unix time) try "date -d @1691147073" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x51ede) received by PID 335619 (TID 0x7f54f77e5240) from PID 335582 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0804 19:07:59.464557 344233 tcp_utils.cc:107] Retry to connect to 172.17.0.7:60447 while the server is not yet listening.
I0804 19:08:02.464821 344233 tcp_utils.cc:130] Successfully connected to 172.17.0.7:60447
W0804 19:08:04.262665 344233 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:08:04.263455 344233 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/04 19:08:06 ufo]: Rank of current process: 0. World size: 1
[08/04 19:08:09 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:08:09 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:08:09 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:08:09 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f1f3bc7f1f0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.23s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:08:14 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:08:14 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f1f4810b0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f1f48118940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f1f4811d3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f1f3cade940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f1f3cade9d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f1f3cae2550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f1f3cae24c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f1f481189d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f1f48118940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f1f4811d3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f1f3cad6c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f1f48317dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f1f3cae2550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f1f3cae24c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f2022677700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f2022677670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:08:23 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691147453 (unix time) try "date -d @1691147453" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x54085) received by PID 344233 (TID 0x7f20acfc4240) from PID 344197 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0804 19:14:09.078430 352766 tcp_utils.cc:107] Retry to connect to 172.17.0.7:39745 while the server is not yet listening.
I0804 19:14:12.078788 352766 tcp_utils.cc:130] Successfully connected to 172.17.0.7:39745
W0804 19:14:14.184798 352766 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:14:14.185647 352766 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/04 19:14:15 ufo]: Rank of current process: 0. World size: 1
[08/04 19:14:18 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:14:18 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:14:18 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_2[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:14:18 ufo]: Full config saved to outputs/swinbase_joint_training_230730_2/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f02d08462e0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.22s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:14:23 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:14:23 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_2', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f02dccfa0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f02dcd07940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f02dcd0c3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f02dc983940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f02dc9839d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f02dc987550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f02dc9874c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f02dcd079d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f02dcd07940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f02dcd0c3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f02dc97bc10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f02dcf06dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f02dc987550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f02dc9874c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f03b7557700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f03b7557670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:14:31 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691147819 (unix time) try "date -d @1691147819" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x561d9) received by PID 352766 (TID 0x7f0441ecd240) from PID 352729 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0804 19:17:29.502378 360271 tcp_utils.cc:107] Retry to connect to 172.17.0.7:47888 while the server is not yet listening.
I0804 19:17:32.502679 360271 tcp_utils.cc:130] Successfully connected to 172.17.0.7:47888
W0804 19:17:34.448804 360271 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:17:34.449576 360271 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/04 19:17:36 ufo]: Rank of current process: 0. World size: 1
[08/04 19:17:39 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:17:39 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:17:39 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:17:39 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f8719083340>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.23s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:17:44 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:17:44 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f871a2900d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f871a29e940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f871a2a23a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f8719f19940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f8719f199d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f8719f1d550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f8719f1d4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f871a29e9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f871a29e940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f871a2a23a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f8719f11c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f871a49cdc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f8719f1d550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f8719f1d4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f87ffee8700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f87ffee8670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:17:52 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
No stack trace in paddle, may be caused by external reasons.

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691147882 (unix time) try "date -d @1691147882" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x57f2a) received by PID 360271 (TID 0x7f888aa42240) from PID 360234 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0804 19:21:35.245324 368303 tcp_utils.cc:130] Successfully connected to 172.17.0.7:58715
W0804 19:21:39.787184 368303 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:21:39.788048 368303 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/04 19:21:41 ufo]: Rank of current process: 0. World size: 1
[08/04 19:21:44 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:21:44 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:21:44 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:21:45 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f6520ff2340>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.22s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:21:49 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:21:49 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f65221ea0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f65221f7940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f65221fb3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f6521e72940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f6521e729d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f6521e76550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f6521e764c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f65221f79d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f65221f7940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f65221fb3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f6521e6ac10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f65223f5dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f6521e76550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f6521e764c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f66073d7700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f66073d7670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:21:58 ufo]: Optim:
Weight Decay, params: 
Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 154, in do_train
    checkpointer.resume_or_load(cfg.train.init_checkpoint, resume=args.resume)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 209, in resume_or_load
    return self.load(path)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 119, in load
    assert os.path.isfile(path), "Checkpoint {} not found!".format(path)
AssertionError: Checkpoint outputs/swinbase_joint_training_230730_1/model_final.pdmodel not found!
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0804 19:25:11.733867 375835 tcp_utils.cc:130] Successfully connected to 172.17.0.7:35180
W0804 19:25:16.993350 375835 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:25:16.994189 375835 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/04 19:25:18 ufo]: Rank of current process: 0. World size: 1
[08/04 19:25:21 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:25:21 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:25:21 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:25:21 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f59c01bb250>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.25s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:25:26 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:25:26 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f59cc5830d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f59cc590940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f59cc5963a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f59cc20b940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f59cc20b9d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f59cc210550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f59cc2104c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f59cc5909d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f59cc590940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f59cc5963a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f59cc204c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f59cc78fdc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f59cc210550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f59cc2104c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f5aa94c4700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f5aa94c4670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:25:35 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []
ERROR: Unexpected BUS error encountered in DataLoader worker. This might be caused by insufficient shared memory (shm), please check whether use_shared_memory is set and storage space in /dev/shm is enough
 Exception during training:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 143, in forward
    task_outputs = self.heads[self.task2head_mapping[task_name]]([feats], batched_inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/detr.py", line 47, in forward
    out_transformer = self.transformer(body_feats, pad_mask, inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 544, in forward
    inter_feats, inter_ref_bboxes_unact = self.decoder(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 283, in forward
    output = layer(output, reference_points_input, memory,
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 228, in forward
    tgt2 = self.cross_attn(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/deformable_transformer.py", line 128, in forward
    value = value.reshape([bs, Len_v, self.num_heads, self.head_dim])
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/tensor/manipulation.py", line 3543, in reshape
    out = _C_ops.reshape(x, shape)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/multiprocess_utils.py", line 135, in __handler__
    core._throw_error_if_process_failed()
SystemError: (Fatal) DataLoader process (pid   1. If run DataLoader by DataLoader.from_generator(...), queue capacity is set by from_generator(..., capacity=xx, ...).
  2. If run DataLoader by DataLoader(dataset, ...), queue capacity is set as 2 times of the max value of num_workers and len(places).
  3. If run by DataLoader(dataset, ..., use_shared_memory=True), set use_shared_memory=False for not using shared memory.) exited is killed by signal: 378611.
  It may be caused by insufficient shared storage space. This problem usually occurs when using docker as a development environment.
  Please use command `df -h` to check the storage space of `/dev/shm`. Shared storage space needs to be greater than (DataLoader Num * DataLoader queue capacity * 1 batch data size).
  You can solve this problem by increasing the shared storage space or reducing the queue capacity appropriately.
Bus error (at /paddle/paddle/fluid/imperative/data_loader.cc:183)

Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 162, in do_train
    trainer.train(start_iter, cfg.train.max_iter)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 143, in forward
    task_outputs = self.heads[self.task2head_mapping[task_name]]([feats], batched_inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/detr.py", line 47, in forward
    out_transformer = self.transformer(body_feats, pad_mask, inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 544, in forward
    inter_feats, inter_ref_bboxes_unact = self.decoder(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 283, in forward
    output = layer(output, reference_points_input, memory,
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 228, in forward
    tgt2 = self.cross_attn(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/deformable_transformer.py", line 128, in forward
    value = value.reshape([bs, Len_v, self.num_heads, self.head_dim])
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/tensor/manipulation.py", line 3543, in reshape
    out = _C_ops.reshape(x, shape)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/multiprocess_utils.py", line 135, in __handler__
    core._throw_error_if_process_failed()
SystemError: (Fatal) DataLoader process (pid   1. If run DataLoader by DataLoader.from_generator(...), queue capacity is set by from_generator(..., capacity=xx, ...).
  2. If run DataLoader by DataLoader(dataset, ...), queue capacity is set as 2 times of the max value of num_workers and len(places).
  3. If run by DataLoader(dataset, ..., use_shared_memory=True), set use_shared_memory=False for not using shared memory.) exited is killed by signal: 378611.
  It may be caused by insufficient shared storage space. This problem usually occurs when using docker as a development environment.
  Please use command `df -h` to check the storage space of `/dev/shm`. Shared storage space needs to be greater than (DataLoader Num * DataLoader queue capacity * 1 batch data size).
  You can solve this problem by increasing the shared storage space or reducing the queue capacity appropriately.
Bus error (at /paddle/paddle/fluid/imperative/data_loader.cc:183)

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0804 19:28:15.185914 383252 tcp_utils.cc:130] Successfully connected to 172.17.0.7:63034
W0804 19:28:17.442868 383252 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:28:17.443686 383252 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/04 19:28:19 ufo]: Rank of current process: 0. World size: 1
[08/04 19:28:21 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:28:21 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:28:22 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:28:22 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f578d71d220>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.20s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:28:28 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:28:28 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f578e8390d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f578e847940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f578e84b3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f578e4c1940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f578e4c19d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f578e4c6550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f578e4c64c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f578e8479d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f578e847940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f578e84b3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f578e4bac10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f578ea45dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f578e4c6550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f578e4c64c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f5872bdb700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f5872bdb670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:28:35 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []
ERROR: Unexpected BUS error encountered in DataLoader worker. This might be caused by insufficient shared memory (shm), please check whether use_shared_memory is set and storage space in /dev/shm is enough
 

--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691148636 (unix time) try "date -d @1691148636" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x5d8f0) received by PID 383252 (TID 0x7f58fd524240) from PID 383216 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0804 19:32:59.812741  1538 tcp_utils.cc:130] Successfully connected to 172.17.0.5:61240
W0804 19:33:01.432533  1538 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:33:01.433313  1538 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/04 19:33:03 ufo]: Rank of current process: 0. World size: 1
[08/04 19:33:06 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:33:06 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:33:06 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:33:06 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f902058b250>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.22s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:33:11 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:33:11 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f902ca440d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f902ca50940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f902ca563a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f902c6cd940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f902c6cd9d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f902c6d1550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f902c6d14c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f902ca509d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f902ca50940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f902ca563a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f902c6c5c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f902cc50dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f902c6d1550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f902c6d14c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f9106784700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f9106784670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:33:20 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::distributed::ProcessGroupNCCL::NCCLTask::Wait(std::chrono::duration<long, std::ratio<1l, 1000l> >)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691165889 (unix time) try "date -d @1691165889" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x5dd) received by PID 1538 (TID 0x7f91910ce240) from PID 1501 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 4
I0805 00:45:59.483047 73376 tcp_utils.cc:107] Retry to connect to 172.17.0.5:57537 while the server is not yet listening.
I0805 00:46:02.483472 73376 tcp_utils.cc:130] Successfully connected to 172.17.0.5:57537
W0805 00:46:04.468847 73376 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0805 00:46:04.469678 73376 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/05 00:46:06 ufo]: Rank of current process: 0. World size: 1
[08/05 00:46:09 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/05 00:46:09 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/05 00:46:09 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/05 00:46:09 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fe3eecde250>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.24s)
creating index...
index created!
COCODataSet has 6103 samples
[08/05 00:46:15 ufo]: Autoscale fgvc number of classes: 196
[08/05 00:46:15 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fe3efddd0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fe3efdeb940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fe3efdee3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fe3efa65940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fe3efa659d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fe3efa69550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fe3efa694c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fe3efdeb9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fe3efdeb940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fe3efdee3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fe3efa5ec10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fe3effe8dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fe3efa69550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fe3efa694c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fe4d5fa9700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fe4d5fa9670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/05 00:46:23 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []
  File "tools/ufo_test.py", line 39
    from evaluation.seg_evaluator import seg_inference_on_dataset, seg_inference_on_test_dataset, 
                                         ^
SyntaxError: trailing comma not allowed without surrounding parentheses
/root/autodl-tmp/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
Traceback (most recent call last):
  File "tools/ufo_test.py", line 38, in <module>
    from evaluation.evaluator import inference_on_dataset, inference_on_cls_dataset
  File "/root/autodl-tmp/PAZHOU/base/./evaluation/evaluator.py", line 12, in <module>
    from ensemble_boxes import weighted_boxes_fusion, nms
ModuleNotFoundError: No module named 'ensemble_boxes'
/root/autodl-tmp/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 3
I0809 23:33:22.720073  1649 tcp_utils.cc:130] Successfully connected to 172.17.0.3:47889
W0809 23:33:27.394999  1649 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0809 23:33:27.395864  1649 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/09 23:33:29 ufo]: Rank of current process: 0. World size: 1
[08/09 23:33:31 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2               NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/09 23:33:31 ufo]: Command line arguments: Namespace(config_file='configs/test_swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/09 23:33:31 ufo]: Contents of args.config_file=configs/test_swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeByShort[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluatorInfer[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_test_set[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTaskInfer[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTaskInfer[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mInferDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/test_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtest[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m3[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m3[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCInferDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/test_data/cls/test/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# infer mode[39m
[38;5;15m                    [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m3[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m3[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCOInferDataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;242m# dict(MultiscaleTestResize=dict([39m
[38;5;15m                        [39m[38;5;242m#     origin_target_size=[2048, 2048],[39m
[38;5;15m                        [39m[38;5;242m#     target_size=[1024, 1024],[39m
[38;5;15m                        [39m[38;5;242m#     use_flip=True[39m
[38;5;15m                        [39m[38;5;242m# )),[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtest.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# 可以采用验证集或训练集json,只是为了获取类别ID映射关系[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/test_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mim_id[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mim_file[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m3[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m3[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mevaluator[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m[38;5;242m# segmentation[39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSegEvaluatorInfer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# infer mode[39m

[38;5;15m    [39m[38;5;242m# classification[39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCommonClasEvaluatorSingleTaskInfer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m   [39m[38;5;242m# infer mode[39m

[38;5;15m    [39m[38;5;242m# detection[39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCocoDetEvaluatorSingleTaskInfer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mclasswise[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15moutput_eval[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m[38;5;15m     [39m
[38;5;15m        [39m[38;5;15mbias[39m[38;5;197m=[39m[38;5;141m0[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mIouType[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15msave_prediction_only[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mparallel_evaluator[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mnum_valid_samples[39m[38;5;197m=[39m[38;5;141m3067[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# infer mode[39m

[38;5;15m][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m

[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_tiny_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186maveraged_model_weights_fade_aug.pdparams[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/test_swin_small_230730_1[39m[38;5;186m'[39m

[08/09 23:33:31 ufo]: Full config saved to outputs/test_swin_small_230730_1/config.yaml
missing keys: []
unexpected keys: []
InferDataset has 1000 samples
InferDataset has 1002 samples after padding
rank 2 has 334 items
loading annotations into memory...
Done (t=0.02s)
creating index...
index created!
COCOInferDataSet has 3067 samples
COCOInferDataSet has 3069 samples after padding
rank 2 has 1023 items
========== InferDataset ==========
seg_inference_on_test_dataset
  0%|          | 0/334 [00:00<?, ?it/s]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
  2%|▏         | 6/334 [00:11<10:12,  1.87s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
  4%|▍         | 13/334 [00:21<08:41,  1.62s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
  6%|▌         | 20/334 [00:31<08:08,  1.56s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
  8%|▊         | 27/334 [00:42<07:47,  1.52s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 10%|█         | 34/334 [00:52<07:30,  1.50s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 12%|█▏        | 41/334 [01:02<07:17,  1.49s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 14%|█▍        | 48/334 [01:13<07:03,  1.48s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 16%|█▋        | 55/334 [01:23<06:53,  1.48s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 19%|█▊        | 62/334 [01:33<06:41,  1.48s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 21%|██        | 69/334 [01:44<06:32,  1.48s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 23%|██▎       | 76/334 [01:54<06:20,  1.47s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 25%|██▍       | 83/334 [02:04<06:08,  1.47s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 27%|██▋       | 90/334 [02:14<06:00,  1.48s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 29%|██▉       | 97/334 [02:25<05:48,  1.47s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 31%|███       | 104/334 [02:35<05:37,  1.47s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 33%|███▎      | 111/334 [02:45<05:29,  1.48s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 35%|███▌      | 118/334 [02:56<05:17,  1.47s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 37%|███▋      | 125/334 [03:06<05:06,  1.47s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 40%|███▉      | 132/334 [03:16<04:55,  1.46s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 42%|████▏     | 139/334 [03:26<04:45,  1.46s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 44%|████▎     | 146/334 [03:37<04:38,  1.48s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 46%|████▌     | 153/334 [03:47<04:26,  1.47s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 48%|████▊     | 160/334 [03:57<04:15,  1.47s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 50%|█████     | 167/334 [04:07<04:04,  1.47s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 52%|█████▏    | 174/334 [04:18<03:54,  1.46s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 54%|█████▍    | 181/334 [04:28<03:43,  1.46s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 56%|█████▋    | 188/334 [04:39<03:36,  1.48s/it]!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   softmax_ad_func(paddle::experimental::Tensor const&, int)
1   paddle::experimental::softmax(paddle::experimental::Tensor const&, int)
2   void phi::SoftmaxForwardCUDAKernelDriver<float, false>(phi::GPUContext const&, phi::DenseTensor const&, int, phi::DenseTensor*)
3   void phi::SwitchWarpSoftmaxForward<float, float, false>(int, dim3, phi::GPUContext const&, float*, float const*, int, int, int, int)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691595599 (unix time) try "date -d @1691595599" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x64e) received by PID 1649 (TID 0x7fca2bfdf240) from PID 1614 ***]

/root/autodl-tmp/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 2, world size is 3
I0809 23:41:07.408519  8464 tcp_utils.cc:107] Retry to connect to 172.17.0.3:38396 while the server is not yet listening.
I0809 23:41:10.408723  8464 tcp_utils.cc:130] Successfully connected to 172.17.0.3:38396
W0809 23:41:12.330775  8464 gpu_resources.cc:61] Please NOTE: device: 2, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0809 23:41:12.331552  8464 gpu_resources.cc:91] device: 2, cuDNN Version: 8.9.
[08/09 23:41:13 ufo]: Rank of current process: 0. World size: 1
[08/09 23:41:15 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2               NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/09 23:41:15 ufo]: Command line arguments: Namespace(config_file='configs/test_swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/09 23:41:15 ufo]: Contents of args.config_file=configs/test_swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeByShort[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluatorInfer[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_test_set[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTaskInfer[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTaskInfer[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mInferDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/test_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtest[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m3[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m3[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCInferDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/test_data/cls/test/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# infer mode[39m
[38;5;15m                    [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m3[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m3[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCOInferDataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;242m# dict(MultiscaleTestResize=dict([39m
[38;5;15m                        [39m[38;5;242m#     origin_target_size=[2048, 2048],[39m
[38;5;15m                        [39m[38;5;242m#     target_size=[1024, 1024],[39m
[38;5;15m                        [39m[38;5;242m#     use_flip=True[39m
[38;5;15m                        [39m[38;5;242m# )),[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtest.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# 可以采用验证集或训练集json,只是为了获取类别ID映射关系[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/test_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mim_id[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mim_file[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m3[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m3[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mevaluator[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m[38;5;242m# segmentation[39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSegEvaluatorInfer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# infer mode[39m

[38;5;15m    [39m[38;5;242m# classification[39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCommonClasEvaluatorSingleTaskInfer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m   [39m[38;5;242m# infer mode[39m

[38;5;15m    [39m[38;5;242m# detection[39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCocoDetEvaluatorSingleTaskInfer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mclasswise[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15moutput_eval[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m[38;5;15m     [39m
[38;5;15m        [39m[38;5;15mbias[39m[38;5;197m=[39m[38;5;141m0[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mIouType[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15msave_prediction_only[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mparallel_evaluator[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mnum_valid_samples[39m[38;5;197m=[39m[38;5;141m3067[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# infer mode[39m

[38;5;15m][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m

[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_tiny_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186maveraged_model_weights_fade_aug.pdparams[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/test_swin_small_230730_1[39m[38;5;186m'[39m

[08/09 23:41:15 ufo]: Full config saved to outputs/test_swin_small_230730_1/config.yaml
missing keys: []
unexpected keys: []
InferDataset has 1000 samples
InferDataset has 1002 samples after padding
rank 2 has 334 items
loading annotations into memory...
Done (t=0.02s)
creating index...
index created!
COCOInferDataSet has 3067 samples
COCOInferDataSet has 3069 samples after padding
rank 2 has 1023 items
========== InferDataset ==========
seg_inference_on_test_dataset
  0%|          | 0/334 [00:00<?, ?it/s]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
  1%|          | 4/334 [00:11<15:45,  2.86s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
  3%|▎         | 11/334 [00:21<10:04,  1.87s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
  5%|▌         | 18/334 [00:32<08:46,  1.67s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
  7%|▋         | 25/334 [00:42<08:10,  1.59s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 10%|▉         | 32/334 [00:52<07:44,  1.54s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 12%|█▏        | 39/334 [01:02<07:28,  1.52s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 14%|█▍        | 46/334 [01:13<07:11,  1.50s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 16%|█▌        | 53/334 [01:23<07:00,  1.50s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 18%|█▊        | 60/334 [01:33<06:46,  1.48s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 20%|██        | 67/334 [01:44<06:36,  1.49s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 22%|██▏       | 74/334 [01:54<06:24,  1.48s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 24%|██▍       | 81/334 [02:04<06:12,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 26%|██▋       | 88/334 [02:15<06:04,  1.48s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 28%|██▊       | 95/334 [02:25<05:53,  1.48s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 31%|███       | 102/334 [02:35<05:41,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 33%|███▎      | 109/334 [02:46<05:33,  1.48s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 35%|███▍      | 116/334 [02:56<05:21,  1.48s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 37%|███▋      | 123/334 [03:06<05:10,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 39%|███▉      | 130/334 [03:16<04:59,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 41%|████      | 137/334 [03:27<04:48,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 43%|████▎     | 144/334 [03:37<04:41,  1.48s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 45%|████▌     | 151/334 [03:47<04:29,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 47%|████▋     | 158/334 [03:58<04:18,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 49%|████▉     | 165/334 [04:08<04:08,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 51%|█████▏    | 172/334 [04:18<03:57,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 54%|█████▎    | 179/334 [04:29<03:49,  1.48s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 56%|█████▌    | 186/334 [04:39<03:38,  1.48s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 58%|█████▊    | 193/334 [04:49<03:27,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 60%|█████▉    | 200/334 [05:00<03:17,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 62%|██████▏   | 207/334 [05:10<03:06,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 62%|██████▏   | 207/334 [05:20<03:06,  1.47s/it] 64%|██████▍   | 214/334 [05:20<02:56,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 66%|██████▌   | 221/334 [05:30<02:45,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 68%|██████▊   | 228/334 [05:41<02:37,  1.49s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 70%|███████   | 235/334 [05:51<02:26,  1.48s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 72%|███████▏  | 242/334 [06:02<02:15,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 75%|███████▍  | 249/334 [06:12<02:04,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 77%|███████▋  | 256/334 [06:22<01:54,  1.46s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 79%|███████▊  | 263/334 [06:32<01:43,  1.46s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 81%|████████  | 270/334 [06:42<01:33,  1.46s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 83%|████████▎ | 277/334 [06:53<01:23,  1.46s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 85%|████████▌ | 284/334 [07:03<01:13,  1.46s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 87%|████████▋ | 291/334 [07:14<01:04,  1.49s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 89%|████████▉ | 298/334 [07:24<00:53,  1.48s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 91%|█████████▏| 305/334 [07:34<00:42,  1.48s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 93%|█████████▎| 312/334 [07:44<00:32,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 96%|█████████▌| 319/334 [07:55<00:22,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 98%|█████████▊| 326/334 [08:05<00:11,  1.47s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
100%|█████████▉| 333/334 [08:15<00:01,  1.46s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
100%|██████████| 334/334 [08:17<00:00,  1.49s/it]
========== FGVCInferDataset ==========
scales: [0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]
========== COCOInferDataSet ==========
Traceback (most recent call last):
  File "tools/ufo_test.py", line 111, in <module>
    main(args)
  File "tools/ufo_test.py", line 106, in main
    do_test(cfg, model)
  File "tools/ufo_test.py", line 72, in do_test
    ret = inference_on_dataset(model, dataloader, evaluator)
  File "/root/autodl-tmp/PAZHOU/base/./evaluation/evaluator.py", line 261, in inference_on_dataset
    results = evaluator.evaluate()
  File "/root/autodl-tmp/PAZHOU/base/./evaluation/cocodet_evaluator.py", line 267, in evaluate
    results = comm.gather(self.results)
  File "/root/autodl-tmp/PAZHOU/base/./utils/comm.py", line 121, in gather
    paddle.distributed.all_gather(gathered_value, value, group)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/distributed/collective.py", line 953, in all_gather
    task = group.process_group.all_gather(tensor, out)
ValueError: (InvalidArgument) All inputs should be in CudaPlace.
  [Hint: Expected CheckTensorsInCudaPlace(in_tensors) == true, but received CheckTensorsInCudaPlace(in_tensors):0 != true:1.] (at /paddle/paddle/fluid/distributed/collective/ProcessGroupNCCL.cc:950)

