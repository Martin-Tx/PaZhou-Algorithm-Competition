/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0730 13:04:24.103662  1890 tcp_utils.cc:107] Retry to connect to 172.17.0.7:45882 while the server is not yet listening.
I0730 13:04:27.103914  1890 tcp_utils.cc:130] Successfully connected to 172.17.0.7:45882
W0730 13:04:28.798432  1890 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:04:28.799198  1890 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[07/30 13:04:31 ufo]: Rank of current process: 0. World size: 1
[07/30 13:04:34 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:04:34 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:04:34 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1216[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1248[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1280[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1216[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1248[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1280[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:04:34 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fa4b98d73a0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.22s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:04:38 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:04:39 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fa4baa760d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fa4baa83940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fa4baa883a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fa4ba6fd940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fa4ba6fd9d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280], 'max_size': 1280}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280], 'max_size': 1280}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fa4ba703550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fa4ba7034c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fa4baa839d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fa4baa83940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fa4baa883a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fa4ba6f7c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fa4bac82d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fa4ba703550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fa4ba7034c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fa5a5ba2670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fa5a5ba25e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(512, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(128, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(1024, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(1024, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:04:44 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(512, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(128, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(1024, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(1024, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:04:44 ufo]: Optim:
Weight Decay, params: 
Exception during training:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 114, in forward
    features = self.backbone(self.preprocess_image(batched_inputs))
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/backbones/swin_transformer.py", line 805, in forward
    y = super(SwinTransformer_small_patch4_window7_224_maskformer,
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/backbones/swin_transformer.py", line 682, in forward
    x = self.patch_embed(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/backbones/swin_transformer.py", line 507, in forward
    _, _, H, W = x.shape
AttributeError: 'dict' object has no attribute 'shape'
Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 162, in do_train
    trainer.train(start_iter, cfg.train.max_iter)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 114, in forward
    features = self.backbone(self.preprocess_image(batched_inputs))
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/backbones/swin_transformer.py", line 805, in forward
    y = super(SwinTransformer_small_patch4_window7_224_maskformer,
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/backbones/swin_transformer.py", line 682, in forward
    x = self.patch_embed(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/backbones/swin_transformer.py", line 507, in forward
    _, _, H, W = x.shape
AttributeError: 'dict' object has no attribute 'shape'
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0730 13:05:27.433578  8954 tcp_utils.cc:107] Retry to connect to 172.17.0.7:52066 while the server is not yet listening.
I0730 13:05:30.433861  8954 tcp_utils.cc:130] Successfully connected to 172.17.0.7:52066
W0730 13:05:32.097170  8954 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:05:32.097980  8954 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[07/30 13:05:34 ufo]: Rank of current process: 0. World size: 1
[07/30 13:05:35 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:05:35 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:05:35 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1216[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1248[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1280[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1216[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1248[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1280[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:05:35 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f2e4388b040>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.19s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:05:39 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:05:39 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f2e44a420d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f2e44a4e940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f2e44a533a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f2e446c8940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f2e446c89d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280], 'max_size': 1280}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280], 'max_size': 1280}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f2e446cd550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f2e446cd4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f2e44a4e9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f2e44a4e940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f2e44a533a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f2e446c2c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f2e44c4dd30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f2e446cd550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f2e446cd4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f2f2aa1b670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f2f2aa1b5e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(512, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(128, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(1024, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(1024, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:05:44 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(512, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(128, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(1024, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(1024, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:05:44 ufo]: Optim:
Weight Decay, params: 
Exception during training:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 126, in forward
    task_outputs = self.heads[self.task2head_mapping[task_name]](features, batched_inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/maskformer_head.py", line 102, in forward
    outputs = self.seghead(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/maskformer_head.py", line 758, in forward
    mask_features, transformer_encoder_features = self.pixel_decoder(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/maskformer_head.py", line 270, in forward
    y = self.output_convs[idx](x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddleseg/models/layers/layer_libs.py", line 118, in forward
    x = self._conv(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/nn/layer/conv.py", line 712, in forward
    out = F.conv._conv_nd(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/nn/functional/conv.py", line 140, in _conv_nd
    pre_bias = _C_ops.conv2d(
ValueError: (InvalidArgument) The number of input's channels should be equal to filter's channels * groups for Op(Conv). But received: the input's channels is 768, the input's shape is [1, 768, 23, 40]; the filter's channels is 1024, the filter's shape is [256, 1024, 3, 3]; the groups is 1, the data_format is NCHW. The error may come from wrong data_format setting.
  [Hint: Expected input_channels == filter_dims[1] * groups, but received input_channels:768 != filter_dims[1] * groups:1024.] (at /paddle/paddle/phi/infermeta/binary.cc:529)

Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 162, in do_train
    trainer.train(start_iter, cfg.train.max_iter)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 126, in forward
    task_outputs = self.heads[self.task2head_mapping[task_name]](features, batched_inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/maskformer_head.py", line 102, in forward
    outputs = self.seghead(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/maskformer_head.py", line 758, in forward
    mask_features, transformer_encoder_features = self.pixel_decoder(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/maskformer_head.py", line 270, in forward
    y = self.output_convs[idx](x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddleseg/models/layers/layer_libs.py", line 118, in forward
    x = self._conv(x)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/nn/layer/conv.py", line 712, in forward
    out = F.conv._conv_nd(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/nn/functional/conv.py", line 140, in _conv_nd
    pre_bias = _C_ops.conv2d(
ValueError: (InvalidArgument) The number of input's channels should be equal to filter's channels * groups for Op(Conv). But received: the input's channels is 768, the input's shape is [1, 768, 23, 40]; the filter's channels is 1024, the filter's shape is [256, 1024, 3, 3]; the groups is 1, the data_format is NCHW. The error may come from wrong data_format setting.
  [Hint: Expected input_channels == filter_dims[1] * groups, but received input_channels:768 != filter_dims[1] * groups:1024.] (at /paddle/paddle/phi/infermeta/binary.cc:529)

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0730 13:07:47.179702 16613 tcp_utils.cc:130] Successfully connected to 172.17.0.7:56069
W0730 13:07:49.092907 16613 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:07:49.093683 16613 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[07/30 13:07:51 ufo]: Rank of current process: 0. World size: 1
[07/30 13:07:53 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:07:53 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:07:53 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1216[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1248[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1280[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1216[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1248[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1280[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:07:53 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f31a54433a0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.26s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:07:59 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:07:59 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f31a65a00d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f31a65ae940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f31a65b23a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f31a6227940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f31a62279d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280], 'max_size': 1280}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280], 'max_size': 1280}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f31a622d550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f31a622d4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f31a65ae9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f31a65ae940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f31a65b23a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f31a6221c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f31a67acd30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f31a622d550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f31a622d4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f32912d9670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f32912d95e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:08:03 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:08:03 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690693759 (unix time) try "date -d @1690693759" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x40be) received by PID 16613 (TID 0x7f3317c15240) from PID 16574 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0730 13:13:46.642566  1543 tcp_utils.cc:107] Retry to connect to 172.17.0.7:46564 while the server is not yet listening.
I0730 13:13:49.642944  1543 tcp_utils.cc:130] Successfully connected to 172.17.0.7:46564
W0730 13:13:51.684964  1543 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:13:51.685844  1543 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[07/30 13:13:53 ufo]: Rank of current process: 0. World size: 1
[07/30 13:13:56 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:13:56 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:13:56 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, 1152, 1184, 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1088[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, 1152, 1184, 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1088[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:13:56 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fdbde7d32e0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.26s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:14:01 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:14:01 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fdbdf90e0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fdbdf91b940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fdbdf91f3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fdbdf595940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fdbdf5959d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1088], 'max_size': 1088}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1088], 'max_size': 1088}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fdbdf59a550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fdbdf59a4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fdbdf91b9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fdbdf91b940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fdbdf91f3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fdbdf58ec10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fdbdfb19d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fdbdf59a550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fdbdf59a4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fdcc6b2f670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fdcc6b2f5e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:14:06 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:14:06 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690694124 (unix time) try "date -d @1690694124" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x5e4) received by PID 1543 (TID 0x7fdd51473240) from PID 1508 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0730 13:17:15.121928 10956 tcp_utils.cc:130] Successfully connected to 172.17.0.7:47271
W0730 13:17:16.757006 10956 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:17:16.757879 10956 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[07/30 13:17:19 ufo]: Rank of current process: 0. World size: 1
[07/30 13:17:21 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:17:21 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:17:21 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;141m1184[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1184[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                 [39m[38;5;141m1184[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1184[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:17:22 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f2336b14250>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.24s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:17:26 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:17:26 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f2337c490d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f2337c55940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f2337c5b3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f23378d0940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f23378d09d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1184], 'max_size': 1184}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1184], 'max_size': 1184}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f23378d5550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f23378d54c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f2337c559d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f2337c55940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f2337c5b3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f23378c8c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f2337e54d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f23378d5550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f23378d54c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f241f2d7670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f241f2d75e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:17:31 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:17:31 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690694285 (unix time) try "date -d @1690694285" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x2a8d) received by PID 10956 (TID 0x7f24a9c37240) from PID 10893 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0730 13:20:42.795194  1526 tcp_utils.cc:130] Successfully connected to 172.17.0.7:60963
W0730 13:20:45.012897  1526 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:20:45.013689  1526 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[07/30 13:20:46 ufo]: Rank of current process: 0. World size: 1
[07/30 13:20:48 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:20:48 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:20:48 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1152[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1152[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:20:48 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f64b6b27040>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.21s)
creating index...
index created!
COCODataSet has 6103 samples
fail to map sample transform [RandomShortSideResize_1c7ca9] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_a666a6] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_1c7ca9] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_a666a6] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

Exception in thread Thread-3:
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/threading.py", line 932, in _bootstrap_inner
[07/30 13:20:52 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:20:52 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f64b7bdf0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f64b7beb940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f64b7bf03a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f64b7866940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f64b78669d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1152], 'max_size': 1152}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [], 'max_size': 1152}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f64b786a550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f64b786a4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f64b7beb9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f64b7beb940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f64b7bf03a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f64b785dc10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f64b7de8d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f64b786a550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f64b786a4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f65a08cf670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f65a08cf5e0>}}
    self.run()
  File "/root/miniconda3/lib/python3.8/threading.py", line 870, in run
    self._target(*self._args, **self._kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/dataloader_iter.py", line 536, in _thread_loop
    batch = self._get_data()
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/dataloader_iter.py", line 674, in _get_data
    batch.reraise()
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/worker.py", line 172, in reraise
    raise self.exc_type(msg)
IndexError: DataLoader worker(1) caught IndexError with message:
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/worker.py", line 339, in _worker_loop
    batch = fetcher.fetch(indices)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/fetcher.py", line 125, in fetch
    data.append(self.dataset[idx])
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/data/datasets/bases.py", line 261, in __getitem__
    return self.transform(roidb)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_1c7ca9] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_a666a6] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_1c7ca9] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_a666a6] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_1c7ca9] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_a666a6] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_1c7ca9] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_a666a6] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_1c7ca9] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_a666a6] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_1c7ca9] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_a666a6] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_1c7ca9] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_a666a6] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomShortSideResize_1c7ca9] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

fail to map sample transform [RandomSelect_a666a6] with error: Cannot choose from an empty sequence and stack:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1702, in apply
    return self.transforms2(sample)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 76, in __call__
    raise e
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 70, in __call__
    data = f(data)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 158, in __call__
    sample = self.apply(sample, context)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/transforms/detection_ops.py", line 1862, in apply
    target_size = random.choice(self.short_side_sizes)
  File "/root/miniconda3/lib/python3.8/random.py", line 290, in choice
    raise IndexError('Cannot choose from an empty sequence') from None
IndexError: Cannot choose from an empty sequence

MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:20:56 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:20:57 ufo]: Optim:
Weight Decay, params: 
Exception during training:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 279, in run_step
    data = next(self._data_loader_iter)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/build.py", line 68, in __next__
    batch[name] = next(iter_)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/dataloader_iter.py", line 745, in __next__
    self._reader.read_next_list()[0])
SystemError: (Fatal) Blocking queue is killed because the data reader raises an exception.
  [Hint: Expected killed_ != true, but received killed_:1 == true:1.] (at /paddle/paddle/fluid/operators/reader/blocking_queue.h:175)

Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 162, in do_train
    trainer.train(start_iter, cfg.train.max_iter)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 279, in run_step
    data = next(self._data_loader_iter)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./data/build.py", line 68, in __next__
    batch[name] = next(iter_)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dataloader/dataloader_iter.py", line 745, in __next__
    self._reader.read_next_list()[0])
SystemError: (Fatal) Blocking queue is killed because the data reader raises an exception.
  [Hint: Expected killed_ != true, but received killed_:1 == true:1.] (at /paddle/paddle/fluid/operators/reader/blocking_queue.h:175)



--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
No stack trace in paddle, may be caused by external reasons.

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690694467 (unix time) try "date -d @1690694467" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x5d2) received by PID 1526 (TID 0x7f662720b240) from PID 1490 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0730 13:21:25.276950  8593 tcp_utils.cc:130] Successfully connected to 172.17.0.7:62578
W0730 13:21:27.298630  8593 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:21:27.299490  8593 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[07/30 13:21:29 ufo]: Rank of current process: 0. World size: 1
[07/30 13:21:31 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:21:31 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:21:31 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1152[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;141m1152[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1152[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:21:31 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7ffa60e3f280>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.21s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:21:37 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:21:37 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7ffa61f8a0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7ffa61f97940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7ffa61f9c3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7ffa61c11940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7ffa61c119d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1152], 'max_size': 1152}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1152], 'max_size': 1152}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7ffa61c16550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7ffa61c164c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7ffa61f979d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7ffa61f97940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7ffa61f9c3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7ffa61c0ac10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7ffa62195d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7ffa61c16550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7ffa61c164c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7ffb4dc1e670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7ffb4dc1e5e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:21:41 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:21:41 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690694579 (unix time) try "date -d @1690694579" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x2160) received by PID 8593 (TID 0x7ffbd455a240) from PID 8544 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0730 13:26:54.673028  1496 tcp_utils.cc:130] Successfully connected to 172.17.0.7:60939
W0730 13:26:59.650324  1496 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:26:59.651537  1496 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[07/30 13:27:01 ufo]: Rank of current process: 0. World size: 1
[07/30 13:27:05 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:27:05 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:27:05 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;141m1152[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1152[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;242m# 1120, [39m
[38;5;15m                                                [39m[38;5;141m1152[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1152[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:27:05 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f2c0b84a220>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.28s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:27:12 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:27:12 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f2c0c9910d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f2c0c99c940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f2c0c9a13a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f2c0c617940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f2c0c6179d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1152], 'max_size': 1152}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1152], 'max_size': 1152}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f2c0c61c550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f2c0c61c4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f2c0c99c9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f2c0c99c940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f2c0c9a13a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f2c0c610c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f2c0cb9bd30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f2c0c61c550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f2c0c61c4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f2cf2048670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f2cf20485e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:27:17 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:27:17 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690694942 (unix time) try "date -d @1690694942" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x5b4) received by PID 1496 (TID 0x7f2d7c992240) from PID 1460 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0730 13:31:03.437122  1452 tcp_utils.cc:130] Successfully connected to 172.17.0.7:38829
W0730 13:31:05.421602  1452 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:31:05.422420  1452 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[07/30 13:31:07 ufo]: Rank of current process: 0. World size: 1
[07/30 13:31:09 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:31:09 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:31:09 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:31:09 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f280d7ba370>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.26s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:31:14 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:31:14 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f280e8fa0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f280e905940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f280e90b3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f280e581940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f280e5819d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f280e585550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f280e5854c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f280e9059d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f280e905940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f280e90b3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f280e579c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f280eb04d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f280e585550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f280e5854c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f28f8ab7670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f28f8ab75e0>}}
MaskFormer(
  (loss): MaskFormerLoss(
    (matcher): HungarianMatcher()
  )
  (seghead): MaskFormerHead(
    (pixel_decoder): BasePixelDecoder(
      (lateral_convs): LayerList(
        (0): None
        (1): ConvNormAct(
          (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (2): ConvNormAct(
          (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
        (3): ConvNormAct(
          (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
        )
      )
      (output_convs): LayerList(
        (0): ConvNormAct(
          (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (1): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (2): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
        (3): ConvNormAct(
          (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          (_act): Activation(
            (act_func): ReLU()
          )
        )
      )
      (mask_features): ConvNormAct(
        (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (predictor): TransformerPredictor(
      (pe_layer): PositionEmbeddingSine()
      (transformer): Transformer(
        (encoder): TransformerEncoder(
          (layers): LayerList()
        )
        (decoder): TransformerDecoder(
          (decoder_list): LayerList(
            (0): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (1): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (2): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (3): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (4): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
            (5): DecoderLayer(
              (self_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (multihead_attn): MultiHeadAttention(
                (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
              (activation): ReLU()
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
      )
      (query_embed): Embedding(100, 256, sparse=False)
      (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
      (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
      (mask_embed): MLP(
        (layers): LayerList(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): Linear(in_features=256, out_features=256, dtype=float32)
          (2): Linear(in_features=256, out_features=256, dtype=float32)
        )
      )
    )
  )
)
[07/30 13:31:19 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:31:19 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690695322 (unix time) try "date -d @1690695322" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x587) received by PID 1452 (TID 0x7f297f3f3240) from PID 1415 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0730 13:35:34.446811 12074 tcp_utils.cc:107] Retry to connect to 172.17.0.7:56963 while the server is not yet listening.
I0730 13:35:37.447189 12074 tcp_utils.cc:130] Successfully connected to 172.17.0.7:56963
W0730 13:35:39.877368 12074 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:35:39.878252 12074 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[07/30 13:35:42 ufo]: Rank of current process: 0. World size: 1
[07/30 13:35:44 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:35:44 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:35:45 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:35:45 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f7b918d6220>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.27s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:35:50 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:35:50 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f7b929c1f70>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f7b92a20820>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f7b92a22280>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f7b9269e820>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f7b9269e8b0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f7b926a1430>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f7b926a13a0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f7b92a208b0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f7b92a20820>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f7b92a22280>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f7b92695af0>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f7b92c1fd30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f7b926a1430>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f7b926a13a0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f7c7dc25670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f7c7dc255e0>}}
patch_embed.proj.weight has [96, 3, 4, 4], but patch_embed.proj.weight has (96, 3, 4, 4)
patch_embed.proj.bias has [96], but patch_embed.proj.bias has (96,)
patch_embed.norm.weight has [96], but patch_embed.norm.weight has (96,)
patch_embed.norm.bias has [96], but patch_embed.norm.bias has (96,)
layers.0.blocks.0.norm1.weight has [96], but layers.0.blocks.0.norm1.weight has (96,)
layers.0.blocks.0.norm1.bias has [96], but layers.0.blocks.0.norm1.bias has (96,)
layers.0.blocks.0.attn.relative_position_bias_table has [169, 3], but layers.0.blocks.0.attn.relative_position_bias_table has (169, 3)
layers.0.blocks.0.attn.relative_position_index has [49, 49], but layers.0.blocks.0.attn.relative_position_index has (49, 49)
layers.0.blocks.0.attn.qkv.weight has [96, 288], but layers.0.blocks.0.attn.qkv.weight has (96, 288)
layers.0.blocks.0.attn.qkv.bias has [288], but layers.0.blocks.0.attn.qkv.bias has (288,)
layers.0.blocks.0.attn.proj.weight has [96, 96], but layers.0.blocks.0.attn.proj.weight has (96, 96)
layers.0.blocks.0.attn.proj.bias has [96], but layers.0.blocks.0.attn.proj.bias has (96,)
layers.0.blocks.0.norm2.weight has [96], but layers.0.blocks.0.norm2.weight has (96,)
layers.0.blocks.0.norm2.bias has [96], but layers.0.blocks.0.norm2.bias has (96,)
layers.0.blocks.0.mlp.fc1.weight has [96, 384], but layers.0.blocks.0.mlp.fc1.weight has (96, 384)
layers.0.blocks.0.mlp.fc1.bias has [384], but layers.0.blocks.0.mlp.fc1.bias has (384,)
layers.0.blocks.0.mlp.fc2.weight has [384, 96], but layers.0.blocks.0.mlp.fc2.weight has (384, 96)
layers.0.blocks.0.mlp.fc2.bias has [96], but layers.0.blocks.0.mlp.fc2.bias has (96,)
layers.0.blocks.1.norm1.weight has [96], but layers.0.blocks.1.norm1.weight has (96,)
layers.0.blocks.1.norm1.bias has [96], but layers.0.blocks.1.norm1.bias has (96,)
layers.0.blocks.1.attn.relative_position_bias_table has [169, 3], but layers.0.blocks.1.attn.relative_position_bias_table has (169, 3)
layers.0.blocks.1.attn.relative_position_index has [49, 49], but layers.0.blocks.1.attn.relative_position_index has (49, 49)
layers.0.blocks.1.attn.qkv.weight has [96, 288], but layers.0.blocks.1.attn.qkv.weight has (96, 288)
layers.0.blocks.1.attn.qkv.bias has [288], but layers.0.blocks.1.attn.qkv.bias has (288,)
layers.0.blocks.1.attn.proj.weight has [96, 96], but layers.0.blocks.1.attn.proj.weight has (96, 96)
layers.0.blocks.1.attn.proj.bias has [96], but layers.0.blocks.1.attn.proj.bias has (96,)
layers.0.blocks.1.norm2.weight has [96], but layers.0.blocks.1.norm2.weight has (96,)
layers.0.blocks.1.norm2.bias has [96], but layers.0.blocks.1.norm2.bias has (96,)
layers.0.blocks.1.mlp.fc1.weight has [96, 384], but layers.0.blocks.1.mlp.fc1.weight has (96, 384)
layers.0.blocks.1.mlp.fc1.bias has [384], but layers.0.blocks.1.mlp.fc1.bias has (384,)
layers.0.blocks.1.mlp.fc2.weight has [384, 96], but layers.0.blocks.1.mlp.fc2.weight has (384, 96)
layers.0.blocks.1.mlp.fc2.bias has [96], but layers.0.blocks.1.mlp.fc2.bias has (96,)
layers.0.downsample.reduction.weight has [384, 192], but layers.0.downsample.reduction.weight has (384, 192)
layers.0.downsample.norm.weight has [384], but layers.0.downsample.norm.weight has (384,)
layers.0.downsample.norm.bias has [384], but layers.0.downsample.norm.bias has (384,)
layers.1.blocks.0.norm1.weight has [192], but layers.1.blocks.0.norm1.weight has (192,)
layers.1.blocks.0.norm1.bias has [192], but layers.1.blocks.0.norm1.bias has (192,)
layers.1.blocks.0.attn.relative_position_bias_table has [169, 6], but layers.1.blocks.0.attn.relative_position_bias_table has (169, 6)
layers.1.blocks.0.attn.relative_position_index has [49, 49], but layers.1.blocks.0.attn.relative_position_index has (49, 49)
layers.1.blocks.0.attn.qkv.weight has [192, 576], but layers.1.blocks.0.attn.qkv.weight has (192, 576)
layers.1.blocks.0.attn.qkv.bias has [576], but layers.1.blocks.0.attn.qkv.bias has (576,)
layers.1.blocks.0.attn.proj.weight has [192, 192], but layers.1.blocks.0.attn.proj.weight has (192, 192)
layers.1.blocks.0.attn.proj.bias has [192], but layers.1.blocks.0.attn.proj.bias has (192,)
layers.1.blocks.0.norm2.weight has [192], but layers.1.blocks.0.norm2.weight has (192,)
layers.1.blocks.0.norm2.bias has [192], but layers.1.blocks.0.norm2.bias has (192,)
layers.1.blocks.0.mlp.fc1.weight has [192, 768], but layers.1.blocks.0.mlp.fc1.weight has (192, 768)
layers.1.blocks.0.mlp.fc1.bias has [768], but layers.1.blocks.0.mlp.fc1.bias has (768,)
layers.1.blocks.0.mlp.fc2.weight has [768, 192], but layers.1.blocks.0.mlp.fc2.weight has (768, 192)
layers.1.blocks.0.mlp.fc2.bias has [192], but layers.1.blocks.0.mlp.fc2.bias has (192,)
layers.1.blocks.1.norm1.weight has [192], but layers.1.blocks.1.norm1.weight has (192,)
layers.1.blocks.1.norm1.bias has [192], but layers.1.blocks.1.norm1.bias has (192,)
layers.1.blocks.1.attn.relative_position_bias_table has [169, 6], but layers.1.blocks.1.attn.relative_position_bias_table has (169, 6)
layers.1.blocks.1.attn.relative_position_index has [49, 49], but layers.1.blocks.1.attn.relative_position_index has (49, 49)
layers.1.blocks.1.attn.qkv.weight has [192, 576], but layers.1.blocks.1.attn.qkv.weight has (192, 576)
layers.1.blocks.1.attn.qkv.bias has [576], but layers.1.blocks.1.attn.qkv.bias has (576,)
layers.1.blocks.1.attn.proj.weight has [192, 192], but layers.1.blocks.1.attn.proj.weight has (192, 192)
layers.1.blocks.1.attn.proj.bias has [192], but layers.1.blocks.1.attn.proj.bias has (192,)
layers.1.blocks.1.norm2.weight has [192], but layers.1.blocks.1.norm2.weight has (192,)
layers.1.blocks.1.norm2.bias has [192], but layers.1.blocks.1.norm2.bias has (192,)
layers.1.blocks.1.mlp.fc1.weight has [192, 768], but layers.1.blocks.1.mlp.fc1.weight has (192, 768)
layers.1.blocks.1.mlp.fc1.bias has [768], but layers.1.blocks.1.mlp.fc1.bias has (768,)
layers.1.blocks.1.mlp.fc2.weight has [768, 192], but layers.1.blocks.1.mlp.fc2.weight has (768, 192)
layers.1.blocks.1.mlp.fc2.bias has [192], but layers.1.blocks.1.mlp.fc2.bias has (192,)
layers.1.downsample.reduction.weight has [768, 384], but layers.1.downsample.reduction.weight has (768, 384)
layers.1.downsample.norm.weight has [768], but layers.1.downsample.norm.weight has (768,)
layers.1.downsample.norm.bias has [768], but layers.1.downsample.norm.bias has (768,)
layers.2.blocks.0.norm1.weight has [384], but layers.2.blocks.0.norm1.weight has (384,)
layers.2.blocks.0.norm1.bias has [384], but layers.2.blocks.0.norm1.bias has (384,)
layers.2.blocks.0.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.0.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.0.attn.relative_position_index has [49, 49], but layers.2.blocks.0.attn.relative_position_index has (49, 49)
layers.2.blocks.0.attn.qkv.weight has [384, 1152], but layers.2.blocks.0.attn.qkv.weight has (384, 1152)
layers.2.blocks.0.attn.qkv.bias has [1152], but layers.2.blocks.0.attn.qkv.bias has (1152,)
layers.2.blocks.0.attn.proj.weight has [384, 384], but layers.2.blocks.0.attn.proj.weight has (384, 384)
layers.2.blocks.0.attn.proj.bias has [384], but layers.2.blocks.0.attn.proj.bias has (384,)
layers.2.blocks.0.norm2.weight has [384], but layers.2.blocks.0.norm2.weight has (384,)
layers.2.blocks.0.norm2.bias has [384], but layers.2.blocks.0.norm2.bias has (384,)
layers.2.blocks.0.mlp.fc1.weight has [384, 1536], but layers.2.blocks.0.mlp.fc1.weight has (384, 1536)
layers.2.blocks.0.mlp.fc1.bias has [1536], but layers.2.blocks.0.mlp.fc1.bias has (1536,)
layers.2.blocks.0.mlp.fc2.weight has [1536, 384], but layers.2.blocks.0.mlp.fc2.weight has (1536, 384)
layers.2.blocks.0.mlp.fc2.bias has [384], but layers.2.blocks.0.mlp.fc2.bias has (384,)
layers.2.blocks.1.norm1.weight has [384], but layers.2.blocks.1.norm1.weight has (384,)
layers.2.blocks.1.norm1.bias has [384], but layers.2.blocks.1.norm1.bias has (384,)
layers.2.blocks.1.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.1.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.1.attn.relative_position_index has [49, 49], but layers.2.blocks.1.attn.relative_position_index has (49, 49)
layers.2.blocks.1.attn.qkv.weight has [384, 1152], but layers.2.blocks.1.attn.qkv.weight has (384, 1152)
layers.2.blocks.1.attn.qkv.bias has [1152], but layers.2.blocks.1.attn.qkv.bias has (1152,)
layers.2.blocks.1.attn.proj.weight has [384, 384], but layers.2.blocks.1.attn.proj.weight has (384, 384)
layers.2.blocks.1.attn.proj.bias has [384], but layers.2.blocks.1.attn.proj.bias has (384,)
layers.2.blocks.1.norm2.weight has [384], but layers.2.blocks.1.norm2.weight has (384,)
layers.2.blocks.1.norm2.bias has [384], but layers.2.blocks.1.norm2.bias has (384,)
layers.2.blocks.1.mlp.fc1.weight has [384, 1536], but layers.2.blocks.1.mlp.fc1.weight has (384, 1536)
layers.2.blocks.1.mlp.fc1.bias has [1536], but layers.2.blocks.1.mlp.fc1.bias has (1536,)
layers.2.blocks.1.mlp.fc2.weight has [1536, 384], but layers.2.blocks.1.mlp.fc2.weight has (1536, 384)
layers.2.blocks.1.mlp.fc2.bias has [384], but layers.2.blocks.1.mlp.fc2.bias has (384,)
layers.2.blocks.2.norm1.weight has [384], but layers.2.blocks.2.norm1.weight has (384,)
layers.2.blocks.2.norm1.bias has [384], but layers.2.blocks.2.norm1.bias has (384,)
layers.2.blocks.2.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.2.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.2.attn.relative_position_index has [49, 49], but layers.2.blocks.2.attn.relative_position_index has (49, 49)
layers.2.blocks.2.attn.qkv.weight has [384, 1152], but layers.2.blocks.2.attn.qkv.weight has (384, 1152)
layers.2.blocks.2.attn.qkv.bias has [1152], but layers.2.blocks.2.attn.qkv.bias has (1152,)
layers.2.blocks.2.attn.proj.weight has [384, 384], but layers.2.blocks.2.attn.proj.weight has (384, 384)
layers.2.blocks.2.attn.proj.bias has [384], but layers.2.blocks.2.attn.proj.bias has (384,)
layers.2.blocks.2.norm2.weight has [384], but layers.2.blocks.2.norm2.weight has (384,)
layers.2.blocks.2.norm2.bias has [384], but layers.2.blocks.2.norm2.bias has (384,)
layers.2.blocks.2.mlp.fc1.weight has [384, 1536], but layers.2.blocks.2.mlp.fc1.weight has (384, 1536)
layers.2.blocks.2.mlp.fc1.bias has [1536], but layers.2.blocks.2.mlp.fc1.bias has (1536,)
layers.2.blocks.2.mlp.fc2.weight has [1536, 384], but layers.2.blocks.2.mlp.fc2.weight has (1536, 384)
layers.2.blocks.2.mlp.fc2.bias has [384], but layers.2.blocks.2.mlp.fc2.bias has (384,)
layers.2.blocks.3.norm1.weight has [384], but layers.2.blocks.3.norm1.weight has (384,)
layers.2.blocks.3.norm1.bias has [384], but layers.2.blocks.3.norm1.bias has (384,)
layers.2.blocks.3.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.3.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.3.attn.relative_position_index has [49, 49], but layers.2.blocks.3.attn.relative_position_index has (49, 49)
layers.2.blocks.3.attn.qkv.weight has [384, 1152], but layers.2.blocks.3.attn.qkv.weight has (384, 1152)
layers.2.blocks.3.attn.qkv.bias has [1152], but layers.2.blocks.3.attn.qkv.bias has (1152,)
layers.2.blocks.3.attn.proj.weight has [384, 384], but layers.2.blocks.3.attn.proj.weight has (384, 384)
layers.2.blocks.3.attn.proj.bias has [384], but layers.2.blocks.3.attn.proj.bias has (384,)
layers.2.blocks.3.norm2.weight has [384], but layers.2.blocks.3.norm2.weight has (384,)
layers.2.blocks.3.norm2.bias has [384], but layers.2.blocks.3.norm2.bias has (384,)
layers.2.blocks.3.mlp.fc1.weight has [384, 1536], but layers.2.blocks.3.mlp.fc1.weight has (384, 1536)
layers.2.blocks.3.mlp.fc1.bias has [1536], but layers.2.blocks.3.mlp.fc1.bias has (1536,)
layers.2.blocks.3.mlp.fc2.weight has [1536, 384], but layers.2.blocks.3.mlp.fc2.weight has (1536, 384)
layers.2.blocks.3.mlp.fc2.bias has [384], but layers.2.blocks.3.mlp.fc2.bias has (384,)
layers.2.blocks.4.norm1.weight has [384], but layers.2.blocks.4.norm1.weight has (384,)
layers.2.blocks.4.norm1.bias has [384], but layers.2.blocks.4.norm1.bias has (384,)
layers.2.blocks.4.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.4.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.4.attn.relative_position_index has [49, 49], but layers.2.blocks.4.attn.relative_position_index has (49, 49)
layers.2.blocks.4.attn.qkv.weight has [384, 1152], but layers.2.blocks.4.attn.qkv.weight has (384, 1152)
layers.2.blocks.4.attn.qkv.bias has [1152], but layers.2.blocks.4.attn.qkv.bias has (1152,)
layers.2.blocks.4.attn.proj.weight has [384, 384], but layers.2.blocks.4.attn.proj.weight has (384, 384)
layers.2.blocks.4.attn.proj.bias has [384], but layers.2.blocks.4.attn.proj.bias has (384,)
layers.2.blocks.4.norm2.weight has [384], but layers.2.blocks.4.norm2.weight has (384,)
layers.2.blocks.4.norm2.bias has [384], but layers.2.blocks.4.norm2.bias has (384,)
layers.2.blocks.4.mlp.fc1.weight has [384, 1536], but layers.2.blocks.4.mlp.fc1.weight has (384, 1536)
layers.2.blocks.4.mlp.fc1.bias has [1536], but layers.2.blocks.4.mlp.fc1.bias has (1536,)
layers.2.blocks.4.mlp.fc2.weight has [1536, 384], but layers.2.blocks.4.mlp.fc2.weight has (1536, 384)
layers.2.blocks.4.mlp.fc2.bias has [384], but layers.2.blocks.4.mlp.fc2.bias has (384,)
layers.2.blocks.5.norm1.weight has [384], but layers.2.blocks.5.norm1.weight has (384,)
layers.2.blocks.5.norm1.bias has [384], but layers.2.blocks.5.norm1.bias has (384,)
layers.2.blocks.5.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.5.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.5.attn.relative_position_index has [49, 49], but layers.2.blocks.5.attn.relative_position_index has (49, 49)
layers.2.blocks.5.attn.qkv.weight has [384, 1152], but layers.2.blocks.5.attn.qkv.weight has (384, 1152)
layers.2.blocks.5.attn.qkv.bias has [1152], but layers.2.blocks.5.attn.qkv.bias has (1152,)
layers.2.blocks.5.attn.proj.weight has [384, 384], but layers.2.blocks.5.attn.proj.weight has (384, 384)
layers.2.blocks.5.attn.proj.bias has [384], but layers.2.blocks.5.attn.proj.bias has (384,)
layers.2.blocks.5.norm2.weight has [384], but layers.2.blocks.5.norm2.weight has (384,)
layers.2.blocks.5.norm2.bias has [384], but layers.2.blocks.5.norm2.bias has (384,)
layers.2.blocks.5.mlp.fc1.weight has [384, 1536], but layers.2.blocks.5.mlp.fc1.weight has (384, 1536)
layers.2.blocks.5.mlp.fc1.bias has [1536], but layers.2.blocks.5.mlp.fc1.bias has (1536,)
layers.2.blocks.5.mlp.fc2.weight has [1536, 384], but layers.2.blocks.5.mlp.fc2.weight has (1536, 384)
layers.2.blocks.5.mlp.fc2.bias has [384], but layers.2.blocks.5.mlp.fc2.bias has (384,)
layers.2.blocks.6.norm1.weight has [384], but layers.2.blocks.6.norm1.weight has (384,)
layers.2.blocks.6.norm1.bias has [384], but layers.2.blocks.6.norm1.bias has (384,)
layers.2.blocks.6.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.6.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.6.attn.relative_position_index has [49, 49], but layers.2.blocks.6.attn.relative_position_index has (49, 49)
layers.2.blocks.6.attn.qkv.weight has [384, 1152], but layers.2.blocks.6.attn.qkv.weight has (384, 1152)
layers.2.blocks.6.attn.qkv.bias has [1152], but layers.2.blocks.6.attn.qkv.bias has (1152,)
layers.2.blocks.6.attn.proj.weight has [384, 384], but layers.2.blocks.6.attn.proj.weight has (384, 384)
layers.2.blocks.6.attn.proj.bias has [384], but layers.2.blocks.6.attn.proj.bias has (384,)
layers.2.blocks.6.norm2.weight has [384], but layers.2.blocks.6.norm2.weight has (384,)
layers.2.blocks.6.norm2.bias has [384], but layers.2.blocks.6.norm2.bias has (384,)
layers.2.blocks.6.mlp.fc1.weight has [384, 1536], but layers.2.blocks.6.mlp.fc1.weight has (384, 1536)
layers.2.blocks.6.mlp.fc1.bias has [1536], but layers.2.blocks.6.mlp.fc1.bias has (1536,)
layers.2.blocks.6.mlp.fc2.weight has [1536, 384], but layers.2.blocks.6.mlp.fc2.weight has (1536, 384)
layers.2.blocks.6.mlp.fc2.bias has [384], but layers.2.blocks.6.mlp.fc2.bias has (384,)
layers.2.blocks.7.norm1.weight has [384], but layers.2.blocks.7.norm1.weight has (384,)
layers.2.blocks.7.norm1.bias has [384], but layers.2.blocks.7.norm1.bias has (384,)
layers.2.blocks.7.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.7.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.7.attn.relative_position_index has [49, 49], but layers.2.blocks.7.attn.relative_position_index has (49, 49)
layers.2.blocks.7.attn.qkv.weight has [384, 1152], but layers.2.blocks.7.attn.qkv.weight has (384, 1152)
layers.2.blocks.7.attn.qkv.bias has [1152], but layers.2.blocks.7.attn.qkv.bias has (1152,)
layers.2.blocks.7.attn.proj.weight has [384, 384], but layers.2.blocks.7.attn.proj.weight has (384, 384)
layers.2.blocks.7.attn.proj.bias has [384], but layers.2.blocks.7.attn.proj.bias has (384,)
layers.2.blocks.7.norm2.weight has [384], but layers.2.blocks.7.norm2.weight has (384,)
layers.2.blocks.7.norm2.bias has [384], but layers.2.blocks.7.norm2.bias has (384,)
layers.2.blocks.7.mlp.fc1.weight has [384, 1536], but layers.2.blocks.7.mlp.fc1.weight has (384, 1536)
layers.2.blocks.7.mlp.fc1.bias has [1536], but layers.2.blocks.7.mlp.fc1.bias has (1536,)
layers.2.blocks.7.mlp.fc2.weight has [1536, 384], but layers.2.blocks.7.mlp.fc2.weight has (1536, 384)
layers.2.blocks.7.mlp.fc2.bias has [384], but layers.2.blocks.7.mlp.fc2.bias has (384,)
layers.2.blocks.8.norm1.weight has [384], but layers.2.blocks.8.norm1.weight has (384,)
layers.2.blocks.8.norm1.bias has [384], but layers.2.blocks.8.norm1.bias has (384,)
layers.2.blocks.8.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.8.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.8.attn.relative_position_index has [49, 49], but layers.2.blocks.8.attn.relative_position_index has (49, 49)
layers.2.blocks.8.attn.qkv.weight has [384, 1152], but layers.2.blocks.8.attn.qkv.weight has (384, 1152)
layers.2.blocks.8.attn.qkv.bias has [1152], but layers.2.blocks.8.attn.qkv.bias has (1152,)
layers.2.blocks.8.attn.proj.weight has [384, 384], but layers.2.blocks.8.attn.proj.weight has (384, 384)
layers.2.blocks.8.attn.proj.bias has [384], but layers.2.blocks.8.attn.proj.bias has (384,)
layers.2.blocks.8.norm2.weight has [384], but layers.2.blocks.8.norm2.weight has (384,)
layers.2.blocks.8.norm2.bias has [384], but layers.2.blocks.8.norm2.bias has (384,)
layers.2.blocks.8.mlp.fc1.weight has [384, 1536], but layers.2.blocks.8.mlp.fc1.weight has (384, 1536)
layers.2.blocks.8.mlp.fc1.bias has [1536], but layers.2.blocks.8.mlp.fc1.bias has (1536,)
layers.2.blocks.8.mlp.fc2.weight has [1536, 384], but layers.2.blocks.8.mlp.fc2.weight has (1536, 384)
layers.2.blocks.8.mlp.fc2.bias has [384], but layers.2.blocks.8.mlp.fc2.bias has (384,)
layers.2.blocks.9.norm1.weight has [384], but layers.2.blocks.9.norm1.weight has (384,)
layers.2.blocks.9.norm1.bias has [384], but layers.2.blocks.9.norm1.bias has (384,)
layers.2.blocks.9.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.9.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.9.attn.relative_position_index has [49, 49], but layers.2.blocks.9.attn.relative_position_index has (49, 49)
layers.2.blocks.9.attn.qkv.weight has [384, 1152], but layers.2.blocks.9.attn.qkv.weight has (384, 1152)
layers.2.blocks.9.attn.qkv.bias has [1152], but layers.2.blocks.9.attn.qkv.bias has (1152,)
layers.2.blocks.9.attn.proj.weight has [384, 384], but layers.2.blocks.9.attn.proj.weight has (384, 384)
layers.2.blocks.9.attn.proj.bias has [384], but layers.2.blocks.9.attn.proj.bias has (384,)
layers.2.blocks.9.norm2.weight has [384], but layers.2.blocks.9.norm2.weight has (384,)
layers.2.blocks.9.norm2.bias has [384], but layers.2.blocks.9.norm2.bias has (384,)
layers.2.blocks.9.mlp.fc1.weight has [384, 1536], but layers.2.blocks.9.mlp.fc1.weight has (384, 1536)
layers.2.blocks.9.mlp.fc1.bias has [1536], but layers.2.blocks.9.mlp.fc1.bias has (1536,)
layers.2.blocks.9.mlp.fc2.weight has [1536, 384], but layers.2.blocks.9.mlp.fc2.weight has (1536, 384)
layers.2.blocks.9.mlp.fc2.bias has [384], but layers.2.blocks.9.mlp.fc2.bias has (384,)
layers.2.blocks.10.norm1.weight has [384], but layers.2.blocks.10.norm1.weight has (384,)
layers.2.blocks.10.norm1.bias has [384], but layers.2.blocks.10.norm1.bias has (384,)
layers.2.blocks.10.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.10.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.10.attn.relative_position_index has [49, 49], but layers.2.blocks.10.attn.relative_position_index has (49, 49)
layers.2.blocks.10.attn.qkv.weight has [384, 1152], but layers.2.blocks.10.attn.qkv.weight has (384, 1152)
layers.2.blocks.10.attn.qkv.bias has [1152], but layers.2.blocks.10.attn.qkv.bias has (1152,)
layers.2.blocks.10.attn.proj.weight has [384, 384], but layers.2.blocks.10.attn.proj.weight has (384, 384)
layers.2.blocks.10.attn.proj.bias has [384], but layers.2.blocks.10.attn.proj.bias has (384,)
layers.2.blocks.10.norm2.weight has [384], but layers.2.blocks.10.norm2.weight has (384,)
layers.2.blocks.10.norm2.bias has [384], but layers.2.blocks.10.norm2.bias has (384,)
layers.2.blocks.10.mlp.fc1.weight has [384, 1536], but layers.2.blocks.10.mlp.fc1.weight has (384, 1536)
layers.2.blocks.10.mlp.fc1.bias has [1536], but layers.2.blocks.10.mlp.fc1.bias has (1536,)
layers.2.blocks.10.mlp.fc2.weight has [1536, 384], but layers.2.blocks.10.mlp.fc2.weight has (1536, 384)
layers.2.blocks.10.mlp.fc2.bias has [384], but layers.2.blocks.10.mlp.fc2.bias has (384,)
layers.2.blocks.11.norm1.weight has [384], but layers.2.blocks.11.norm1.weight has (384,)
layers.2.blocks.11.norm1.bias has [384], but layers.2.blocks.11.norm1.bias has (384,)
layers.2.blocks.11.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.11.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.11.attn.relative_position_index has [49, 49], but layers.2.blocks.11.attn.relative_position_index has (49, 49)
layers.2.blocks.11.attn.qkv.weight has [384, 1152], but layers.2.blocks.11.attn.qkv.weight has (384, 1152)
layers.2.blocks.11.attn.qkv.bias has [1152], but layers.2.blocks.11.attn.qkv.bias has (1152,)
layers.2.blocks.11.attn.proj.weight has [384, 384], but layers.2.blocks.11.attn.proj.weight has (384, 384)
layers.2.blocks.11.attn.proj.bias has [384], but layers.2.blocks.11.attn.proj.bias has (384,)
layers.2.blocks.11.norm2.weight has [384], but layers.2.blocks.11.norm2.weight has (384,)
layers.2.blocks.11.norm2.bias has [384], but layers.2.blocks.11.norm2.bias has (384,)
layers.2.blocks.11.mlp.fc1.weight has [384, 1536], but layers.2.blocks.11.mlp.fc1.weight has (384, 1536)
layers.2.blocks.11.mlp.fc1.bias has [1536], but layers.2.blocks.11.mlp.fc1.bias has (1536,)
layers.2.blocks.11.mlp.fc2.weight has [1536, 384], but layers.2.blocks.11.mlp.fc2.weight has (1536, 384)
layers.2.blocks.11.mlp.fc2.bias has [384], but layers.2.blocks.11.mlp.fc2.bias has (384,)
layers.2.blocks.12.norm1.weight has [384], but layers.2.blocks.12.norm1.weight has (384,)
layers.2.blocks.12.norm1.bias has [384], but layers.2.blocks.12.norm1.bias has (384,)
layers.2.blocks.12.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.12.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.12.attn.relative_position_index has [49, 49], but layers.2.blocks.12.attn.relative_position_index has (49, 49)
layers.2.blocks.12.attn.qkv.weight has [384, 1152], but layers.2.blocks.12.attn.qkv.weight has (384, 1152)
layers.2.blocks.12.attn.qkv.bias has [1152], but layers.2.blocks.12.attn.qkv.bias has (1152,)
layers.2.blocks.12.attn.proj.weight has [384, 384], but layers.2.blocks.12.attn.proj.weight has (384, 384)
layers.2.blocks.12.attn.proj.bias has [384], but layers.2.blocks.12.attn.proj.bias has (384,)
layers.2.blocks.12.norm2.weight has [384], but layers.2.blocks.12.norm2.weight has (384,)
layers.2.blocks.12.norm2.bias has [384], but layers.2.blocks.12.norm2.bias has (384,)
layers.2.blocks.12.mlp.fc1.weight has [384, 1536], but layers.2.blocks.12.mlp.fc1.weight has (384, 1536)
layers.2.blocks.12.mlp.fc1.bias has [1536], but layers.2.blocks.12.mlp.fc1.bias has (1536,)
layers.2.blocks.12.mlp.fc2.weight has [1536, 384], but layers.2.blocks.12.mlp.fc2.weight has (1536, 384)
layers.2.blocks.12.mlp.fc2.bias has [384], but layers.2.blocks.12.mlp.fc2.bias has (384,)
layers.2.blocks.13.norm1.weight has [384], but layers.2.blocks.13.norm1.weight has (384,)
layers.2.blocks.13.norm1.bias has [384], but layers.2.blocks.13.norm1.bias has (384,)
layers.2.blocks.13.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.13.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.13.attn.relative_position_index has [49, 49], but layers.2.blocks.13.attn.relative_position_index has (49, 49)
layers.2.blocks.13.attn.qkv.weight has [384, 1152], but layers.2.blocks.13.attn.qkv.weight has (384, 1152)
layers.2.blocks.13.attn.qkv.bias has [1152], but layers.2.blocks.13.attn.qkv.bias has (1152,)
layers.2.blocks.13.attn.proj.weight has [384, 384], but layers.2.blocks.13.attn.proj.weight has (384, 384)
layers.2.blocks.13.attn.proj.bias has [384], but layers.2.blocks.13.attn.proj.bias has (384,)
layers.2.blocks.13.norm2.weight has [384], but layers.2.blocks.13.norm2.weight has (384,)
layers.2.blocks.13.norm2.bias has [384], but layers.2.blocks.13.norm2.bias has (384,)
layers.2.blocks.13.mlp.fc1.weight has [384, 1536], but layers.2.blocks.13.mlp.fc1.weight has (384, 1536)
layers.2.blocks.13.mlp.fc1.bias has [1536], but layers.2.blocks.13.mlp.fc1.bias has (1536,)
layers.2.blocks.13.mlp.fc2.weight has [1536, 384], but layers.2.blocks.13.mlp.fc2.weight has (1536, 384)
layers.2.blocks.13.mlp.fc2.bias has [384], but layers.2.blocks.13.mlp.fc2.bias has (384,)
layers.2.blocks.14.norm1.weight has [384], but layers.2.blocks.14.norm1.weight has (384,)
layers.2.blocks.14.norm1.bias has [384], but layers.2.blocks.14.norm1.bias has (384,)
layers.2.blocks.14.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.14.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.14.attn.relative_position_index has [49, 49], but layers.2.blocks.14.attn.relative_position_index has (49, 49)
layers.2.blocks.14.attn.qkv.weight has [384, 1152], but layers.2.blocks.14.attn.qkv.weight has (384, 1152)
layers.2.blocks.14.attn.qkv.bias has [1152], but layers.2.blocks.14.attn.qkv.bias has (1152,)
layers.2.blocks.14.attn.proj.weight has [384, 384], but layers.2.blocks.14.attn.proj.weight has (384, 384)
layers.2.blocks.14.attn.proj.bias has [384], but layers.2.blocks.14.attn.proj.bias has (384,)
layers.2.blocks.14.norm2.weight has [384], but layers.2.blocks.14.norm2.weight has (384,)
layers.2.blocks.14.norm2.bias has [384], but layers.2.blocks.14.norm2.bias has (384,)
layers.2.blocks.14.mlp.fc1.weight has [384, 1536], but layers.2.blocks.14.mlp.fc1.weight has (384, 1536)
layers.2.blocks.14.mlp.fc1.bias has [1536], but layers.2.blocks.14.mlp.fc1.bias has (1536,)
layers.2.blocks.14.mlp.fc2.weight has [1536, 384], but layers.2.blocks.14.mlp.fc2.weight has (1536, 384)
layers.2.blocks.14.mlp.fc2.bias has [384], but layers.2.blocks.14.mlp.fc2.bias has (384,)
layers.2.blocks.15.norm1.weight has [384], but layers.2.blocks.15.norm1.weight has (384,)
layers.2.blocks.15.norm1.bias has [384], but layers.2.blocks.15.norm1.bias has (384,)
layers.2.blocks.15.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.15.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.15.attn.relative_position_index has [49, 49], but layers.2.blocks.15.attn.relative_position_index has (49, 49)
layers.2.blocks.15.attn.qkv.weight has [384, 1152], but layers.2.blocks.15.attn.qkv.weight has (384, 1152)
layers.2.blocks.15.attn.qkv.bias has [1152], but layers.2.blocks.15.attn.qkv.bias has (1152,)
layers.2.blocks.15.attn.proj.weight has [384, 384], but layers.2.blocks.15.attn.proj.weight has (384, 384)
layers.2.blocks.15.attn.proj.bias has [384], but layers.2.blocks.15.attn.proj.bias has (384,)
layers.2.blocks.15.norm2.weight has [384], but layers.2.blocks.15.norm2.weight has (384,)
layers.2.blocks.15.norm2.bias has [384], but layers.2.blocks.15.norm2.bias has (384,)
layers.2.blocks.15.mlp.fc1.weight has [384, 1536], but layers.2.blocks.15.mlp.fc1.weight has (384, 1536)
layers.2.blocks.15.mlp.fc1.bias has [1536], but layers.2.blocks.15.mlp.fc1.bias has (1536,)
layers.2.blocks.15.mlp.fc2.weight has [1536, 384], but layers.2.blocks.15.mlp.fc2.weight has (1536, 384)
layers.2.blocks.15.mlp.fc2.bias has [384], but layers.2.blocks.15.mlp.fc2.bias has (384,)
layers.2.blocks.16.norm1.weight has [384], but layers.2.blocks.16.norm1.weight has (384,)
layers.2.blocks.16.norm1.bias has [384], but layers.2.blocks.16.norm1.bias has (384,)
layers.2.blocks.16.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.16.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.16.attn.relative_position_index has [49, 49], but layers.2.blocks.16.attn.relative_position_index has (49, 49)
layers.2.blocks.16.attn.qkv.weight has [384, 1152], but layers.2.blocks.16.attn.qkv.weight has (384, 1152)
layers.2.blocks.16.attn.qkv.bias has [1152], but layers.2.blocks.16.attn.qkv.bias has (1152,)
layers.2.blocks.16.attn.proj.weight has [384, 384], but layers.2.blocks.16.attn.proj.weight has (384, 384)
layers.2.blocks.16.attn.proj.bias has [384], but layers.2.blocks.16.attn.proj.bias has (384,)
layers.2.blocks.16.norm2.weight has [384], but layers.2.blocks.16.norm2.weight has (384,)
layers.2.blocks.16.norm2.bias has [384], but layers.2.blocks.16.norm2.bias has (384,)
layers.2.blocks.16.mlp.fc1.weight has [384, 1536], but layers.2.blocks.16.mlp.fc1.weight has (384, 1536)
layers.2.blocks.16.mlp.fc1.bias has [1536], but layers.2.blocks.16.mlp.fc1.bias has (1536,)
layers.2.blocks.16.mlp.fc2.weight has [1536, 384], but layers.2.blocks.16.mlp.fc2.weight has (1536, 384)
layers.2.blocks.16.mlp.fc2.bias has [384], but layers.2.blocks.16.mlp.fc2.bias has (384,)
layers.2.blocks.17.norm1.weight has [384], but layers.2.blocks.17.norm1.weight has (384,)
layers.2.blocks.17.norm1.bias has [384], but layers.2.blocks.17.norm1.bias has (384,)
layers.2.blocks.17.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.17.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.17.attn.relative_position_index has [49, 49], but layers.2.blocks.17.attn.relative_position_index has (49, 49)
layers.2.blocks.17.attn.qkv.weight has [384, 1152], but layers.2.blocks.17.attn.qkv.weight has (384, 1152)
layers.2.blocks.17.attn.qkv.bias has [1152], but layers.2.blocks.17.attn.qkv.bias has (1152,)
layers.2.blocks.17.attn.proj.weight has [384, 384], but layers.2.blocks.17.attn.proj.weight has (384, 384)
layers.2.blocks.17.attn.proj.bias has [384], but layers.2.blocks.17.attn.proj.bias has (384,)
layers.2.blocks.17.norm2.weight has [384], but layers.2.blocks.17.norm2.weight has (384,)
layers.2.blocks.17.norm2.bias has [384], but layers.2.blocks.17.norm2.bias has (384,)
layers.2.blocks.17.mlp.fc1.weight has [384, 1536], but layers.2.blocks.17.mlp.fc1.weight has (384, 1536)
layers.2.blocks.17.mlp.fc1.bias has [1536], but layers.2.blocks.17.mlp.fc1.bias has (1536,)
layers.2.blocks.17.mlp.fc2.weight has [1536, 384], but layers.2.blocks.17.mlp.fc2.weight has (1536, 384)
layers.2.blocks.17.mlp.fc2.bias has [384], but layers.2.blocks.17.mlp.fc2.bias has (384,)
layers.2.downsample.reduction.weight has [1536, 768], but layers.2.downsample.reduction.weight has (1536, 768)
layers.2.downsample.norm.weight has [1536], but layers.2.downsample.norm.weight has (1536,)
layers.2.downsample.norm.bias has [1536], but layers.2.downsample.norm.bias has (1536,)
layers.3.blocks.0.norm1.weight has [768], but layers.3.blocks.0.norm1.weight has (768,)
layers.3.blocks.0.norm1.bias has [768], but layers.3.blocks.0.norm1.bias has (768,)
layers.3.blocks.0.attn.relative_position_bias_table has [169, 24], but layers.3.blocks.0.attn.relative_position_bias_table has (169, 24)
layers.3.blocks.0.attn.relative_position_index has [49, 49], but layers.3.blocks.0.attn.relative_position_index has (49, 49)
layers.3.blocks.0.attn.qkv.weight has [768, 2304], but layers.3.blocks.0.attn.qkv.weight has (768, 2304)
layers.3.blocks.0.attn.qkv.bias has [2304], but layers.3.blocks.0.attn.qkv.bias has (2304,)
layers.3.blocks.0.attn.proj.weight has [768, 768], but layers.3.blocks.0.attn.proj.weight has (768, 768)
layers.3.blocks.0.attn.proj.bias has [768], but layers.3.blocks.0.attn.proj.bias has (768,)
layers.3.blocks.0.norm2.weight has [768], but layers.3.blocks.0.norm2.weight has (768,)
layers.3.blocks.0.norm2.bias has [768], but layers.3.blocks.0.norm2.bias has (768,)
layers.3.blocks.0.mlp.fc1.weight has [768, 3072], but layers.3.blocks.0.mlp.fc1.weight has (768, 3072)
layers.3.blocks.0.mlp.fc1.bias has [3072], but layers.3.blocks.0.mlp.fc1.bias has (3072,)
layers.3.blocks.0.mlp.fc2.weight has [3072, 768], but layers.3.blocks.0.mlp.fc2.weight has (3072, 768)
layers.3.blocks.0.mlp.fc2.bias has [768], but layers.3.blocks.0.mlp.fc2.bias has (768,)
layers.3.blocks.1.norm1.weight has [768], but layers.3.blocks.1.norm1.weight has (768,)
layers.3.blocks.1.norm1.bias has [768], but layers.3.blocks.1.norm1.bias has (768,)
layers.3.blocks.1.attn.relative_position_bias_table has [169, 24], but layers.3.blocks.1.attn.relative_position_bias_table has (169, 24)
layers.3.blocks.1.attn.relative_position_index has [49, 49], but layers.3.blocks.1.attn.relative_position_index has (49, 49)
layers.3.blocks.1.attn.qkv.weight has [768, 2304], but layers.3.blocks.1.attn.qkv.weight has (768, 2304)
layers.3.blocks.1.attn.qkv.bias has [2304], but layers.3.blocks.1.attn.qkv.bias has (2304,)
layers.3.blocks.1.attn.proj.weight has [768, 768], but layers.3.blocks.1.attn.proj.weight has (768, 768)
layers.3.blocks.1.attn.proj.bias has [768], but layers.3.blocks.1.attn.proj.bias has (768,)
layers.3.blocks.1.norm2.weight has [768], but layers.3.blocks.1.norm2.weight has (768,)
layers.3.blocks.1.norm2.bias has [768], but layers.3.blocks.1.norm2.bias has (768,)
layers.3.blocks.1.mlp.fc1.weight has [768, 3072], but layers.3.blocks.1.mlp.fc1.weight has (768, 3072)
layers.3.blocks.1.mlp.fc1.bias has [3072], but layers.3.blocks.1.mlp.fc1.bias has (3072,)
layers.3.blocks.1.mlp.fc2.weight has [3072, 768], but layers.3.blocks.1.mlp.fc2.weight has (3072, 768)
layers.3.blocks.1.mlp.fc2.bias has [768], but layers.3.blocks.1.mlp.fc2.bias has (768,)
patch_embed.proj.weight has (96, 3, 4, 4), but patch_embed.proj.weight has [96, 3, 4, 4]
patch_embed.proj.bias has (96,), but patch_embed.proj.bias has [96]
patch_embed.norm.weight has (96,), but patch_embed.norm.weight has [96]
patch_embed.norm.bias has (96,), but patch_embed.norm.bias has [96]
layers.0.blocks.0.norm1.weight has (96,), but layers.0.blocks.0.norm1.weight has [96]
layers.0.blocks.0.norm1.bias has (96,), but layers.0.blocks.0.norm1.bias has [96]
layers.0.blocks.0.attn.qkv.weight has (96, 288), but layers.0.blocks.0.attn.qkv.weight has [96, 288]
layers.0.blocks.0.attn.qkv.bias has (288,), but layers.0.blocks.0.attn.qkv.bias has [288]
layers.0.blocks.0.attn.proj.weight has (96, 96), but layers.0.blocks.0.attn.proj.weight has [96, 96]
layers.0.blocks.0.attn.proj.bias has (96,), but layers.0.blocks.0.attn.proj.bias has [96]
layers.0.blocks.0.norm2.weight has (96,), but layers.0.blocks.0.norm2.weight has [96]
layers.0.blocks.0.norm2.bias has (96,), but layers.0.blocks.0.norm2.bias has [96]
layers.0.blocks.0.mlp.fc1.weight has (96, 384), but layers.0.blocks.0.mlp.fc1.weight has [96, 384]
layers.0.blocks.0.mlp.fc1.bias has (384,), but layers.0.blocks.0.mlp.fc1.bias has [384]
layers.0.blocks.0.mlp.fc2.weight has (384, 96), but layers.0.blocks.0.mlp.fc2.weight has [384, 96]
layers.0.blocks.0.mlp.fc2.bias has (96,), but layers.0.blocks.0.mlp.fc2.bias has [96]
layers.0.blocks.1.norm1.weight has (96,), but layers.0.blocks.1.norm1.weight has [96]
layers.0.blocks.1.norm1.bias has (96,), but layers.0.blocks.1.norm1.bias has [96]
layers.0.blocks.1.attn.qkv.weight has (96, 288), but layers.0.blocks.1.attn.qkv.weight has [96, 288]
layers.0.blocks.1.attn.qkv.bias has (288,), but layers.0.blocks.1.attn.qkv.bias has [288]
layers.0.blocks.1.attn.proj.weight has (96, 96), but layers.0.blocks.1.attn.proj.weight has [96, 96]
layers.0.blocks.1.attn.proj.bias has (96,), but layers.0.blocks.1.attn.proj.bias has [96]
layers.0.blocks.1.norm2.weight has (96,), but layers.0.blocks.1.norm2.weight has [96]
layers.0.blocks.1.norm2.bias has (96,), but layers.0.blocks.1.norm2.bias has [96]
layers.0.blocks.1.mlp.fc1.weight has (96, 384), but layers.0.blocks.1.mlp.fc1.weight has [96, 384]
layers.0.blocks.1.mlp.fc1.bias has (384,), but layers.0.blocks.1.mlp.fc1.bias has [384]
layers.0.blocks.1.mlp.fc2.weight has (384, 96), but layers.0.blocks.1.mlp.fc2.weight has [384, 96]
layers.0.blocks.1.mlp.fc2.bias has (96,), but layers.0.blocks.1.mlp.fc2.bias has [96]
layers.0.downsample.norm.weight has (384,), but layers.0.downsample.norm.weight has [384]
layers.0.downsample.norm.bias has (384,), but layers.0.downsample.norm.bias has [384]
layers.1.blocks.0.norm1.weight has (192,), but layers.1.blocks.0.norm1.weight has [192]
layers.1.blocks.0.norm1.bias has (192,), but layers.1.blocks.0.norm1.bias has [192]
layers.1.blocks.0.attn.qkv.weight has (192, 576), but layers.1.blocks.0.attn.qkv.weight has [192, 576]
layers.1.blocks.0.attn.qkv.bias has (576,), but layers.1.blocks.0.attn.qkv.bias has [576]
layers.1.blocks.0.attn.proj.weight has (192, 192), but layers.1.blocks.0.attn.proj.weight has [192, 192]
layers.1.blocks.0.attn.proj.bias has (192,), but layers.1.blocks.0.attn.proj.bias has [192]
layers.1.blocks.0.norm2.weight has (192,), but layers.1.blocks.0.norm2.weight has [192]
layers.1.blocks.0.norm2.bias has (192,), but layers.1.blocks.0.norm2.bias has [192]
layers.1.blocks.0.mlp.fc1.weight has (192, 768), but layers.1.blocks.0.mlp.fc1.weight has [192, 768]
layers.1.blocks.0.mlp.fc1.bias has (768,), but layers.1.blocks.0.mlp.fc1.bias has [768]
layers.1.blocks.0.mlp.fc2.weight has (768, 192), but layers.1.blocks.0.mlp.fc2.weight has [768, 192]
layers.1.blocks.0.mlp.fc2.bias has (192,), but layers.1.blocks.0.mlp.fc2.bias has [192]
layers.1.blocks.1.norm1.weight has (192,), but layers.1.blocks.1.norm1.weight has [192]
layers.1.blocks.1.norm1.bias has (192,), but layers.1.blocks.1.norm1.bias has [192]
layers.1.blocks.1.attn.qkv.weight has (192, 576), but layers.1.blocks.1.attn.qkv.weight has [192, 576]
layers.1.blocks.1.attn.qkv.bias has (576,), but layers.1.blocks.1.attn.qkv.bias has [576]
layers.1.blocks.1.attn.proj.weight has (192, 192), but layers.1.blocks.1.attn.proj.weight has [192, 192]
layers.1.blocks.1.attn.proj.bias has (192,), but layers.1.blocks.1.attn.proj.bias has [192]
layers.1.blocks.1.norm2.weight has (192,), but layers.1.blocks.1.norm2.weight has [192]
layers.1.blocks.1.norm2.bias has (192,), but layers.1.blocks.1.norm2.bias has [192]
layers.1.blocks.1.mlp.fc1.weight has (192, 768), but layers.1.blocks.1.mlp.fc1.weight has [192, 768]
layers.1.blocks.1.mlp.fc1.bias has (768,), but layers.1.blocks.1.mlp.fc1.bias has [768]
layers.1.blocks.1.mlp.fc2.weight has (768, 192), but layers.1.blocks.1.mlp.fc2.weight has [768, 192]
layers.1.blocks.1.mlp.fc2.bias has (192,), but layers.1.blocks.1.mlp.fc2.bias has [192]
layers.1.downsample.norm.weight has (768,), but layers.1.downsample.norm.weight has [768]
layers.1.downsample.norm.bias has (768,), but layers.1.downsample.norm.bias has [768]
layers.2.blocks.0.norm1.weight has (384,), but layers.2.blocks.0.norm1.weight has [384]
layers.2.blocks.0.norm1.bias has (384,), but layers.2.blocks.0.norm1.bias has [384]
layers.2.blocks.0.attn.qkv.weight has (384, 1152), but layers.2.blocks.0.attn.qkv.weight has [384, 1152]
layers.2.blocks.0.attn.qkv.bias has (1152,), but layers.2.blocks.0.attn.qkv.bias has [1152]
layers.2.blocks.0.attn.proj.weight has (384, 384), but layers.2.blocks.0.attn.proj.weight has [384, 384]
layers.2.blocks.0.attn.proj.bias has (384,), but layers.2.blocks.0.attn.proj.bias has [384]
layers.2.blocks.0.norm2.weight has (384,), but layers.2.blocks.0.norm2.weight has [384]
layers.2.blocks.0.norm2.bias has (384,), but layers.2.blocks.0.norm2.bias has [384]
layers.2.blocks.0.mlp.fc1.weight has (384, 1536), but layers.2.blocks.0.mlp.fc1.weight has [384, 1536]
layers.2.blocks.0.mlp.fc1.bias has (1536,), but layers.2.blocks.0.mlp.fc1.bias has [1536]
layers.2.blocks.0.mlp.fc2.weight has (1536, 384), but layers.2.blocks.0.mlp.fc2.weight has [1536, 384]
layers.2.blocks.0.mlp.fc2.bias has (384,), but layers.2.blocks.0.mlp.fc2.bias has [384]
layers.2.blocks.1.norm1.weight has (384,), but layers.2.blocks.1.norm1.weight has [384]
layers.2.blocks.1.norm1.bias has (384,), but layers.2.blocks.1.norm1.bias has [384]
layers.2.blocks.1.attn.qkv.weight has (384, 1152), but layers.2.blocks.1.attn.qkv.weight has [384, 1152]
layers.2.blocks.1.attn.qkv.bias has (1152,), but layers.2.blocks.1.attn.qkv.bias has [1152]
layers.2.blocks.1.attn.proj.weight has (384, 384), but layers.2.blocks.1.attn.proj.weight has [384, 384]
layers.2.blocks.1.attn.proj.bias has (384,), but layers.2.blocks.1.attn.proj.bias has [384]
layers.2.blocks.1.norm2.weight has (384,), but layers.2.blocks.1.norm2.weight has [384]
layers.2.blocks.1.norm2.bias has (384,), but layers.2.blocks.1.norm2.bias has [384]
layers.2.blocks.1.mlp.fc1.weight has (384, 1536), but layers.2.blocks.1.mlp.fc1.weight has [384, 1536]
layers.2.blocks.1.mlp.fc1.bias has (1536,), but layers.2.blocks.1.mlp.fc1.bias has [1536]
layers.2.blocks.1.mlp.fc2.weight has (1536, 384), but layers.2.blocks.1.mlp.fc2.weight has [1536, 384]
layers.2.blocks.1.mlp.fc2.bias has (384,), but layers.2.blocks.1.mlp.fc2.bias has [384]
layers.2.blocks.2.norm1.weight has (384,), but layers.2.blocks.2.norm1.weight has [384]
layers.2.blocks.2.norm1.bias has (384,), but layers.2.blocks.2.norm1.bias has [384]
layers.2.blocks.2.attn.qkv.weight has (384, 1152), but layers.2.blocks.2.attn.qkv.weight has [384, 1152]
layers.2.blocks.2.attn.qkv.bias has (1152,), but layers.2.blocks.2.attn.qkv.bias has [1152]
layers.2.blocks.2.attn.proj.weight has (384, 384), but layers.2.blocks.2.attn.proj.weight has [384, 384]
layers.2.blocks.2.attn.proj.bias has (384,), but layers.2.blocks.2.attn.proj.bias has [384]
layers.2.blocks.2.norm2.weight has (384,), but layers.2.blocks.2.norm2.weight has [384]
layers.2.blocks.2.norm2.bias has (384,), but layers.2.blocks.2.norm2.bias has [384]
layers.2.blocks.2.mlp.fc1.weight has (384, 1536), but layers.2.blocks.2.mlp.fc1.weight has [384, 1536]
layers.2.blocks.2.mlp.fc1.bias has (1536,), but layers.2.blocks.2.mlp.fc1.bias has [1536]
layers.2.blocks.2.mlp.fc2.weight has (1536, 384), but layers.2.blocks.2.mlp.fc2.weight has [1536, 384]
layers.2.blocks.2.mlp.fc2.bias has (384,), but layers.2.blocks.2.mlp.fc2.bias has [384]
layers.2.blocks.3.norm1.weight has (384,), but layers.2.blocks.3.norm1.weight has [384]
layers.2.blocks.3.norm1.bias has (384,), but layers.2.blocks.3.norm1.bias has [384]
layers.2.blocks.3.attn.qkv.weight has (384, 1152), but layers.2.blocks.3.attn.qkv.weight has [384, 1152]
layers.2.blocks.3.attn.qkv.bias has (1152,), but layers.2.blocks.3.attn.qkv.bias has [1152]
layers.2.blocks.3.attn.proj.weight has (384, 384), but layers.2.blocks.3.attn.proj.weight has [384, 384]
layers.2.blocks.3.attn.proj.bias has (384,), but layers.2.blocks.3.attn.proj.bias has [384]
layers.2.blocks.3.norm2.weight has (384,), but layers.2.blocks.3.norm2.weight has [384]
layers.2.blocks.3.norm2.bias has (384,), but layers.2.blocks.3.norm2.bias has [384]
layers.2.blocks.3.mlp.fc1.weight has (384, 1536), but layers.2.blocks.3.mlp.fc1.weight has [384, 1536]
layers.2.blocks.3.mlp.fc1.bias has (1536,), but layers.2.blocks.3.mlp.fc1.bias has [1536]
layers.2.blocks.3.mlp.fc2.weight has (1536, 384), but layers.2.blocks.3.mlp.fc2.weight has [1536, 384]
layers.2.blocks.3.mlp.fc2.bias has (384,), but layers.2.blocks.3.mlp.fc2.bias has [384]
layers.2.blocks.4.norm1.weight has (384,), but layers.2.blocks.4.norm1.weight has [384]
layers.2.blocks.4.norm1.bias has (384,), but layers.2.blocks.4.norm1.bias has [384]
layers.2.blocks.4.attn.qkv.weight has (384, 1152), but layers.2.blocks.4.attn.qkv.weight has [384, 1152]
layers.2.blocks.4.attn.qkv.bias has (1152,), but layers.2.blocks.4.attn.qkv.bias has [1152]
layers.2.blocks.4.attn.proj.weight has (384, 384), but layers.2.blocks.4.attn.proj.weight has [384, 384]
layers.2.blocks.4.attn.proj.bias has (384,), but layers.2.blocks.4.attn.proj.bias has [384]
layers.2.blocks.4.norm2.weight has (384,), but layers.2.blocks.4.norm2.weight has [384]
layers.2.blocks.4.norm2.bias has (384,), but layers.2.blocks.4.norm2.bias has [384]
layers.2.blocks.4.mlp.fc1.weight has (384, 1536), but layers.2.blocks.4.mlp.fc1.weight has [384, 1536]
layers.2.blocks.4.mlp.fc1.bias has (1536,), but layers.2.blocks.4.mlp.fc1.bias has [1536]
layers.2.blocks.4.mlp.fc2.weight has (1536, 384), but layers.2.blocks.4.mlp.fc2.weight has [1536, 384]
layers.2.blocks.4.mlp.fc2.bias has (384,), but layers.2.blocks.4.mlp.fc2.bias has [384]
layers.2.blocks.5.norm1.weight has (384,), but layers.2.blocks.5.norm1.weight has [384]
layers.2.blocks.5.norm1.bias has (384,), but layers.2.blocks.5.norm1.bias has [384]
layers.2.blocks.5.attn.qkv.weight has (384, 1152), but layers.2.blocks.5.attn.qkv.weight has [384, 1152]
layers.2.blocks.5.attn.qkv.bias has (1152,), but layers.2.blocks.5.attn.qkv.bias has [1152]
layers.2.blocks.5.attn.proj.weight has (384, 384), but layers.2.blocks.5.attn.proj.weight has [384, 384]
layers.2.blocks.5.attn.proj.bias has (384,), but layers.2.blocks.5.attn.proj.bias has [384]
layers.2.blocks.5.norm2.weight has (384,), but layers.2.blocks.5.norm2.weight has [384]
layers.2.blocks.5.norm2.bias has (384,), but layers.2.blocks.5.norm2.bias has [384]
layers.2.blocks.5.mlp.fc1.weight has (384, 1536), but layers.2.blocks.5.mlp.fc1.weight has [384, 1536]
layers.2.blocks.5.mlp.fc1.bias has (1536,), but layers.2.blocks.5.mlp.fc1.bias has [1536]
layers.2.blocks.5.mlp.fc2.weight has (1536, 384), but layers.2.blocks.5.mlp.fc2.weight has [1536, 384]
layers.2.blocks.5.mlp.fc2.bias has (384,), but layers.2.blocks.5.mlp.fc2.bias has [384]
layers.2.blocks.6.norm1.weight has (384,), but layers.2.blocks.6.norm1.weight has [384]
layers.2.blocks.6.norm1.bias has (384,), but layers.2.blocks.6.norm1.bias has [384]
layers.2.blocks.6.attn.qkv.weight has (384, 1152), but layers.2.blocks.6.attn.qkv.weight has [384, 1152]
layers.2.blocks.6.attn.qkv.bias has (1152,), but layers.2.blocks.6.attn.qkv.bias has [1152]
layers.2.blocks.6.attn.proj.weight has (384, 384), but layers.2.blocks.6.attn.proj.weight has [384, 384]
layers.2.blocks.6.attn.proj.bias has (384,), but layers.2.blocks.6.attn.proj.bias has [384]
layers.2.blocks.6.norm2.weight has (384,), but layers.2.blocks.6.norm2.weight has [384]
layers.2.blocks.6.norm2.bias has (384,), but layers.2.blocks.6.norm2.bias has [384]
layers.2.blocks.6.mlp.fc1.weight has (384, 1536), but layers.2.blocks.6.mlp.fc1.weight has [384, 1536]
layers.2.blocks.6.mlp.fc1.bias has (1536,), but layers.2.blocks.6.mlp.fc1.bias has [1536]
layers.2.blocks.6.mlp.fc2.weight has (1536, 384), but layers.2.blocks.6.mlp.fc2.weight has [1536, 384]
layers.2.blocks.6.mlp.fc2.bias has (384,), but layers.2.blocks.6.mlp.fc2.bias has [384]
layers.2.blocks.7.norm1.weight has (384,), but layers.2.blocks.7.norm1.weight has [384]
layers.2.blocks.7.norm1.bias has (384,), but layers.2.blocks.7.norm1.bias has [384]
layers.2.blocks.7.attn.qkv.weight has (384, 1152), but layers.2.blocks.7.attn.qkv.weight has [384, 1152]
layers.2.blocks.7.attn.qkv.bias has (1152,), but layers.2.blocks.7.attn.qkv.bias has [1152]
layers.2.blocks.7.attn.proj.weight has (384, 384), but layers.2.blocks.7.attn.proj.weight has [384, 384]
layers.2.blocks.7.attn.proj.bias has (384,), but layers.2.blocks.7.attn.proj.bias has [384]
layers.2.blocks.7.norm2.weight has (384,), but layers.2.blocks.7.norm2.weight has [384]
layers.2.blocks.7.norm2.bias has (384,), but layers.2.blocks.7.norm2.bias has [384]
layers.2.blocks.7.mlp.fc1.weight has (384, 1536), but layers.2.blocks.7.mlp.fc1.weight has [384, 1536]
layers.2.blocks.7.mlp.fc1.bias has (1536,), but layers.2.blocks.7.mlp.fc1.bias has [1536]
layers.2.blocks.7.mlp.fc2.weight has (1536, 384), but layers.2.blocks.7.mlp.fc2.weight has [1536, 384]
layers.2.blocks.7.mlp.fc2.bias has (384,), but layers.2.blocks.7.mlp.fc2.bias has [384]
layers.2.blocks.8.norm1.weight has (384,), but layers.2.blocks.8.norm1.weight has [384]
layers.2.blocks.8.norm1.bias has (384,), but layers.2.blocks.8.norm1.bias has [384]
layers.2.blocks.8.attn.qkv.weight has (384, 1152), but layers.2.blocks.8.attn.qkv.weight has [384, 1152]
layers.2.blocks.8.attn.qkv.bias has (1152,), but layers.2.blocks.8.attn.qkv.bias has [1152]
layers.2.blocks.8.attn.proj.weight has (384, 384), but layers.2.blocks.8.attn.proj.weight has [384, 384]
layers.2.blocks.8.attn.proj.bias has (384,), but layers.2.blocks.8.attn.proj.bias has [384]
layers.2.blocks.8.norm2.weight has (384,), but layers.2.blocks.8.norm2.weight has [384]
layers.2.blocks.8.norm2.bias has (384,), but layers.2.blocks.8.norm2.bias has [384]
layers.2.blocks.8.mlp.fc1.weight has (384, 1536), but layers.2.blocks.8.mlp.fc1.weight has [384, 1536]
layers.2.blocks.8.mlp.fc1.bias has (1536,), but layers.2.blocks.8.mlp.fc1.bias has [1536]
layers.2.blocks.8.mlp.fc2.weight has (1536, 384), but layers.2.blocks.8.mlp.fc2.weight has [1536, 384]
layers.2.blocks.8.mlp.fc2.bias has (384,), but layers.2.blocks.8.mlp.fc2.bias has [384]
layers.2.blocks.9.norm1.weight has (384,), but layers.2.blocks.9.norm1.weight has [384]
layers.2.blocks.9.norm1.bias has (384,), but layers.2.blocks.9.norm1.bias has [384]
layers.2.blocks.9.attn.qkv.weight has (384, 1152), but layers.2.blocks.9.attn.qkv.weight has [384, 1152]
layers.2.blocks.9.attn.qkv.bias has (1152,), but layers.2.blocks.9.attn.qkv.bias has [1152]
layers.2.blocks.9.attn.proj.weight has (384, 384), but layers.2.blocks.9.attn.proj.weight has [384, 384]
layers.2.blocks.9.attn.proj.bias has (384,), but layers.2.blocks.9.attn.proj.bias has [384]
layers.2.blocks.9.norm2.weight has (384,), but layers.2.blocks.9.norm2.weight has [384]
layers.2.blocks.9.norm2.bias has (384,), but layers.2.blocks.9.norm2.bias has [384]
layers.2.blocks.9.mlp.fc1.weight has (384, 1536), but layers.2.blocks.9.mlp.fc1.weight has [384, 1536]
layers.2.blocks.9.mlp.fc1.bias has (1536,), but layers.2.blocks.9.mlp.fc1.bias has [1536]
layers.2.blocks.9.mlp.fc2.weight has (1536, 384), but layers.2.blocks.9.mlp.fc2.weight has [1536, 384]
layers.2.blocks.9.mlp.fc2.bias has (384,), but layers.2.blocks.9.mlp.fc2.bias has [384]
layers.2.blocks.10.norm1.weight has (384,), but layers.2.blocks.10.norm1.weight has [384]
layers.2.blocks.10.norm1.bias has (384,), but layers.2.blocks.10.norm1.bias has [384]
layers.2.blocks.10.attn.qkv.weight has (384, 1152), but layers.2.blocks.10.attn.qkv.weight has [384, 1152]
layers.2.blocks.10.attn.qkv.bias has (1152,), but layers.2.blocks.10.attn.qkv.bias has [1152]
layers.2.blocks.10.attn.proj.weight has (384, 384), but layers.2.blocks.10.attn.proj.weight has [384, 384]
layers.2.blocks.10.attn.proj.bias has (384,), but layers.2.blocks.10.attn.proj.bias has [384]
layers.2.blocks.10.norm2.weight has (384,), but layers.2.blocks.10.norm2.weight has [384]
layers.2.blocks.10.norm2.bias has (384,), but layers.2.blocks.10.norm2.bias has [384]
layers.2.blocks.10.mlp.fc1.weight has (384, 1536), but layers.2.blocks.10.mlp.fc1.weight has [384, 1536]
layers.2.blocks.10.mlp.fc1.bias has (1536,), but layers.2.blocks.10.mlp.fc1.bias has [1536]
layers.2.blocks.10.mlp.fc2.weight has (1536, 384), but layers.2.blocks.10.mlp.fc2.weight has [1536, 384]
layers.2.blocks.10.mlp.fc2.bias has (384,), but layers.2.blocks.10.mlp.fc2.bias has [384]
layers.2.blocks.11.norm1.weight has (384,), but layers.2.blocks.11.norm1.weight has [384]
layers.2.blocks.11.norm1.bias has (384,), but layers.2.blocks.11.norm1.bias has [384]
layers.2.blocks.11.attn.qkv.weight has (384, 1152), but layers.2.blocks.11.attn.qkv.weight has [384, 1152]
layers.2.blocks.11.attn.qkv.bias has (1152,), but layers.2.blocks.11.attn.qkv.bias has [1152]
layers.2.blocks.11.attn.proj.weight has (384, 384), but layers.2.blocks.11.attn.proj.weight has [384, 384]
layers.2.blocks.11.attn.proj.bias has (384,), but layers.2.blocks.11.attn.proj.bias has [384]
layers.2.blocks.11.norm2.weight has (384,), but layers.2.blocks.11.norm2.weight has [384]
layers.2.blocks.11.norm2.bias has (384,), but layers.2.blocks.11.norm2.bias has [384]
layers.2.blocks.11.mlp.fc1.weight has (384, 1536), but layers.2.blocks.11.mlp.fc1.weight has [384, 1536]
layers.2.blocks.11.mlp.fc1.bias has (1536,), but layers.2.blocks.11.mlp.fc1.bias has [1536]
layers.2.blocks.11.mlp.fc2.weight has (1536, 384), but layers.2.blocks.11.mlp.fc2.weight has [1536, 384]
layers.2.blocks.11.mlp.fc2.bias has (384,), but layers.2.blocks.11.mlp.fc2.bias has [384]
layers.2.blocks.12.norm1.weight has (384,), but layers.2.blocks.12.norm1.weight has [384]
layers.2.blocks.12.norm1.bias has (384,), but layers.2.blocks.12.norm1.bias has [384]
layers.2.blocks.12.attn.qkv.weight has (384, 1152), but layers.2.blocks.12.attn.qkv.weight has [384, 1152]
layers.2.blocks.12.attn.qkv.bias has (1152,), but layers.2.blocks.12.attn.qkv.bias has [1152]
layers.2.blocks.12.attn.proj.weight has (384, 384), but layers.2.blocks.12.attn.proj.weight has [384, 384]
layers.2.blocks.12.attn.proj.bias has (384,), but layers.2.blocks.12.attn.proj.bias has [384]
layers.2.blocks.12.norm2.weight has (384,), but layers.2.blocks.12.norm2.weight has [384]
layers.2.blocks.12.norm2.bias has (384,), but layers.2.blocks.12.norm2.bias has [384]
layers.2.blocks.12.mlp.fc1.weight has (384, 1536), but layers.2.blocks.12.mlp.fc1.weight has [384, 1536]
layers.2.blocks.12.mlp.fc1.bias has (1536,), but layers.2.blocks.12.mlp.fc1.bias has [1536]
layers.2.blocks.12.mlp.fc2.weight has (1536, 384), but layers.2.blocks.12.mlp.fc2.weight has [1536, 384]
layers.2.blocks.12.mlp.fc2.bias has (384,), but layers.2.blocks.12.mlp.fc2.bias has [384]
layers.2.blocks.13.norm1.weight has (384,), but layers.2.blocks.13.norm1.weight has [384]
layers.2.blocks.13.norm1.bias has (384,), but layers.2.blocks.13.norm1.bias has [384]
layers.2.blocks.13.attn.qkv.weight has (384, 1152), but layers.2.blocks.13.attn.qkv.weight has [384, 1152]
layers.2.blocks.13.attn.qkv.bias has (1152,), but layers.2.blocks.13.attn.qkv.bias has [1152]
layers.2.blocks.13.attn.proj.weight has (384, 384), but layers.2.blocks.13.attn.proj.weight has [384, 384]
layers.2.blocks.13.attn.proj.bias has (384,), but layers.2.blocks.13.attn.proj.bias has [384]
layers.2.blocks.13.norm2.weight has (384,), but layers.2.blocks.13.norm2.weight has [384]
layers.2.blocks.13.norm2.bias has (384,), but layers.2.blocks.13.norm2.bias has [384]
layers.2.blocks.13.mlp.fc1.weight has (384, 1536), but layers.2.blocks.13.mlp.fc1.weight has [384, 1536]
layers.2.blocks.13.mlp.fc1.bias has (1536,), but layers.2.blocks.13.mlp.fc1.bias has [1536]
layers.2.blocks.13.mlp.fc2.weight has (1536, 384), but layers.2.blocks.13.mlp.fc2.weight has [1536, 384]
layers.2.blocks.13.mlp.fc2.bias has (384,), but layers.2.blocks.13.mlp.fc2.bias has [384]
layers.2.blocks.14.norm1.weight has (384,), but layers.2.blocks.14.norm1.weight has [384]
layers.2.blocks.14.norm1.bias has (384,), but layers.2.blocks.14.norm1.bias has [384]
layers.2.blocks.14.attn.qkv.weight has (384, 1152), but layers.2.blocks.14.attn.qkv.weight has [384, 1152]
layers.2.blocks.14.attn.qkv.bias has (1152,), but layers.2.blocks.14.attn.qkv.bias has [1152]
layers.2.blocks.14.attn.proj.weight has (384, 384), but layers.2.blocks.14.attn.proj.weight has [384, 384]
layers.2.blocks.14.attn.proj.bias has (384,), but layers.2.blocks.14.attn.proj.bias has [384]
layers.2.blocks.14.norm2.weight has (384,), but layers.2.blocks.14.norm2.weight has [384]
layers.2.blocks.14.norm2.bias has (384,), but layers.2.blocks.14.norm2.bias has [384]
layers.2.blocks.14.mlp.fc1.weight has (384, 1536), but layers.2.blocks.14.mlp.fc1.weight has [384, 1536]
layers.2.blocks.14.mlp.fc1.bias has (1536,), but layers.2.blocks.14.mlp.fc1.bias has [1536]
layers.2.blocks.14.mlp.fc2.weight has (1536, 384), but layers.2.blocks.14.mlp.fc2.weight has [1536, 384]
layers.2.blocks.14.mlp.fc2.bias has (384,), but layers.2.blocks.14.mlp.fc2.bias has [384]
layers.2.blocks.15.norm1.weight has (384,), but layers.2.blocks.15.norm1.weight has [384]
layers.2.blocks.15.norm1.bias has (384,), but layers.2.blocks.15.norm1.bias has [384]
layers.2.blocks.15.attn.qkv.weight has (384, 1152), but layers.2.blocks.15.attn.qkv.weight has [384, 1152]
layers.2.blocks.15.attn.qkv.bias has (1152,), but layers.2.blocks.15.attn.qkv.bias has [1152]
layers.2.blocks.15.attn.proj.weight has (384, 384), but layers.2.blocks.15.attn.proj.weight has [384, 384]
layers.2.blocks.15.attn.proj.bias has (384,), but layers.2.blocks.15.attn.proj.bias has [384]
layers.2.blocks.15.norm2.weight has (384,), but layers.2.blocks.15.norm2.weight has [384]
layers.2.blocks.15.norm2.bias has (384,), but layers.2.blocks.15.norm2.bias has [384]
layers.2.blocks.15.mlp.fc1.weight has (384, 1536), but layers.2.blocks.15.mlp.fc1.weight has [384, 1536]
layers.2.blocks.15.mlp.fc1.bias has (1536,), but layers.2.blocks.15.mlp.fc1.bias has [1536]
layers.2.blocks.15.mlp.fc2.weight has (1536, 384), but layers.2.blocks.15.mlp.fc2.weight has [1536, 384]
layers.2.blocks.15.mlp.fc2.bias has (384,), but layers.2.blocks.15.mlp.fc2.bias has [384]
layers.2.blocks.16.norm1.weight has (384,), but layers.2.blocks.16.norm1.weight has [384]
layers.2.blocks.16.norm1.bias has (384,), but layers.2.blocks.16.norm1.bias has [384]
layers.2.blocks.16.attn.qkv.weight has (384, 1152), but layers.2.blocks.16.attn.qkv.weight has [384, 1152]
layers.2.blocks.16.attn.qkv.bias has (1152,), but layers.2.blocks.16.attn.qkv.bias has [1152]
layers.2.blocks.16.attn.proj.weight has (384, 384), but layers.2.blocks.16.attn.proj.weight has [384, 384]
layers.2.blocks.16.attn.proj.bias has (384,), but layers.2.blocks.16.attn.proj.bias has [384]
layers.2.blocks.16.norm2.weight has (384,), but layers.2.blocks.16.norm2.weight has [384]
layers.2.blocks.16.norm2.bias has (384,), but layers.2.blocks.16.norm2.bias has [384]
layers.2.blocks.16.mlp.fc1.weight has (384, 1536), but layers.2.blocks.16.mlp.fc1.weight has [384, 1536]
layers.2.blocks.16.mlp.fc1.bias has (1536,), but layers.2.blocks.16.mlp.fc1.bias has [1536]
layers.2.blocks.16.mlp.fc2.weight has (1536, 384), but layers.2.blocks.16.mlp.fc2.weight has [1536, 384]
layers.2.blocks.16.mlp.fc2.bias has (384,), but layers.2.blocks.16.mlp.fc2.bias has [384]
layers.2.blocks.17.norm1.weight has (384,), but layers.2.blocks.17.norm1.weight has [384]
layers.2.blocks.17.norm1.bias has (384,), but layers.2.blocks.17.norm1.bias has [384]
layers.2.blocks.17.attn.qkv.weight has (384, 1152), but layers.2.blocks.17.attn.qkv.weight has [384, 1152]
layers.2.blocks.17.attn.qkv.bias has (1152,), but layers.2.blocks.17.attn.qkv.bias has [1152]
layers.2.blocks.17.attn.proj.weight has (384, 384), but layers.2.blocks.17.attn.proj.weight has [384, 384]
layers.2.blocks.17.attn.proj.bias has (384,), but layers.2.blocks.17.attn.proj.bias has [384]
layers.2.blocks.17.norm2.weight has (384,), but layers.2.blocks.17.norm2.weight has [384]
layers.2.blocks.17.norm2.bias has (384,), but layers.2.blocks.17.norm2.bias has [384]
layers.2.blocks.17.mlp.fc1.weight has (384, 1536), but layers.2.blocks.17.mlp.fc1.weight has [384, 1536]
layers.2.blocks.17.mlp.fc1.bias has (1536,), but layers.2.blocks.17.mlp.fc1.bias has [1536]
layers.2.blocks.17.mlp.fc2.weight has (1536, 384), but layers.2.blocks.17.mlp.fc2.weight has [1536, 384]
layers.2.blocks.17.mlp.fc2.bias has (384,), but layers.2.blocks.17.mlp.fc2.bias has [384]
layers.2.downsample.norm.weight has (1536,), but layers.2.downsample.norm.weight has [1536]
layers.2.downsample.norm.bias has (1536,), but layers.2.downsample.norm.bias has [1536]
layers.3.blocks.0.norm1.weight has (768,), but layers.3.blocks.0.norm1.weight has [768]
layers.3.blocks.0.norm1.bias has (768,), but layers.3.blocks.0.norm1.bias has [768]
layers.3.blocks.0.attn.qkv.weight has (768, 2304), but layers.3.blocks.0.attn.qkv.weight has [768, 2304]
layers.3.blocks.0.attn.qkv.bias has (2304,), but layers.3.blocks.0.attn.qkv.bias has [2304]
layers.3.blocks.0.attn.proj.weight has (768, 768), but layers.3.blocks.0.attn.proj.weight has [768, 768]
layers.3.blocks.0.attn.proj.bias has (768,), but layers.3.blocks.0.attn.proj.bias has [768]
layers.3.blocks.0.norm2.weight has (768,), but layers.3.blocks.0.norm2.weight has [768]
layers.3.blocks.0.norm2.bias has (768,), but layers.3.blocks.0.norm2.bias has [768]
layers.3.blocks.0.mlp.fc1.weight has (768, 3072), but layers.3.blocks.0.mlp.fc1.weight has [768, 3072]
layers.3.blocks.0.mlp.fc1.bias has (3072,), but layers.3.blocks.0.mlp.fc1.bias has [3072]
layers.3.blocks.0.mlp.fc2.weight has (3072, 768), but layers.3.blocks.0.mlp.fc2.weight has [3072, 768]
layers.3.blocks.0.mlp.fc2.bias has (768,), but layers.3.blocks.0.mlp.fc2.bias has [768]
layers.3.blocks.1.norm1.weight has (768,), but layers.3.blocks.1.norm1.weight has [768]
layers.3.blocks.1.norm1.bias has (768,), but layers.3.blocks.1.norm1.bias has [768]
layers.3.blocks.1.attn.qkv.weight has (768, 2304), but layers.3.blocks.1.attn.qkv.weight has [768, 2304]
layers.3.blocks.1.attn.qkv.bias has (2304,), but layers.3.blocks.1.attn.qkv.bias has [2304]
layers.3.blocks.1.attn.proj.weight has (768, 768), but layers.3.blocks.1.attn.proj.weight has [768, 768]
layers.3.blocks.1.attn.proj.bias has (768,), but layers.3.blocks.1.attn.proj.bias has [768]
layers.3.blocks.1.norm2.weight has (768,), but layers.3.blocks.1.norm2.weight has [768]
layers.3.blocks.1.norm2.bias has (768,), but layers.3.blocks.1.norm2.bias has [768]
layers.3.blocks.1.mlp.fc1.weight has (768, 3072), but layers.3.blocks.1.mlp.fc1.weight has [768, 3072]
layers.3.blocks.1.mlp.fc1.bias has (3072,), but layers.3.blocks.1.mlp.fc1.bias has [3072]
layers.3.blocks.1.mlp.fc2.weight has (3072, 768), but layers.3.blocks.1.mlp.fc2.weight has [3072, 768]
layers.3.blocks.1.mlp.fc2.bias has (768,), but layers.3.blocks.1.mlp.fc2.bias has [768]
layers.0.blocks.0.attn.relative_position_index has (49, 49), but layers.0.blocks.0.attn.relative_position_index has [49, 49]
layers.0.blocks.1.attn.relative_position_index has (49, 49), but layers.0.blocks.1.attn.relative_position_index has [49, 49]
layers.1.blocks.0.attn.relative_position_index has (49, 49), but layers.1.blocks.0.attn.relative_position_index has [49, 49]
layers.1.blocks.1.attn.relative_position_index has (49, 49), but layers.1.blocks.1.attn.relative_position_index has [49, 49]
layers.2.blocks.0.attn.relative_position_index has (49, 49), but layers.2.blocks.0.attn.relative_position_index has [49, 49]
layers.2.blocks.1.attn.relative_position_index has (49, 49), but layers.2.blocks.1.attn.relative_position_index has [49, 49]
layers.2.blocks.2.attn.relative_position_index has (49, 49), but layers.2.blocks.2.attn.relative_position_index has [49, 49]
layers.2.blocks.3.attn.relative_position_index has (49, 49), but layers.2.blocks.3.attn.relative_position_index has [49, 49]
layers.2.blocks.4.attn.relative_position_index has (49, 49), but layers.2.blocks.4.attn.relative_position_index has [49, 49]
layers.2.blocks.5.attn.relative_position_index has (49, 49), but layers.2.blocks.5.attn.relative_position_index has [49, 49]
layers.2.blocks.6.attn.relative_position_index has (49, 49), but layers.2.blocks.6.attn.relative_position_index has [49, 49]
layers.2.blocks.7.attn.relative_position_index has (49, 49), but layers.2.blocks.7.attn.relative_position_index has [49, 49]
layers.2.blocks.8.attn.relative_position_index has (49, 49), but layers.2.blocks.8.attn.relative_position_index has [49, 49]
layers.2.blocks.9.attn.relative_position_index has (49, 49), but layers.2.blocks.9.attn.relative_position_index has [49, 49]
layers.2.blocks.10.attn.relative_position_index has (49, 49), but layers.2.blocks.10.attn.relative_position_index has [49, 49]
layers.2.blocks.11.attn.relative_position_index has (49, 49), but layers.2.blocks.11.attn.relative_position_index has [49, 49]
layers.2.blocks.12.attn.relative_position_index has (49, 49), but layers.2.blocks.12.attn.relative_position_index has [49, 49]
layers.2.blocks.13.attn.relative_position_index has (49, 49), but layers.2.blocks.13.attn.relative_position_index has [49, 49]
layers.2.blocks.14.attn.relative_position_index has (49, 49), but layers.2.blocks.14.attn.relative_position_index has [49, 49]
layers.2.blocks.15.attn.relative_position_index has (49, 49), but layers.2.blocks.15.attn.relative_position_index has [49, 49]
layers.2.blocks.16.attn.relative_position_index has (49, 49), but layers.2.blocks.16.attn.relative_position_index has [49, 49]
layers.2.blocks.17.attn.relative_position_index has (49, 49), but layers.2.blocks.17.attn.relative_position_index has [49, 49]
layers.3.blocks.0.attn.relative_position_index has (49, 49), but layers.3.blocks.0.attn.relative_position_index has [49, 49]
layers.3.blocks.1.attn.relative_position_index has (49, 49), but layers.3.blocks.1.attn.relative_position_index has [49, 49]
layers.0.blocks.0.attn.relative_position_bias_table has (169, 3), but layers.0.blocks.0.attn.relative_position_bias_table has [169, 3]
layers.0.blocks.1.attn.relative_position_bias_table has (169, 3), but layers.0.blocks.1.attn.relative_position_bias_table has [169, 3]
layers.1.blocks.0.attn.relative_position_bias_table has (169, 6), but layers.1.blocks.0.attn.relative_position_bias_table has [169, 6]
layers.1.blocks.1.attn.relative_position_bias_table has (169, 6), but layers.1.blocks.1.attn.relative_position_bias_table has [169, 6]
layers.2.blocks.0.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.0.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.1.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.1.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.2.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.2.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.3.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.3.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.4.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.4.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.5.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.5.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.6.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.6.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.7.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.7.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.8.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.8.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.9.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.9.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.10.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.10.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.11.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.11.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.12.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.12.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.13.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.13.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.14.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.14.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.15.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.15.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.16.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.16.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.17.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.17.attn.relative_position_bias_table has [169, 12]
layers.3.blocks.0.attn.relative_position_bias_table has (169, 24), but layers.3.blocks.0.attn.relative_position_bias_table has [169, 24]
layers.3.blocks.1.attn.relative_position_bias_table has (169, 24), but layers.3.blocks.1.attn.relative_position_bias_table has [169, 24]
layers.0.downsample.reduction.weight has (384, 192), but layers.0.downsample.reduction.weight has [384, 192]
layers.1.downsample.reduction.weight has (768, 384), but layers.1.downsample.reduction.weight has [768, 384]
layers.2.downsample.reduction.weight has (1536, 768), but layers.2.downsample.reduction.weight has [1536, 768]
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
[07/30 13:36:08 ufo]: Model:
MultiTaskBatchFuse(
  (backbone): SwinTransformer_small_patch4_window7_224_maskformer(
    (patch_embed): PatchEmbed(
      (proj): Conv2D(3, 96, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
      (norm): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    )
    (pos_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
    (layers): LayerList(
      (0): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): Identity()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=96, out_features=288, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=96, out_features=96, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[96], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=96, out_features=384, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=384, out_features=96, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=384, out_features=192, dtype=float32)
          (norm): LayerNorm(normalized_shape=[384], epsilon=1e-05)
        )
      )
      (1): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=192, out_features=576, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=192, out_features=192, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[192], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=192, out_features=768, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=768, out_features=192, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=768, out_features=384, dtype=float32)
          (norm): LayerNorm(normalized_shape=[768], epsilon=1e-05)
        )
      )
      (2): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (2): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (3): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (4): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (5): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (6): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (7): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (8): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (9): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (10): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (11): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (12): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (13): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (14): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (15): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (16): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (17): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=384, out_features=1152, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=384, out_features=384, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=384, out_features=1536, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=1536, out_features=384, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
        (downsample): PatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, dtype=float32)
          (norm): LayerNorm(normalized_shape=[1536], epsilon=1e-05)
        )
      )
      (3): BasicLayer(
        (blocks): LayerList(
          (0): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
          (1): SwinTransformerBlock(
            (norm1): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (attn): WindowAttention(
              (qkv): Linear(in_features=768, out_features=2304, dtype=float32)
              (attn_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (proj): Linear(in_features=768, out_features=768, dtype=float32)
              (proj_drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (softmax): Softmax(axis=-1)
            )
            (drop_path): DropPath()
            (norm2): LayerNorm(normalized_shape=[768], epsilon=1e-05)
            (mlp): Mlp(
              (fc1): Linear(in_features=768, out_features=3072, dtype=float32)
              (act): GELU(approximate=False)
              (fc2): Linear(in_features=3072, out_features=768, dtype=float32)
              (drop): Dropout(p=0.0, axis=None, mode=upscale_in_train)
            )
          )
        )
      )
    )
    (norm0): LayerNorm(normalized_shape=[96], epsilon=1e-05)
    (norm1): LayerNorm(normalized_shape=[192], epsilon=1e-05)
    (norm2): LayerNorm(normalized_shape=[384], epsilon=1e-05)
    (norm3): LayerNorm(normalized_shape=[768], epsilon=1e-05)
  )
  (heads): LayerDict(
    (segmentation): MaskFormer(
      (loss): MaskFormerLoss(
        (matcher): HungarianMatcher()
      )
      (seghead): MaskFormerHead(
        (pixel_decoder): BasePixelDecoder(
          (lateral_convs): LayerList(
            (0): None
            (1): ConvNormAct(
              (_conv): Conv2D(384, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (2): ConvNormAct(
              (_conv): Conv2D(192, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
            (3): ConvNormAct(
              (_conv): Conv2D(96, 256, kernel_size=[1, 1], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
            )
          )
          (output_convs): LayerList(
            (0): ConvNormAct(
              (_conv): Conv2D(768, 256, kernel_size=[3, 3], padding=same, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (1): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (2): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
            (3): ConvNormAct(
              (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
              (_norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
              (_act): Activation(
                (act_func): ReLU()
              )
            )
          )
          (mask_features): ConvNormAct(
            (_conv): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (predictor): TransformerPredictor(
          (pe_layer): PositionEmbeddingSine()
          (transformer): Transformer(
            (encoder): TransformerEncoder(
              (layers): LayerList()
            )
            (decoder): TransformerDecoder(
              (decoder_list): LayerList(
                (0): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (1): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (2): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (3): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (4): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
                (5): DecoderLayer(
                  (self_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (multihead_attn): MultiHeadAttention(
                    (q_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (k_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (v_proj): Linear(in_features=256, out_features=256, dtype=float32)
                    (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
                  )
                  (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
                  (dropout): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
                  (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
                  (dropout1): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout2): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (dropout3): Dropout(p=0.1, axis=None, mode=upscale_in_train)
                  (activation): ReLU()
                )
              )
              (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (query_embed): Embedding(100, 256, sparse=False)
          (input_proj): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
          (class_embed): Linear(in_features=256, out_features=20, dtype=float32)
          (mask_embed): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=256, dtype=float32)
            )
          )
        )
      )
    )
    (fgvc): SwinClsHead(
      (avg_pool): AdaptiveAvgPool2D(output_size=1)
      (conv16_32): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(384, 384, kernel_size=[3, 3], stride=[2, 2], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=384, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv1): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(1152, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (conv2): ConvBNLayer(
        (_pool2d_avg): AvgPool2D(kernel_size=2, stride=2, padding=0)
        (_conv): Conv2D(768, 768, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (_batch_norm): SyncBatchNorm(num_features=768, momentum=0.9, epsilon=1e-05)
        (_act_op): Activation(
          (act_func): ReLU()
        )
      )
      (fc1): Linear(in_features=768, out_features=384, dtype=float32)
      (fc2): Linear(in_features=384, out_features=196, dtype=float32)
      (flatten): Flatten()
      (cbam): CBAM_Module(
        (avg_pool): AdaptiveAvgPool2D(output_size=1)
        (max_pool): AdaptiveMaxPool2D(output_size=1, return_mask=False)
        (fc1): Conv2D(768, 48, kernel_size=[1, 1], data_format=NCHW)
        (relu): ReLU()
        (fc2): Conv2D(48, 768, kernel_size=[1, 1], data_format=NCHW)
        (sigmoid_channel): Sigmoid()
        (conv_after_concat): Conv2D(2, 1, kernel_size=[7, 7], padding=3, data_format=NCHW)
        (sigmoid_spatial): Sigmoid()
      )
    )
    (trafficsign): DETR(
      (transformer): DINOTransformer(
        (input_proj): LayerList(
          (0): Sequential(
            (conv): Conv2D(96, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (1): Sequential(
            (conv): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (2): Sequential(
            (conv): Conv2D(384, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
          (3): Sequential(
            (conv): Conv2D(768, 256, kernel_size=[1, 1], data_format=NCHW)
            (norm): GroupNorm(num_groups=32, num_channels=256, epsilon=1e-05)
          )
        )
        (encoder): DINOTransformerEncoder(
          (layers): LayerList(
            (0): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerEncoderLayer(
              (self_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
        )
        (decoder): DINOTransformerDecoder(
          (layers): LayerList(
            (0): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (1): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (2): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (3): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (4): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
            (5): DINOTransformerDecoderLayer(
              (self_attn): MultiHeadAttention(
                (out_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout1): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (cross_attn): MSDeformableAttention(
                (sampling_offsets): Linear(in_features=256, out_features=256, dtype=float32)
                (attention_weights): Linear(in_features=256, out_features=128, dtype=float32)
                (value_proj): Linear(in_features=256, out_features=256, dtype=float32)
                (output_proj): Linear(in_features=256, out_features=256, dtype=float32)
              )
              (dropout2): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm2): LayerNorm(normalized_shape=[256], epsilon=1e-05)
              (linear1): Linear(in_features=256, out_features=2048, dtype=float32)
              (dropout3): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (linear2): Linear(in_features=2048, out_features=256, dtype=float32)
              (dropout4): Dropout(p=0.0, axis=None, mode=upscale_in_train)
              (norm3): LayerNorm(normalized_shape=[256], epsilon=1e-05)
            )
          )
          (norm): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (denoising_class_embed): Embedding(45, 256, sparse=False)
        (position_embedding): PositionEmbedding()
        (level_embed): Embedding(4, 256, sparse=False)
        (tgt_embed): Embedding(900, 256, sparse=False)
        (query_pos_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=512, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
          )
        )
        (enc_output): Sequential(
          (0): Linear(in_features=256, out_features=256, dtype=float32)
          (1): LayerNorm(normalized_shape=[256], epsilon=1e-05)
        )
        (enc_score_head): Linear(in_features=256, out_features=45, dtype=float32)
        (enc_bbox_head): MLP(
          (layers): LayerList(
            (0): Linear(in_features=256, out_features=256, dtype=float32)
            (1): Linear(in_features=256, out_features=256, dtype=float32)
            (2): Linear(in_features=256, out_features=4, dtype=float32)
          )
        )
        (dec_score_head): LayerList(
          (0): Linear(in_features=256, out_features=45, dtype=float32)
          (1): Linear(in_features=256, out_features=45, dtype=float32)
          (2): Linear(in_features=256, out_features=45, dtype=float32)
          (3): Linear(in_features=256, out_features=45, dtype=float32)
          (4): Linear(in_features=256, out_features=45, dtype=float32)
          (5): Linear(in_features=256, out_features=45, dtype=float32)
        )
        (dec_bbox_head): LayerList(
          (0): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (1): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (2): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (3): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (4): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
          (5): MLP(
            (layers): LayerList(
              (0): Linear(in_features=256, out_features=256, dtype=float32)
              (1): Linear(in_features=256, out_features=256, dtype=float32)
              (2): Linear(in_features=256, out_features=4, dtype=float32)
            )
          )
        )
      )
      (detr_head): DINOHead(
        (loss): DINOLoss(
          (matcher): HungarianMatcher()
        )
      )
    )
  )
)
[07/30 13:36:09 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690695384 (unix time) try "date -d @1690695384" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x2f03) received by PID 12074 (TID 0x7f7d04561240) from PID 12035 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0730 13:37:02.545316 21226 tcp_utils.cc:107] Retry to connect to 172.17.0.7:61840 while the server is not yet listening.
I0730 13:37:05.545629 21226 tcp_utils.cc:130] Successfully connected to 172.17.0.7:61840
W0730 13:37:08.791967 21226 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:37:08.792757 21226 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[07/30 13:37:10 ufo]: Rank of current process: 0. World size: 1
[07/30 13:37:14 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:37:14 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:37:14 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608, 640,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;242m# 416, 448, 480, 512, 544, 576, 608,640, 672, 704, 736,[39m
[38;5;15m                                                [39m[38;5;242m# 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, [39m
[38;5;15m                                                [39m[38;5;242m# 1088,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m200[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m3[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:37:14 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f3bea3fc2e0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.42s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:37:20 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:37:21 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 5250, 'max_to_keep': 15}, 'eval_period': 5250, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f3beb54a040>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f3beb5558b0>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f3beb55a310>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f3beb1d18b0>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f3beb1d1940>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f3beb1d54c0>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f3beb1d5430>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f3beb555940>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f3beb5558b0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f3beb55a310>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f3beb1c9b80>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f3beb753d30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f3beb1d54c0>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f3beb1d5430>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 200, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f3cd3ee8670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f3cd3ee85e0>}}
patch_embed.proj.weight has [96, 3, 4, 4], but patch_embed.proj.weight has (96, 3, 4, 4)
patch_embed.proj.bias has [96], but patch_embed.proj.bias has (96,)
patch_embed.norm.weight has [96], but patch_embed.norm.weight has (96,)
patch_embed.norm.bias has [96], but patch_embed.norm.bias has (96,)
layers.0.blocks.0.norm1.weight has [96], but layers.0.blocks.0.norm1.weight has (96,)
layers.0.blocks.0.norm1.bias has [96], but layers.0.blocks.0.norm1.bias has (96,)
layers.0.blocks.0.attn.relative_position_bias_table has [169, 3], but layers.0.blocks.0.attn.relative_position_bias_table has (169, 3)
layers.0.blocks.0.attn.relative_position_index has [49, 49], but layers.0.blocks.0.attn.relative_position_index has (49, 49)
layers.0.blocks.0.attn.qkv.weight has [96, 288], but layers.0.blocks.0.attn.qkv.weight has (96, 288)
layers.0.blocks.0.attn.qkv.bias has [288], but layers.0.blocks.0.attn.qkv.bias has (288,)
layers.0.blocks.0.attn.proj.weight has [96, 96], but layers.0.blocks.0.attn.proj.weight has (96, 96)
layers.0.blocks.0.attn.proj.bias has [96], but layers.0.blocks.0.attn.proj.bias has (96,)
layers.0.blocks.0.norm2.weight has [96], but layers.0.blocks.0.norm2.weight has (96,)
layers.0.blocks.0.norm2.bias has [96], but layers.0.blocks.0.norm2.bias has (96,)
layers.0.blocks.0.mlp.fc1.weight has [96, 384], but layers.0.blocks.0.mlp.fc1.weight has (96, 384)
layers.0.blocks.0.mlp.fc1.bias has [384], but layers.0.blocks.0.mlp.fc1.bias has (384,)
layers.0.blocks.0.mlp.fc2.weight has [384, 96], but layers.0.blocks.0.mlp.fc2.weight has (384, 96)
layers.0.blocks.0.mlp.fc2.bias has [96], but layers.0.blocks.0.mlp.fc2.bias has (96,)
layers.0.blocks.1.norm1.weight has [96], but layers.0.blocks.1.norm1.weight has (96,)
layers.0.blocks.1.norm1.bias has [96], but layers.0.blocks.1.norm1.bias has (96,)
layers.0.blocks.1.attn.relative_position_bias_table has [169, 3], but layers.0.blocks.1.attn.relative_position_bias_table has (169, 3)
layers.0.blocks.1.attn.relative_position_index has [49, 49], but layers.0.blocks.1.attn.relative_position_index has (49, 49)
layers.0.blocks.1.attn.qkv.weight has [96, 288], but layers.0.blocks.1.attn.qkv.weight has (96, 288)
layers.0.blocks.1.attn.qkv.bias has [288], but layers.0.blocks.1.attn.qkv.bias has (288,)
layers.0.blocks.1.attn.proj.weight has [96, 96], but layers.0.blocks.1.attn.proj.weight has (96, 96)
layers.0.blocks.1.attn.proj.bias has [96], but layers.0.blocks.1.attn.proj.bias has (96,)
layers.0.blocks.1.norm2.weight has [96], but layers.0.blocks.1.norm2.weight has (96,)
layers.0.blocks.1.norm2.bias has [96], but layers.0.blocks.1.norm2.bias has (96,)
layers.0.blocks.1.mlp.fc1.weight has [96, 384], but layers.0.blocks.1.mlp.fc1.weight has (96, 384)
layers.0.blocks.1.mlp.fc1.bias has [384], but layers.0.blocks.1.mlp.fc1.bias has (384,)
layers.0.blocks.1.mlp.fc2.weight has [384, 96], but layers.0.blocks.1.mlp.fc2.weight has (384, 96)
layers.0.blocks.1.mlp.fc2.bias has [96], but layers.0.blocks.1.mlp.fc2.bias has (96,)
layers.0.downsample.reduction.weight has [384, 192], but layers.0.downsample.reduction.weight has (384, 192)
layers.0.downsample.norm.weight has [384], but layers.0.downsample.norm.weight has (384,)
layers.0.downsample.norm.bias has [384], but layers.0.downsample.norm.bias has (384,)
layers.1.blocks.0.norm1.weight has [192], but layers.1.blocks.0.norm1.weight has (192,)
layers.1.blocks.0.norm1.bias has [192], but layers.1.blocks.0.norm1.bias has (192,)
layers.1.blocks.0.attn.relative_position_bias_table has [169, 6], but layers.1.blocks.0.attn.relative_position_bias_table has (169, 6)
layers.1.blocks.0.attn.relative_position_index has [49, 49], but layers.1.blocks.0.attn.relative_position_index has (49, 49)
layers.1.blocks.0.attn.qkv.weight has [192, 576], but layers.1.blocks.0.attn.qkv.weight has (192, 576)
layers.1.blocks.0.attn.qkv.bias has [576], but layers.1.blocks.0.attn.qkv.bias has (576,)
layers.1.blocks.0.attn.proj.weight has [192, 192], but layers.1.blocks.0.attn.proj.weight has (192, 192)
layers.1.blocks.0.attn.proj.bias has [192], but layers.1.blocks.0.attn.proj.bias has (192,)
layers.1.blocks.0.norm2.weight has [192], but layers.1.blocks.0.norm2.weight has (192,)
layers.1.blocks.0.norm2.bias has [192], but layers.1.blocks.0.norm2.bias has (192,)
layers.1.blocks.0.mlp.fc1.weight has [192, 768], but layers.1.blocks.0.mlp.fc1.weight has (192, 768)
layers.1.blocks.0.mlp.fc1.bias has [768], but layers.1.blocks.0.mlp.fc1.bias has (768,)
layers.1.blocks.0.mlp.fc2.weight has [768, 192], but layers.1.blocks.0.mlp.fc2.weight has (768, 192)
layers.1.blocks.0.mlp.fc2.bias has [192], but layers.1.blocks.0.mlp.fc2.bias has (192,)
layers.1.blocks.1.norm1.weight has [192], but layers.1.blocks.1.norm1.weight has (192,)
layers.1.blocks.1.norm1.bias has [192], but layers.1.blocks.1.norm1.bias has (192,)
layers.1.blocks.1.attn.relative_position_bias_table has [169, 6], but layers.1.blocks.1.attn.relative_position_bias_table has (169, 6)
layers.1.blocks.1.attn.relative_position_index has [49, 49], but layers.1.blocks.1.attn.relative_position_index has (49, 49)
layers.1.blocks.1.attn.qkv.weight has [192, 576], but layers.1.blocks.1.attn.qkv.weight has (192, 576)
layers.1.blocks.1.attn.qkv.bias has [576], but layers.1.blocks.1.attn.qkv.bias has (576,)
layers.1.blocks.1.attn.proj.weight has [192, 192], but layers.1.blocks.1.attn.proj.weight has (192, 192)
layers.1.blocks.1.attn.proj.bias has [192], but layers.1.blocks.1.attn.proj.bias has (192,)
layers.1.blocks.1.norm2.weight has [192], but layers.1.blocks.1.norm2.weight has (192,)
layers.1.blocks.1.norm2.bias has [192], but layers.1.blocks.1.norm2.bias has (192,)
layers.1.blocks.1.mlp.fc1.weight has [192, 768], but layers.1.blocks.1.mlp.fc1.weight has (192, 768)
layers.1.blocks.1.mlp.fc1.bias has [768], but layers.1.blocks.1.mlp.fc1.bias has (768,)
layers.1.blocks.1.mlp.fc2.weight has [768, 192], but layers.1.blocks.1.mlp.fc2.weight has (768, 192)
layers.1.blocks.1.mlp.fc2.bias has [192], but layers.1.blocks.1.mlp.fc2.bias has (192,)
layers.1.downsample.reduction.weight has [768, 384], but layers.1.downsample.reduction.weight has (768, 384)
layers.1.downsample.norm.weight has [768], but layers.1.downsample.norm.weight has (768,)
layers.1.downsample.norm.bias has [768], but layers.1.downsample.norm.bias has (768,)
layers.2.blocks.0.norm1.weight has [384], but layers.2.blocks.0.norm1.weight has (384,)
layers.2.blocks.0.norm1.bias has [384], but layers.2.blocks.0.norm1.bias has (384,)
layers.2.blocks.0.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.0.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.0.attn.relative_position_index has [49, 49], but layers.2.blocks.0.attn.relative_position_index has (49, 49)
layers.2.blocks.0.attn.qkv.weight has [384, 1152], but layers.2.blocks.0.attn.qkv.weight has (384, 1152)
layers.2.blocks.0.attn.qkv.bias has [1152], but layers.2.blocks.0.attn.qkv.bias has (1152,)
layers.2.blocks.0.attn.proj.weight has [384, 384], but layers.2.blocks.0.attn.proj.weight has (384, 384)
layers.2.blocks.0.attn.proj.bias has [384], but layers.2.blocks.0.attn.proj.bias has (384,)
layers.2.blocks.0.norm2.weight has [384], but layers.2.blocks.0.norm2.weight has (384,)
layers.2.blocks.0.norm2.bias has [384], but layers.2.blocks.0.norm2.bias has (384,)
layers.2.blocks.0.mlp.fc1.weight has [384, 1536], but layers.2.blocks.0.mlp.fc1.weight has (384, 1536)
layers.2.blocks.0.mlp.fc1.bias has [1536], but layers.2.blocks.0.mlp.fc1.bias has (1536,)
layers.2.blocks.0.mlp.fc2.weight has [1536, 384], but layers.2.blocks.0.mlp.fc2.weight has (1536, 384)
layers.2.blocks.0.mlp.fc2.bias has [384], but layers.2.blocks.0.mlp.fc2.bias has (384,)
layers.2.blocks.1.norm1.weight has [384], but layers.2.blocks.1.norm1.weight has (384,)
layers.2.blocks.1.norm1.bias has [384], but layers.2.blocks.1.norm1.bias has (384,)
layers.2.blocks.1.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.1.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.1.attn.relative_position_index has [49, 49], but layers.2.blocks.1.attn.relative_position_index has (49, 49)
layers.2.blocks.1.attn.qkv.weight has [384, 1152], but layers.2.blocks.1.attn.qkv.weight has (384, 1152)
layers.2.blocks.1.attn.qkv.bias has [1152], but layers.2.blocks.1.attn.qkv.bias has (1152,)
layers.2.blocks.1.attn.proj.weight has [384, 384], but layers.2.blocks.1.attn.proj.weight has (384, 384)
layers.2.blocks.1.attn.proj.bias has [384], but layers.2.blocks.1.attn.proj.bias has (384,)
layers.2.blocks.1.norm2.weight has [384], but layers.2.blocks.1.norm2.weight has (384,)
layers.2.blocks.1.norm2.bias has [384], but layers.2.blocks.1.norm2.bias has (384,)
layers.2.blocks.1.mlp.fc1.weight has [384, 1536], but layers.2.blocks.1.mlp.fc1.weight has (384, 1536)
layers.2.blocks.1.mlp.fc1.bias has [1536], but layers.2.blocks.1.mlp.fc1.bias has (1536,)
layers.2.blocks.1.mlp.fc2.weight has [1536, 384], but layers.2.blocks.1.mlp.fc2.weight has (1536, 384)
layers.2.blocks.1.mlp.fc2.bias has [384], but layers.2.blocks.1.mlp.fc2.bias has (384,)
layers.2.blocks.2.norm1.weight has [384], but layers.2.blocks.2.norm1.weight has (384,)
layers.2.blocks.2.norm1.bias has [384], but layers.2.blocks.2.norm1.bias has (384,)
layers.2.blocks.2.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.2.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.2.attn.relative_position_index has [49, 49], but layers.2.blocks.2.attn.relative_position_index has (49, 49)
layers.2.blocks.2.attn.qkv.weight has [384, 1152], but layers.2.blocks.2.attn.qkv.weight has (384, 1152)
layers.2.blocks.2.attn.qkv.bias has [1152], but layers.2.blocks.2.attn.qkv.bias has (1152,)
layers.2.blocks.2.attn.proj.weight has [384, 384], but layers.2.blocks.2.attn.proj.weight has (384, 384)
layers.2.blocks.2.attn.proj.bias has [384], but layers.2.blocks.2.attn.proj.bias has (384,)
layers.2.blocks.2.norm2.weight has [384], but layers.2.blocks.2.norm2.weight has (384,)
layers.2.blocks.2.norm2.bias has [384], but layers.2.blocks.2.norm2.bias has (384,)
layers.2.blocks.2.mlp.fc1.weight has [384, 1536], but layers.2.blocks.2.mlp.fc1.weight has (384, 1536)
layers.2.blocks.2.mlp.fc1.bias has [1536], but layers.2.blocks.2.mlp.fc1.bias has (1536,)
layers.2.blocks.2.mlp.fc2.weight has [1536, 384], but layers.2.blocks.2.mlp.fc2.weight has (1536, 384)
layers.2.blocks.2.mlp.fc2.bias has [384], but layers.2.blocks.2.mlp.fc2.bias has (384,)
layers.2.blocks.3.norm1.weight has [384], but layers.2.blocks.3.norm1.weight has (384,)
layers.2.blocks.3.norm1.bias has [384], but layers.2.blocks.3.norm1.bias has (384,)
layers.2.blocks.3.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.3.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.3.attn.relative_position_index has [49, 49], but layers.2.blocks.3.attn.relative_position_index has (49, 49)
layers.2.blocks.3.attn.qkv.weight has [384, 1152], but layers.2.blocks.3.attn.qkv.weight has (384, 1152)
layers.2.blocks.3.attn.qkv.bias has [1152], but layers.2.blocks.3.attn.qkv.bias has (1152,)
layers.2.blocks.3.attn.proj.weight has [384, 384], but layers.2.blocks.3.attn.proj.weight has (384, 384)
layers.2.blocks.3.attn.proj.bias has [384], but layers.2.blocks.3.attn.proj.bias has (384,)
layers.2.blocks.3.norm2.weight has [384], but layers.2.blocks.3.norm2.weight has (384,)
layers.2.blocks.3.norm2.bias has [384], but layers.2.blocks.3.norm2.bias has (384,)
layers.2.blocks.3.mlp.fc1.weight has [384, 1536], but layers.2.blocks.3.mlp.fc1.weight has (384, 1536)
layers.2.blocks.3.mlp.fc1.bias has [1536], but layers.2.blocks.3.mlp.fc1.bias has (1536,)
layers.2.blocks.3.mlp.fc2.weight has [1536, 384], but layers.2.blocks.3.mlp.fc2.weight has (1536, 384)
layers.2.blocks.3.mlp.fc2.bias has [384], but layers.2.blocks.3.mlp.fc2.bias has (384,)
layers.2.blocks.4.norm1.weight has [384], but layers.2.blocks.4.norm1.weight has (384,)
layers.2.blocks.4.norm1.bias has [384], but layers.2.blocks.4.norm1.bias has (384,)
layers.2.blocks.4.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.4.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.4.attn.relative_position_index has [49, 49], but layers.2.blocks.4.attn.relative_position_index has (49, 49)
layers.2.blocks.4.attn.qkv.weight has [384, 1152], but layers.2.blocks.4.attn.qkv.weight has (384, 1152)
layers.2.blocks.4.attn.qkv.bias has [1152], but layers.2.blocks.4.attn.qkv.bias has (1152,)
layers.2.blocks.4.attn.proj.weight has [384, 384], but layers.2.blocks.4.attn.proj.weight has (384, 384)
layers.2.blocks.4.attn.proj.bias has [384], but layers.2.blocks.4.attn.proj.bias has (384,)
layers.2.blocks.4.norm2.weight has [384], but layers.2.blocks.4.norm2.weight has (384,)
layers.2.blocks.4.norm2.bias has [384], but layers.2.blocks.4.norm2.bias has (384,)
layers.2.blocks.4.mlp.fc1.weight has [384, 1536], but layers.2.blocks.4.mlp.fc1.weight has (384, 1536)
layers.2.blocks.4.mlp.fc1.bias has [1536], but layers.2.blocks.4.mlp.fc1.bias has (1536,)
layers.2.blocks.4.mlp.fc2.weight has [1536, 384], but layers.2.blocks.4.mlp.fc2.weight has (1536, 384)
layers.2.blocks.4.mlp.fc2.bias has [384], but layers.2.blocks.4.mlp.fc2.bias has (384,)
layers.2.blocks.5.norm1.weight has [384], but layers.2.blocks.5.norm1.weight has (384,)
layers.2.blocks.5.norm1.bias has [384], but layers.2.blocks.5.norm1.bias has (384,)
layers.2.blocks.5.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.5.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.5.attn.relative_position_index has [49, 49], but layers.2.blocks.5.attn.relative_position_index has (49, 49)
layers.2.blocks.5.attn.qkv.weight has [384, 1152], but layers.2.blocks.5.attn.qkv.weight has (384, 1152)
layers.2.blocks.5.attn.qkv.bias has [1152], but layers.2.blocks.5.attn.qkv.bias has (1152,)
layers.2.blocks.5.attn.proj.weight has [384, 384], but layers.2.blocks.5.attn.proj.weight has (384, 384)
layers.2.blocks.5.attn.proj.bias has [384], but layers.2.blocks.5.attn.proj.bias has (384,)
layers.2.blocks.5.norm2.weight has [384], but layers.2.blocks.5.norm2.weight has (384,)
layers.2.blocks.5.norm2.bias has [384], but layers.2.blocks.5.norm2.bias has (384,)
layers.2.blocks.5.mlp.fc1.weight has [384, 1536], but layers.2.blocks.5.mlp.fc1.weight has (384, 1536)
layers.2.blocks.5.mlp.fc1.bias has [1536], but layers.2.blocks.5.mlp.fc1.bias has (1536,)
layers.2.blocks.5.mlp.fc2.weight has [1536, 384], but layers.2.blocks.5.mlp.fc2.weight has (1536, 384)
layers.2.blocks.5.mlp.fc2.bias has [384], but layers.2.blocks.5.mlp.fc2.bias has (384,)
layers.2.blocks.6.norm1.weight has [384], but layers.2.blocks.6.norm1.weight has (384,)
layers.2.blocks.6.norm1.bias has [384], but layers.2.blocks.6.norm1.bias has (384,)
layers.2.blocks.6.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.6.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.6.attn.relative_position_index has [49, 49], but layers.2.blocks.6.attn.relative_position_index has (49, 49)
layers.2.blocks.6.attn.qkv.weight has [384, 1152], but layers.2.blocks.6.attn.qkv.weight has (384, 1152)
layers.2.blocks.6.attn.qkv.bias has [1152], but layers.2.blocks.6.attn.qkv.bias has (1152,)
layers.2.blocks.6.attn.proj.weight has [384, 384], but layers.2.blocks.6.attn.proj.weight has (384, 384)
layers.2.blocks.6.attn.proj.bias has [384], but layers.2.blocks.6.attn.proj.bias has (384,)
layers.2.blocks.6.norm2.weight has [384], but layers.2.blocks.6.norm2.weight has (384,)
layers.2.blocks.6.norm2.bias has [384], but layers.2.blocks.6.norm2.bias has (384,)
layers.2.blocks.6.mlp.fc1.weight has [384, 1536], but layers.2.blocks.6.mlp.fc1.weight has (384, 1536)
layers.2.blocks.6.mlp.fc1.bias has [1536], but layers.2.blocks.6.mlp.fc1.bias has (1536,)
layers.2.blocks.6.mlp.fc2.weight has [1536, 384], but layers.2.blocks.6.mlp.fc2.weight has (1536, 384)
layers.2.blocks.6.mlp.fc2.bias has [384], but layers.2.blocks.6.mlp.fc2.bias has (384,)
layers.2.blocks.7.norm1.weight has [384], but layers.2.blocks.7.norm1.weight has (384,)
layers.2.blocks.7.norm1.bias has [384], but layers.2.blocks.7.norm1.bias has (384,)
layers.2.blocks.7.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.7.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.7.attn.relative_position_index has [49, 49], but layers.2.blocks.7.attn.relative_position_index has (49, 49)
layers.2.blocks.7.attn.qkv.weight has [384, 1152], but layers.2.blocks.7.attn.qkv.weight has (384, 1152)
layers.2.blocks.7.attn.qkv.bias has [1152], but layers.2.blocks.7.attn.qkv.bias has (1152,)
layers.2.blocks.7.attn.proj.weight has [384, 384], but layers.2.blocks.7.attn.proj.weight has (384, 384)
layers.2.blocks.7.attn.proj.bias has [384], but layers.2.blocks.7.attn.proj.bias has (384,)
layers.2.blocks.7.norm2.weight has [384], but layers.2.blocks.7.norm2.weight has (384,)
layers.2.blocks.7.norm2.bias has [384], but layers.2.blocks.7.norm2.bias has (384,)
layers.2.blocks.7.mlp.fc1.weight has [384, 1536], but layers.2.blocks.7.mlp.fc1.weight has (384, 1536)
layers.2.blocks.7.mlp.fc1.bias has [1536], but layers.2.blocks.7.mlp.fc1.bias has (1536,)
layers.2.blocks.7.mlp.fc2.weight has [1536, 384], but layers.2.blocks.7.mlp.fc2.weight has (1536, 384)
layers.2.blocks.7.mlp.fc2.bias has [384], but layers.2.blocks.7.mlp.fc2.bias has (384,)
layers.2.blocks.8.norm1.weight has [384], but layers.2.blocks.8.norm1.weight has (384,)
layers.2.blocks.8.norm1.bias has [384], but layers.2.blocks.8.norm1.bias has (384,)
layers.2.blocks.8.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.8.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.8.attn.relative_position_index has [49, 49], but layers.2.blocks.8.attn.relative_position_index has (49, 49)
layers.2.blocks.8.attn.qkv.weight has [384, 1152], but layers.2.blocks.8.attn.qkv.weight has (384, 1152)
layers.2.blocks.8.attn.qkv.bias has [1152], but layers.2.blocks.8.attn.qkv.bias has (1152,)
layers.2.blocks.8.attn.proj.weight has [384, 384], but layers.2.blocks.8.attn.proj.weight has (384, 384)
layers.2.blocks.8.attn.proj.bias has [384], but layers.2.blocks.8.attn.proj.bias has (384,)
layers.2.blocks.8.norm2.weight has [384], but layers.2.blocks.8.norm2.weight has (384,)
layers.2.blocks.8.norm2.bias has [384], but layers.2.blocks.8.norm2.bias has (384,)
layers.2.blocks.8.mlp.fc1.weight has [384, 1536], but layers.2.blocks.8.mlp.fc1.weight has (384, 1536)
layers.2.blocks.8.mlp.fc1.bias has [1536], but layers.2.blocks.8.mlp.fc1.bias has (1536,)
layers.2.blocks.8.mlp.fc2.weight has [1536, 384], but layers.2.blocks.8.mlp.fc2.weight has (1536, 384)
layers.2.blocks.8.mlp.fc2.bias has [384], but layers.2.blocks.8.mlp.fc2.bias has (384,)
layers.2.blocks.9.norm1.weight has [384], but layers.2.blocks.9.norm1.weight has (384,)
layers.2.blocks.9.norm1.bias has [384], but layers.2.blocks.9.norm1.bias has (384,)
layers.2.blocks.9.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.9.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.9.attn.relative_position_index has [49, 49], but layers.2.blocks.9.attn.relative_position_index has (49, 49)
layers.2.blocks.9.attn.qkv.weight has [384, 1152], but layers.2.blocks.9.attn.qkv.weight has (384, 1152)
layers.2.blocks.9.attn.qkv.bias has [1152], but layers.2.blocks.9.attn.qkv.bias has (1152,)
layers.2.blocks.9.attn.proj.weight has [384, 384], but layers.2.blocks.9.attn.proj.weight has (384, 384)
layers.2.blocks.9.attn.proj.bias has [384], but layers.2.blocks.9.attn.proj.bias has (384,)
layers.2.blocks.9.norm2.weight has [384], but layers.2.blocks.9.norm2.weight has (384,)
layers.2.blocks.9.norm2.bias has [384], but layers.2.blocks.9.norm2.bias has (384,)
layers.2.blocks.9.mlp.fc1.weight has [384, 1536], but layers.2.blocks.9.mlp.fc1.weight has (384, 1536)
layers.2.blocks.9.mlp.fc1.bias has [1536], but layers.2.blocks.9.mlp.fc1.bias has (1536,)
layers.2.blocks.9.mlp.fc2.weight has [1536, 384], but layers.2.blocks.9.mlp.fc2.weight has (1536, 384)
layers.2.blocks.9.mlp.fc2.bias has [384], but layers.2.blocks.9.mlp.fc2.bias has (384,)
layers.2.blocks.10.norm1.weight has [384], but layers.2.blocks.10.norm1.weight has (384,)
layers.2.blocks.10.norm1.bias has [384], but layers.2.blocks.10.norm1.bias has (384,)
layers.2.blocks.10.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.10.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.10.attn.relative_position_index has [49, 49], but layers.2.blocks.10.attn.relative_position_index has (49, 49)
layers.2.blocks.10.attn.qkv.weight has [384, 1152], but layers.2.blocks.10.attn.qkv.weight has (384, 1152)
layers.2.blocks.10.attn.qkv.bias has [1152], but layers.2.blocks.10.attn.qkv.bias has (1152,)
layers.2.blocks.10.attn.proj.weight has [384, 384], but layers.2.blocks.10.attn.proj.weight has (384, 384)
layers.2.blocks.10.attn.proj.bias has [384], but layers.2.blocks.10.attn.proj.bias has (384,)
layers.2.blocks.10.norm2.weight has [384], but layers.2.blocks.10.norm2.weight has (384,)
layers.2.blocks.10.norm2.bias has [384], but layers.2.blocks.10.norm2.bias has (384,)
layers.2.blocks.10.mlp.fc1.weight has [384, 1536], but layers.2.blocks.10.mlp.fc1.weight has (384, 1536)
layers.2.blocks.10.mlp.fc1.bias has [1536], but layers.2.blocks.10.mlp.fc1.bias has (1536,)
layers.2.blocks.10.mlp.fc2.weight has [1536, 384], but layers.2.blocks.10.mlp.fc2.weight has (1536, 384)
layers.2.blocks.10.mlp.fc2.bias has [384], but layers.2.blocks.10.mlp.fc2.bias has (384,)
layers.2.blocks.11.norm1.weight has [384], but layers.2.blocks.11.norm1.weight has (384,)
layers.2.blocks.11.norm1.bias has [384], but layers.2.blocks.11.norm1.bias has (384,)
layers.2.blocks.11.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.11.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.11.attn.relative_position_index has [49, 49], but layers.2.blocks.11.attn.relative_position_index has (49, 49)
layers.2.blocks.11.attn.qkv.weight has [384, 1152], but layers.2.blocks.11.attn.qkv.weight has (384, 1152)
layers.2.blocks.11.attn.qkv.bias has [1152], but layers.2.blocks.11.attn.qkv.bias has (1152,)
layers.2.blocks.11.attn.proj.weight has [384, 384], but layers.2.blocks.11.attn.proj.weight has (384, 384)
layers.2.blocks.11.attn.proj.bias has [384], but layers.2.blocks.11.attn.proj.bias has (384,)
layers.2.blocks.11.norm2.weight has [384], but layers.2.blocks.11.norm2.weight has (384,)
layers.2.blocks.11.norm2.bias has [384], but layers.2.blocks.11.norm2.bias has (384,)
layers.2.blocks.11.mlp.fc1.weight has [384, 1536], but layers.2.blocks.11.mlp.fc1.weight has (384, 1536)
layers.2.blocks.11.mlp.fc1.bias has [1536], but layers.2.blocks.11.mlp.fc1.bias has (1536,)
layers.2.blocks.11.mlp.fc2.weight has [1536, 384], but layers.2.blocks.11.mlp.fc2.weight has (1536, 384)
layers.2.blocks.11.mlp.fc2.bias has [384], but layers.2.blocks.11.mlp.fc2.bias has (384,)
layers.2.blocks.12.norm1.weight has [384], but layers.2.blocks.12.norm1.weight has (384,)
layers.2.blocks.12.norm1.bias has [384], but layers.2.blocks.12.norm1.bias has (384,)
layers.2.blocks.12.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.12.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.12.attn.relative_position_index has [49, 49], but layers.2.blocks.12.attn.relative_position_index has (49, 49)
layers.2.blocks.12.attn.qkv.weight has [384, 1152], but layers.2.blocks.12.attn.qkv.weight has (384, 1152)
layers.2.blocks.12.attn.qkv.bias has [1152], but layers.2.blocks.12.attn.qkv.bias has (1152,)
layers.2.blocks.12.attn.proj.weight has [384, 384], but layers.2.blocks.12.attn.proj.weight has (384, 384)
layers.2.blocks.12.attn.proj.bias has [384], but layers.2.blocks.12.attn.proj.bias has (384,)
layers.2.blocks.12.norm2.weight has [384], but layers.2.blocks.12.norm2.weight has (384,)
layers.2.blocks.12.norm2.bias has [384], but layers.2.blocks.12.norm2.bias has (384,)
layers.2.blocks.12.mlp.fc1.weight has [384, 1536], but layers.2.blocks.12.mlp.fc1.weight has (384, 1536)
layers.2.blocks.12.mlp.fc1.bias has [1536], but layers.2.blocks.12.mlp.fc1.bias has (1536,)
layers.2.blocks.12.mlp.fc2.weight has [1536, 384], but layers.2.blocks.12.mlp.fc2.weight has (1536, 384)
layers.2.blocks.12.mlp.fc2.bias has [384], but layers.2.blocks.12.mlp.fc2.bias has (384,)
layers.2.blocks.13.norm1.weight has [384], but layers.2.blocks.13.norm1.weight has (384,)
layers.2.blocks.13.norm1.bias has [384], but layers.2.blocks.13.norm1.bias has (384,)
layers.2.blocks.13.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.13.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.13.attn.relative_position_index has [49, 49], but layers.2.blocks.13.attn.relative_position_index has (49, 49)
layers.2.blocks.13.attn.qkv.weight has [384, 1152], but layers.2.blocks.13.attn.qkv.weight has (384, 1152)
layers.2.blocks.13.attn.qkv.bias has [1152], but layers.2.blocks.13.attn.qkv.bias has (1152,)
layers.2.blocks.13.attn.proj.weight has [384, 384], but layers.2.blocks.13.attn.proj.weight has (384, 384)
layers.2.blocks.13.attn.proj.bias has [384], but layers.2.blocks.13.attn.proj.bias has (384,)
layers.2.blocks.13.norm2.weight has [384], but layers.2.blocks.13.norm2.weight has (384,)
layers.2.blocks.13.norm2.bias has [384], but layers.2.blocks.13.norm2.bias has (384,)
layers.2.blocks.13.mlp.fc1.weight has [384, 1536], but layers.2.blocks.13.mlp.fc1.weight has (384, 1536)
layers.2.blocks.13.mlp.fc1.bias has [1536], but layers.2.blocks.13.mlp.fc1.bias has (1536,)
layers.2.blocks.13.mlp.fc2.weight has [1536, 384], but layers.2.blocks.13.mlp.fc2.weight has (1536, 384)
layers.2.blocks.13.mlp.fc2.bias has [384], but layers.2.blocks.13.mlp.fc2.bias has (384,)
layers.2.blocks.14.norm1.weight has [384], but layers.2.blocks.14.norm1.weight has (384,)
layers.2.blocks.14.norm1.bias has [384], but layers.2.blocks.14.norm1.bias has (384,)
layers.2.blocks.14.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.14.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.14.attn.relative_position_index has [49, 49], but layers.2.blocks.14.attn.relative_position_index has (49, 49)
layers.2.blocks.14.attn.qkv.weight has [384, 1152], but layers.2.blocks.14.attn.qkv.weight has (384, 1152)
layers.2.blocks.14.attn.qkv.bias has [1152], but layers.2.blocks.14.attn.qkv.bias has (1152,)
layers.2.blocks.14.attn.proj.weight has [384, 384], but layers.2.blocks.14.attn.proj.weight has (384, 384)
layers.2.blocks.14.attn.proj.bias has [384], but layers.2.blocks.14.attn.proj.bias has (384,)
layers.2.blocks.14.norm2.weight has [384], but layers.2.blocks.14.norm2.weight has (384,)
layers.2.blocks.14.norm2.bias has [384], but layers.2.blocks.14.norm2.bias has (384,)
layers.2.blocks.14.mlp.fc1.weight has [384, 1536], but layers.2.blocks.14.mlp.fc1.weight has (384, 1536)
layers.2.blocks.14.mlp.fc1.bias has [1536], but layers.2.blocks.14.mlp.fc1.bias has (1536,)
layers.2.blocks.14.mlp.fc2.weight has [1536, 384], but layers.2.blocks.14.mlp.fc2.weight has (1536, 384)
layers.2.blocks.14.mlp.fc2.bias has [384], but layers.2.blocks.14.mlp.fc2.bias has (384,)
layers.2.blocks.15.norm1.weight has [384], but layers.2.blocks.15.norm1.weight has (384,)
layers.2.blocks.15.norm1.bias has [384], but layers.2.blocks.15.norm1.bias has (384,)
layers.2.blocks.15.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.15.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.15.attn.relative_position_index has [49, 49], but layers.2.blocks.15.attn.relative_position_index has (49, 49)
layers.2.blocks.15.attn.qkv.weight has [384, 1152], but layers.2.blocks.15.attn.qkv.weight has (384, 1152)
layers.2.blocks.15.attn.qkv.bias has [1152], but layers.2.blocks.15.attn.qkv.bias has (1152,)
layers.2.blocks.15.attn.proj.weight has [384, 384], but layers.2.blocks.15.attn.proj.weight has (384, 384)
layers.2.blocks.15.attn.proj.bias has [384], but layers.2.blocks.15.attn.proj.bias has (384,)
layers.2.blocks.15.norm2.weight has [384], but layers.2.blocks.15.norm2.weight has (384,)
layers.2.blocks.15.norm2.bias has [384], but layers.2.blocks.15.norm2.bias has (384,)
layers.2.blocks.15.mlp.fc1.weight has [384, 1536], but layers.2.blocks.15.mlp.fc1.weight has (384, 1536)
layers.2.blocks.15.mlp.fc1.bias has [1536], but layers.2.blocks.15.mlp.fc1.bias has (1536,)
layers.2.blocks.15.mlp.fc2.weight has [1536, 384], but layers.2.blocks.15.mlp.fc2.weight has (1536, 384)
layers.2.blocks.15.mlp.fc2.bias has [384], but layers.2.blocks.15.mlp.fc2.bias has (384,)
layers.2.blocks.16.norm1.weight has [384], but layers.2.blocks.16.norm1.weight has (384,)
layers.2.blocks.16.norm1.bias has [384], but layers.2.blocks.16.norm1.bias has (384,)
layers.2.blocks.16.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.16.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.16.attn.relative_position_index has [49, 49], but layers.2.blocks.16.attn.relative_position_index has (49, 49)
layers.2.blocks.16.attn.qkv.weight has [384, 1152], but layers.2.blocks.16.attn.qkv.weight has (384, 1152)
layers.2.blocks.16.attn.qkv.bias has [1152], but layers.2.blocks.16.attn.qkv.bias has (1152,)
layers.2.blocks.16.attn.proj.weight has [384, 384], but layers.2.blocks.16.attn.proj.weight has (384, 384)
layers.2.blocks.16.attn.proj.bias has [384], but layers.2.blocks.16.attn.proj.bias has (384,)
layers.2.blocks.16.norm2.weight has [384], but layers.2.blocks.16.norm2.weight has (384,)
layers.2.blocks.16.norm2.bias has [384], but layers.2.blocks.16.norm2.bias has (384,)
layers.2.blocks.16.mlp.fc1.weight has [384, 1536], but layers.2.blocks.16.mlp.fc1.weight has (384, 1536)
layers.2.blocks.16.mlp.fc1.bias has [1536], but layers.2.blocks.16.mlp.fc1.bias has (1536,)
layers.2.blocks.16.mlp.fc2.weight has [1536, 384], but layers.2.blocks.16.mlp.fc2.weight has (1536, 384)
layers.2.blocks.16.mlp.fc2.bias has [384], but layers.2.blocks.16.mlp.fc2.bias has (384,)
layers.2.blocks.17.norm1.weight has [384], but layers.2.blocks.17.norm1.weight has (384,)
layers.2.blocks.17.norm1.bias has [384], but layers.2.blocks.17.norm1.bias has (384,)
layers.2.blocks.17.attn.relative_position_bias_table has [169, 12], but layers.2.blocks.17.attn.relative_position_bias_table has (169, 12)
layers.2.blocks.17.attn.relative_position_index has [49, 49], but layers.2.blocks.17.attn.relative_position_index has (49, 49)
layers.2.blocks.17.attn.qkv.weight has [384, 1152], but layers.2.blocks.17.attn.qkv.weight has (384, 1152)
layers.2.blocks.17.attn.qkv.bias has [1152], but layers.2.blocks.17.attn.qkv.bias has (1152,)
layers.2.blocks.17.attn.proj.weight has [384, 384], but layers.2.blocks.17.attn.proj.weight has (384, 384)
layers.2.blocks.17.attn.proj.bias has [384], but layers.2.blocks.17.attn.proj.bias has (384,)
layers.2.blocks.17.norm2.weight has [384], but layers.2.blocks.17.norm2.weight has (384,)
layers.2.blocks.17.norm2.bias has [384], but layers.2.blocks.17.norm2.bias has (384,)
layers.2.blocks.17.mlp.fc1.weight has [384, 1536], but layers.2.blocks.17.mlp.fc1.weight has (384, 1536)
layers.2.blocks.17.mlp.fc1.bias has [1536], but layers.2.blocks.17.mlp.fc1.bias has (1536,)
layers.2.blocks.17.mlp.fc2.weight has [1536, 384], but layers.2.blocks.17.mlp.fc2.weight has (1536, 384)
layers.2.blocks.17.mlp.fc2.bias has [384], but layers.2.blocks.17.mlp.fc2.bias has (384,)
layers.2.downsample.reduction.weight has [1536, 768], but layers.2.downsample.reduction.weight has (1536, 768)
layers.2.downsample.norm.weight has [1536], but layers.2.downsample.norm.weight has (1536,)
layers.2.downsample.norm.bias has [1536], but layers.2.downsample.norm.bias has (1536,)
layers.3.blocks.0.norm1.weight has [768], but layers.3.blocks.0.norm1.weight has (768,)
layers.3.blocks.0.norm1.bias has [768], but layers.3.blocks.0.norm1.bias has (768,)
layers.3.blocks.0.attn.relative_position_bias_table has [169, 24], but layers.3.blocks.0.attn.relative_position_bias_table has (169, 24)
layers.3.blocks.0.attn.relative_position_index has [49, 49], but layers.3.blocks.0.attn.relative_position_index has (49, 49)
layers.3.blocks.0.attn.qkv.weight has [768, 2304], but layers.3.blocks.0.attn.qkv.weight has (768, 2304)
layers.3.blocks.0.attn.qkv.bias has [2304], but layers.3.blocks.0.attn.qkv.bias has (2304,)
layers.3.blocks.0.attn.proj.weight has [768, 768], but layers.3.blocks.0.attn.proj.weight has (768, 768)
layers.3.blocks.0.attn.proj.bias has [768], but layers.3.blocks.0.attn.proj.bias has (768,)
layers.3.blocks.0.norm2.weight has [768], but layers.3.blocks.0.norm2.weight has (768,)
layers.3.blocks.0.norm2.bias has [768], but layers.3.blocks.0.norm2.bias has (768,)
layers.3.blocks.0.mlp.fc1.weight has [768, 3072], but layers.3.blocks.0.mlp.fc1.weight has (768, 3072)
layers.3.blocks.0.mlp.fc1.bias has [3072], but layers.3.blocks.0.mlp.fc1.bias has (3072,)
layers.3.blocks.0.mlp.fc2.weight has [3072, 768], but layers.3.blocks.0.mlp.fc2.weight has (3072, 768)
layers.3.blocks.0.mlp.fc2.bias has [768], but layers.3.blocks.0.mlp.fc2.bias has (768,)
layers.3.blocks.1.norm1.weight has [768], but layers.3.blocks.1.norm1.weight has (768,)
layers.3.blocks.1.norm1.bias has [768], but layers.3.blocks.1.norm1.bias has (768,)
layers.3.blocks.1.attn.relative_position_bias_table has [169, 24], but layers.3.blocks.1.attn.relative_position_bias_table has (169, 24)
layers.3.blocks.1.attn.relative_position_index has [49, 49], but layers.3.blocks.1.attn.relative_position_index has (49, 49)
layers.3.blocks.1.attn.qkv.weight has [768, 2304], but layers.3.blocks.1.attn.qkv.weight has (768, 2304)
layers.3.blocks.1.attn.qkv.bias has [2304], but layers.3.blocks.1.attn.qkv.bias has (2304,)
layers.3.blocks.1.attn.proj.weight has [768, 768], but layers.3.blocks.1.attn.proj.weight has (768, 768)
layers.3.blocks.1.attn.proj.bias has [768], but layers.3.blocks.1.attn.proj.bias has (768,)
layers.3.blocks.1.norm2.weight has [768], but layers.3.blocks.1.norm2.weight has (768,)
layers.3.blocks.1.norm2.bias has [768], but layers.3.blocks.1.norm2.bias has (768,)
layers.3.blocks.1.mlp.fc1.weight has [768, 3072], but layers.3.blocks.1.mlp.fc1.weight has (768, 3072)
layers.3.blocks.1.mlp.fc1.bias has [3072], but layers.3.blocks.1.mlp.fc1.bias has (3072,)
layers.3.blocks.1.mlp.fc2.weight has [3072, 768], but layers.3.blocks.1.mlp.fc2.weight has (3072, 768)
layers.3.blocks.1.mlp.fc2.bias has [768], but layers.3.blocks.1.mlp.fc2.bias has (768,)
patch_embed.proj.weight has (96, 3, 4, 4), but patch_embed.proj.weight has [96, 3, 4, 4]
patch_embed.proj.bias has (96,), but patch_embed.proj.bias has [96]
patch_embed.norm.weight has (96,), but patch_embed.norm.weight has [96]
patch_embed.norm.bias has (96,), but patch_embed.norm.bias has [96]
layers.0.blocks.0.norm1.weight has (96,), but layers.0.blocks.0.norm1.weight has [96]
layers.0.blocks.0.norm1.bias has (96,), but layers.0.blocks.0.norm1.bias has [96]
layers.0.blocks.0.attn.qkv.weight has (96, 288), but layers.0.blocks.0.attn.qkv.weight has [96, 288]
layers.0.blocks.0.attn.qkv.bias has (288,), but layers.0.blocks.0.attn.qkv.bias has [288]
layers.0.blocks.0.attn.proj.weight has (96, 96), but layers.0.blocks.0.attn.proj.weight has [96, 96]
layers.0.blocks.0.attn.proj.bias has (96,), but layers.0.blocks.0.attn.proj.bias has [96]
layers.0.blocks.0.norm2.weight has (96,), but layers.0.blocks.0.norm2.weight has [96]
layers.0.blocks.0.norm2.bias has (96,), but layers.0.blocks.0.norm2.bias has [96]
layers.0.blocks.0.mlp.fc1.weight has (96, 384), but layers.0.blocks.0.mlp.fc1.weight has [96, 384]
layers.0.blocks.0.mlp.fc1.bias has (384,), but layers.0.blocks.0.mlp.fc1.bias has [384]
layers.0.blocks.0.mlp.fc2.weight has (384, 96), but layers.0.blocks.0.mlp.fc2.weight has [384, 96]
layers.0.blocks.0.mlp.fc2.bias has (96,), but layers.0.blocks.0.mlp.fc2.bias has [96]
layers.0.blocks.1.norm1.weight has (96,), but layers.0.blocks.1.norm1.weight has [96]
layers.0.blocks.1.norm1.bias has (96,), but layers.0.blocks.1.norm1.bias has [96]
layers.0.blocks.1.attn.qkv.weight has (96, 288), but layers.0.blocks.1.attn.qkv.weight has [96, 288]
layers.0.blocks.1.attn.qkv.bias has (288,), but layers.0.blocks.1.attn.qkv.bias has [288]
layers.0.blocks.1.attn.proj.weight has (96, 96), but layers.0.blocks.1.attn.proj.weight has [96, 96]
layers.0.blocks.1.attn.proj.bias has (96,), but layers.0.blocks.1.attn.proj.bias has [96]
layers.0.blocks.1.norm2.weight has (96,), but layers.0.blocks.1.norm2.weight has [96]
layers.0.blocks.1.norm2.bias has (96,), but layers.0.blocks.1.norm2.bias has [96]
layers.0.blocks.1.mlp.fc1.weight has (96, 384), but layers.0.blocks.1.mlp.fc1.weight has [96, 384]
layers.0.blocks.1.mlp.fc1.bias has (384,), but layers.0.blocks.1.mlp.fc1.bias has [384]
layers.0.blocks.1.mlp.fc2.weight has (384, 96), but layers.0.blocks.1.mlp.fc2.weight has [384, 96]
layers.0.blocks.1.mlp.fc2.bias has (96,), but layers.0.blocks.1.mlp.fc2.bias has [96]
layers.0.downsample.norm.weight has (384,), but layers.0.downsample.norm.weight has [384]
layers.0.downsample.norm.bias has (384,), but layers.0.downsample.norm.bias has [384]
layers.1.blocks.0.norm1.weight has (192,), but layers.1.blocks.0.norm1.weight has [192]
layers.1.blocks.0.norm1.bias has (192,), but layers.1.blocks.0.norm1.bias has [192]
layers.1.blocks.0.attn.qkv.weight has (192, 576), but layers.1.blocks.0.attn.qkv.weight has [192, 576]
layers.1.blocks.0.attn.qkv.bias has (576,), but layers.1.blocks.0.attn.qkv.bias has [576]
layers.1.blocks.0.attn.proj.weight has (192, 192), but layers.1.blocks.0.attn.proj.weight has [192, 192]
layers.1.blocks.0.attn.proj.bias has (192,), but layers.1.blocks.0.attn.proj.bias has [192]
layers.1.blocks.0.norm2.weight has (192,), but layers.1.blocks.0.norm2.weight has [192]
layers.1.blocks.0.norm2.bias has (192,), but layers.1.blocks.0.norm2.bias has [192]
layers.1.blocks.0.mlp.fc1.weight has (192, 768), but layers.1.blocks.0.mlp.fc1.weight has [192, 768]
layers.1.blocks.0.mlp.fc1.bias has (768,), but layers.1.blocks.0.mlp.fc1.bias has [768]
layers.1.blocks.0.mlp.fc2.weight has (768, 192), but layers.1.blocks.0.mlp.fc2.weight has [768, 192]
layers.1.blocks.0.mlp.fc2.bias has (192,), but layers.1.blocks.0.mlp.fc2.bias has [192]
layers.1.blocks.1.norm1.weight has (192,), but layers.1.blocks.1.norm1.weight has [192]
layers.1.blocks.1.norm1.bias has (192,), but layers.1.blocks.1.norm1.bias has [192]
layers.1.blocks.1.attn.qkv.weight has (192, 576), but layers.1.blocks.1.attn.qkv.weight has [192, 576]
layers.1.blocks.1.attn.qkv.bias has (576,), but layers.1.blocks.1.attn.qkv.bias has [576]
layers.1.blocks.1.attn.proj.weight has (192, 192), but layers.1.blocks.1.attn.proj.weight has [192, 192]
layers.1.blocks.1.attn.proj.bias has (192,), but layers.1.blocks.1.attn.proj.bias has [192]
layers.1.blocks.1.norm2.weight has (192,), but layers.1.blocks.1.norm2.weight has [192]
layers.1.blocks.1.norm2.bias has (192,), but layers.1.blocks.1.norm2.bias has [192]
layers.1.blocks.1.mlp.fc1.weight has (192, 768), but layers.1.blocks.1.mlp.fc1.weight has [192, 768]
layers.1.blocks.1.mlp.fc1.bias has (768,), but layers.1.blocks.1.mlp.fc1.bias has [768]
layers.1.blocks.1.mlp.fc2.weight has (768, 192), but layers.1.blocks.1.mlp.fc2.weight has [768, 192]
layers.1.blocks.1.mlp.fc2.bias has (192,), but layers.1.blocks.1.mlp.fc2.bias has [192]
layers.1.downsample.norm.weight has (768,), but layers.1.downsample.norm.weight has [768]
layers.1.downsample.norm.bias has (768,), but layers.1.downsample.norm.bias has [768]
layers.2.blocks.0.norm1.weight has (384,), but layers.2.blocks.0.norm1.weight has [384]
layers.2.blocks.0.norm1.bias has (384,), but layers.2.blocks.0.norm1.bias has [384]
layers.2.blocks.0.attn.qkv.weight has (384, 1152), but layers.2.blocks.0.attn.qkv.weight has [384, 1152]
layers.2.blocks.0.attn.qkv.bias has (1152,), but layers.2.blocks.0.attn.qkv.bias has [1152]
layers.2.blocks.0.attn.proj.weight has (384, 384), but layers.2.blocks.0.attn.proj.weight has [384, 384]
layers.2.blocks.0.attn.proj.bias has (384,), but layers.2.blocks.0.attn.proj.bias has [384]
layers.2.blocks.0.norm2.weight has (384,), but layers.2.blocks.0.norm2.weight has [384]
layers.2.blocks.0.norm2.bias has (384,), but layers.2.blocks.0.norm2.bias has [384]
layers.2.blocks.0.mlp.fc1.weight has (384, 1536), but layers.2.blocks.0.mlp.fc1.weight has [384, 1536]
layers.2.blocks.0.mlp.fc1.bias has (1536,), but layers.2.blocks.0.mlp.fc1.bias has [1536]
layers.2.blocks.0.mlp.fc2.weight has (1536, 384), but layers.2.blocks.0.mlp.fc2.weight has [1536, 384]
layers.2.blocks.0.mlp.fc2.bias has (384,), but layers.2.blocks.0.mlp.fc2.bias has [384]
layers.2.blocks.1.norm1.weight has (384,), but layers.2.blocks.1.norm1.weight has [384]
layers.2.blocks.1.norm1.bias has (384,), but layers.2.blocks.1.norm1.bias has [384]
layers.2.blocks.1.attn.qkv.weight has (384, 1152), but layers.2.blocks.1.attn.qkv.weight has [384, 1152]
layers.2.blocks.1.attn.qkv.bias has (1152,), but layers.2.blocks.1.attn.qkv.bias has [1152]
layers.2.blocks.1.attn.proj.weight has (384, 384), but layers.2.blocks.1.attn.proj.weight has [384, 384]
layers.2.blocks.1.attn.proj.bias has (384,), but layers.2.blocks.1.attn.proj.bias has [384]
layers.2.blocks.1.norm2.weight has (384,), but layers.2.blocks.1.norm2.weight has [384]
layers.2.blocks.1.norm2.bias has (384,), but layers.2.blocks.1.norm2.bias has [384]
layers.2.blocks.1.mlp.fc1.weight has (384, 1536), but layers.2.blocks.1.mlp.fc1.weight has [384, 1536]
layers.2.blocks.1.mlp.fc1.bias has (1536,), but layers.2.blocks.1.mlp.fc1.bias has [1536]
layers.2.blocks.1.mlp.fc2.weight has (1536, 384), but layers.2.blocks.1.mlp.fc2.weight has [1536, 384]
layers.2.blocks.1.mlp.fc2.bias has (384,), but layers.2.blocks.1.mlp.fc2.bias has [384]
layers.2.blocks.2.norm1.weight has (384,), but layers.2.blocks.2.norm1.weight has [384]
layers.2.blocks.2.norm1.bias has (384,), but layers.2.blocks.2.norm1.bias has [384]
layers.2.blocks.2.attn.qkv.weight has (384, 1152), but layers.2.blocks.2.attn.qkv.weight has [384, 1152]
layers.2.blocks.2.attn.qkv.bias has (1152,), but layers.2.blocks.2.attn.qkv.bias has [1152]
layers.2.blocks.2.attn.proj.weight has (384, 384), but layers.2.blocks.2.attn.proj.weight has [384, 384]
layers.2.blocks.2.attn.proj.bias has (384,), but layers.2.blocks.2.attn.proj.bias has [384]
layers.2.blocks.2.norm2.weight has (384,), but layers.2.blocks.2.norm2.weight has [384]
layers.2.blocks.2.norm2.bias has (384,), but layers.2.blocks.2.norm2.bias has [384]
layers.2.blocks.2.mlp.fc1.weight has (384, 1536), but layers.2.blocks.2.mlp.fc1.weight has [384, 1536]
layers.2.blocks.2.mlp.fc1.bias has (1536,), but layers.2.blocks.2.mlp.fc1.bias has [1536]
layers.2.blocks.2.mlp.fc2.weight has (1536, 384), but layers.2.blocks.2.mlp.fc2.weight has [1536, 384]
layers.2.blocks.2.mlp.fc2.bias has (384,), but layers.2.blocks.2.mlp.fc2.bias has [384]
layers.2.blocks.3.norm1.weight has (384,), but layers.2.blocks.3.norm1.weight has [384]
layers.2.blocks.3.norm1.bias has (384,), but layers.2.blocks.3.norm1.bias has [384]
layers.2.blocks.3.attn.qkv.weight has (384, 1152), but layers.2.blocks.3.attn.qkv.weight has [384, 1152]
layers.2.blocks.3.attn.qkv.bias has (1152,), but layers.2.blocks.3.attn.qkv.bias has [1152]
layers.2.blocks.3.attn.proj.weight has (384, 384), but layers.2.blocks.3.attn.proj.weight has [384, 384]
layers.2.blocks.3.attn.proj.bias has (384,), but layers.2.blocks.3.attn.proj.bias has [384]
layers.2.blocks.3.norm2.weight has (384,), but layers.2.blocks.3.norm2.weight has [384]
layers.2.blocks.3.norm2.bias has (384,), but layers.2.blocks.3.norm2.bias has [384]
layers.2.blocks.3.mlp.fc1.weight has (384, 1536), but layers.2.blocks.3.mlp.fc1.weight has [384, 1536]
layers.2.blocks.3.mlp.fc1.bias has (1536,), but layers.2.blocks.3.mlp.fc1.bias has [1536]
layers.2.blocks.3.mlp.fc2.weight has (1536, 384), but layers.2.blocks.3.mlp.fc2.weight has [1536, 384]
layers.2.blocks.3.mlp.fc2.bias has (384,), but layers.2.blocks.3.mlp.fc2.bias has [384]
layers.2.blocks.4.norm1.weight has (384,), but layers.2.blocks.4.norm1.weight has [384]
layers.2.blocks.4.norm1.bias has (384,), but layers.2.blocks.4.norm1.bias has [384]
layers.2.blocks.4.attn.qkv.weight has (384, 1152), but layers.2.blocks.4.attn.qkv.weight has [384, 1152]
layers.2.blocks.4.attn.qkv.bias has (1152,), but layers.2.blocks.4.attn.qkv.bias has [1152]
layers.2.blocks.4.attn.proj.weight has (384, 384), but layers.2.blocks.4.attn.proj.weight has [384, 384]
layers.2.blocks.4.attn.proj.bias has (384,), but layers.2.blocks.4.attn.proj.bias has [384]
layers.2.blocks.4.norm2.weight has (384,), but layers.2.blocks.4.norm2.weight has [384]
layers.2.blocks.4.norm2.bias has (384,), but layers.2.blocks.4.norm2.bias has [384]
layers.2.blocks.4.mlp.fc1.weight has (384, 1536), but layers.2.blocks.4.mlp.fc1.weight has [384, 1536]
layers.2.blocks.4.mlp.fc1.bias has (1536,), but layers.2.blocks.4.mlp.fc1.bias has [1536]
layers.2.blocks.4.mlp.fc2.weight has (1536, 384), but layers.2.blocks.4.mlp.fc2.weight has [1536, 384]
layers.2.blocks.4.mlp.fc2.bias has (384,), but layers.2.blocks.4.mlp.fc2.bias has [384]
layers.2.blocks.5.norm1.weight has (384,), but layers.2.blocks.5.norm1.weight has [384]
layers.2.blocks.5.norm1.bias has (384,), but layers.2.blocks.5.norm1.bias has [384]
layers.2.blocks.5.attn.qkv.weight has (384, 1152), but layers.2.blocks.5.attn.qkv.weight has [384, 1152]
layers.2.blocks.5.attn.qkv.bias has (1152,), but layers.2.blocks.5.attn.qkv.bias has [1152]
layers.2.blocks.5.attn.proj.weight has (384, 384), but layers.2.blocks.5.attn.proj.weight has [384, 384]
layers.2.blocks.5.attn.proj.bias has (384,), but layers.2.blocks.5.attn.proj.bias has [384]
layers.2.blocks.5.norm2.weight has (384,), but layers.2.blocks.5.norm2.weight has [384]
layers.2.blocks.5.norm2.bias has (384,), but layers.2.blocks.5.norm2.bias has [384]
layers.2.blocks.5.mlp.fc1.weight has (384, 1536), but layers.2.blocks.5.mlp.fc1.weight has [384, 1536]
layers.2.blocks.5.mlp.fc1.bias has (1536,), but layers.2.blocks.5.mlp.fc1.bias has [1536]
layers.2.blocks.5.mlp.fc2.weight has (1536, 384), but layers.2.blocks.5.mlp.fc2.weight has [1536, 384]
layers.2.blocks.5.mlp.fc2.bias has (384,), but layers.2.blocks.5.mlp.fc2.bias has [384]
layers.2.blocks.6.norm1.weight has (384,), but layers.2.blocks.6.norm1.weight has [384]
layers.2.blocks.6.norm1.bias has (384,), but layers.2.blocks.6.norm1.bias has [384]
layers.2.blocks.6.attn.qkv.weight has (384, 1152), but layers.2.blocks.6.attn.qkv.weight has [384, 1152]
layers.2.blocks.6.attn.qkv.bias has (1152,), but layers.2.blocks.6.attn.qkv.bias has [1152]
layers.2.blocks.6.attn.proj.weight has (384, 384), but layers.2.blocks.6.attn.proj.weight has [384, 384]
layers.2.blocks.6.attn.proj.bias has (384,), but layers.2.blocks.6.attn.proj.bias has [384]
layers.2.blocks.6.norm2.weight has (384,), but layers.2.blocks.6.norm2.weight has [384]
layers.2.blocks.6.norm2.bias has (384,), but layers.2.blocks.6.norm2.bias has [384]
layers.2.blocks.6.mlp.fc1.weight has (384, 1536), but layers.2.blocks.6.mlp.fc1.weight has [384, 1536]
layers.2.blocks.6.mlp.fc1.bias has (1536,), but layers.2.blocks.6.mlp.fc1.bias has [1536]
layers.2.blocks.6.mlp.fc2.weight has (1536, 384), but layers.2.blocks.6.mlp.fc2.weight has [1536, 384]
layers.2.blocks.6.mlp.fc2.bias has (384,), but layers.2.blocks.6.mlp.fc2.bias has [384]
layers.2.blocks.7.norm1.weight has (384,), but layers.2.blocks.7.norm1.weight has [384]
layers.2.blocks.7.norm1.bias has (384,), but layers.2.blocks.7.norm1.bias has [384]
layers.2.blocks.7.attn.qkv.weight has (384, 1152), but layers.2.blocks.7.attn.qkv.weight has [384, 1152]
layers.2.blocks.7.attn.qkv.bias has (1152,), but layers.2.blocks.7.attn.qkv.bias has [1152]
layers.2.blocks.7.attn.proj.weight has (384, 384), but layers.2.blocks.7.attn.proj.weight has [384, 384]
layers.2.blocks.7.attn.proj.bias has (384,), but layers.2.blocks.7.attn.proj.bias has [384]
layers.2.blocks.7.norm2.weight has (384,), but layers.2.blocks.7.norm2.weight has [384]
layers.2.blocks.7.norm2.bias has (384,), but layers.2.blocks.7.norm2.bias has [384]
layers.2.blocks.7.mlp.fc1.weight has (384, 1536), but layers.2.blocks.7.mlp.fc1.weight has [384, 1536]
layers.2.blocks.7.mlp.fc1.bias has (1536,), but layers.2.blocks.7.mlp.fc1.bias has [1536]
layers.2.blocks.7.mlp.fc2.weight has (1536, 384), but layers.2.blocks.7.mlp.fc2.weight has [1536, 384]
layers.2.blocks.7.mlp.fc2.bias has (384,), but layers.2.blocks.7.mlp.fc2.bias has [384]
layers.2.blocks.8.norm1.weight has (384,), but layers.2.blocks.8.norm1.weight has [384]
layers.2.blocks.8.norm1.bias has (384,), but layers.2.blocks.8.norm1.bias has [384]
layers.2.blocks.8.attn.qkv.weight has (384, 1152), but layers.2.blocks.8.attn.qkv.weight has [384, 1152]
layers.2.blocks.8.attn.qkv.bias has (1152,), but layers.2.blocks.8.attn.qkv.bias has [1152]
layers.2.blocks.8.attn.proj.weight has (384, 384), but layers.2.blocks.8.attn.proj.weight has [384, 384]
layers.2.blocks.8.attn.proj.bias has (384,), but layers.2.blocks.8.attn.proj.bias has [384]
layers.2.blocks.8.norm2.weight has (384,), but layers.2.blocks.8.norm2.weight has [384]
layers.2.blocks.8.norm2.bias has (384,), but layers.2.blocks.8.norm2.bias has [384]
layers.2.blocks.8.mlp.fc1.weight has (384, 1536), but layers.2.blocks.8.mlp.fc1.weight has [384, 1536]
layers.2.blocks.8.mlp.fc1.bias has (1536,), but layers.2.blocks.8.mlp.fc1.bias has [1536]
layers.2.blocks.8.mlp.fc2.weight has (1536, 384), but layers.2.blocks.8.mlp.fc2.weight has [1536, 384]
layers.2.blocks.8.mlp.fc2.bias has (384,), but layers.2.blocks.8.mlp.fc2.bias has [384]
layers.2.blocks.9.norm1.weight has (384,), but layers.2.blocks.9.norm1.weight has [384]
layers.2.blocks.9.norm1.bias has (384,), but layers.2.blocks.9.norm1.bias has [384]
layers.2.blocks.9.attn.qkv.weight has (384, 1152), but layers.2.blocks.9.attn.qkv.weight has [384, 1152]
layers.2.blocks.9.attn.qkv.bias has (1152,), but layers.2.blocks.9.attn.qkv.bias has [1152]
layers.2.blocks.9.attn.proj.weight has (384, 384), but layers.2.blocks.9.attn.proj.weight has [384, 384]
layers.2.blocks.9.attn.proj.bias has (384,), but layers.2.blocks.9.attn.proj.bias has [384]
layers.2.blocks.9.norm2.weight has (384,), but layers.2.blocks.9.norm2.weight has [384]
layers.2.blocks.9.norm2.bias has (384,), but layers.2.blocks.9.norm2.bias has [384]
layers.2.blocks.9.mlp.fc1.weight has (384, 1536), but layers.2.blocks.9.mlp.fc1.weight has [384, 1536]
layers.2.blocks.9.mlp.fc1.bias has (1536,), but layers.2.blocks.9.mlp.fc1.bias has [1536]
layers.2.blocks.9.mlp.fc2.weight has (1536, 384), but layers.2.blocks.9.mlp.fc2.weight has [1536, 384]
layers.2.blocks.9.mlp.fc2.bias has (384,), but layers.2.blocks.9.mlp.fc2.bias has [384]
layers.2.blocks.10.norm1.weight has (384,), but layers.2.blocks.10.norm1.weight has [384]
layers.2.blocks.10.norm1.bias has (384,), but layers.2.blocks.10.norm1.bias has [384]
layers.2.blocks.10.attn.qkv.weight has (384, 1152), but layers.2.blocks.10.attn.qkv.weight has [384, 1152]
layers.2.blocks.10.attn.qkv.bias has (1152,), but layers.2.blocks.10.attn.qkv.bias has [1152]
layers.2.blocks.10.attn.proj.weight has (384, 384), but layers.2.blocks.10.attn.proj.weight has [384, 384]
layers.2.blocks.10.attn.proj.bias has (384,), but layers.2.blocks.10.attn.proj.bias has [384]
layers.2.blocks.10.norm2.weight has (384,), but layers.2.blocks.10.norm2.weight has [384]
layers.2.blocks.10.norm2.bias has (384,), but layers.2.blocks.10.norm2.bias has [384]
layers.2.blocks.10.mlp.fc1.weight has (384, 1536), but layers.2.blocks.10.mlp.fc1.weight has [384, 1536]
layers.2.blocks.10.mlp.fc1.bias has (1536,), but layers.2.blocks.10.mlp.fc1.bias has [1536]
layers.2.blocks.10.mlp.fc2.weight has (1536, 384), but layers.2.blocks.10.mlp.fc2.weight has [1536, 384]
layers.2.blocks.10.mlp.fc2.bias has (384,), but layers.2.blocks.10.mlp.fc2.bias has [384]
layers.2.blocks.11.norm1.weight has (384,), but layers.2.blocks.11.norm1.weight has [384]
layers.2.blocks.11.norm1.bias has (384,), but layers.2.blocks.11.norm1.bias has [384]
layers.2.blocks.11.attn.qkv.weight has (384, 1152), but layers.2.blocks.11.attn.qkv.weight has [384, 1152]
layers.2.blocks.11.attn.qkv.bias has (1152,), but layers.2.blocks.11.attn.qkv.bias has [1152]
layers.2.blocks.11.attn.proj.weight has (384, 384), but layers.2.blocks.11.attn.proj.weight has [384, 384]
layers.2.blocks.11.attn.proj.bias has (384,), but layers.2.blocks.11.attn.proj.bias has [384]
layers.2.blocks.11.norm2.weight has (384,), but layers.2.blocks.11.norm2.weight has [384]
layers.2.blocks.11.norm2.bias has (384,), but layers.2.blocks.11.norm2.bias has [384]
layers.2.blocks.11.mlp.fc1.weight has (384, 1536), but layers.2.blocks.11.mlp.fc1.weight has [384, 1536]
layers.2.blocks.11.mlp.fc1.bias has (1536,), but layers.2.blocks.11.mlp.fc1.bias has [1536]
layers.2.blocks.11.mlp.fc2.weight has (1536, 384), but layers.2.blocks.11.mlp.fc2.weight has [1536, 384]
layers.2.blocks.11.mlp.fc2.bias has (384,), but layers.2.blocks.11.mlp.fc2.bias has [384]
layers.2.blocks.12.norm1.weight has (384,), but layers.2.blocks.12.norm1.weight has [384]
layers.2.blocks.12.norm1.bias has (384,), but layers.2.blocks.12.norm1.bias has [384]
layers.2.blocks.12.attn.qkv.weight has (384, 1152), but layers.2.blocks.12.attn.qkv.weight has [384, 1152]
layers.2.blocks.12.attn.qkv.bias has (1152,), but layers.2.blocks.12.attn.qkv.bias has [1152]
layers.2.blocks.12.attn.proj.weight has (384, 384), but layers.2.blocks.12.attn.proj.weight has [384, 384]
layers.2.blocks.12.attn.proj.bias has (384,), but layers.2.blocks.12.attn.proj.bias has [384]
layers.2.blocks.12.norm2.weight has (384,), but layers.2.blocks.12.norm2.weight has [384]
layers.2.blocks.12.norm2.bias has (384,), but layers.2.blocks.12.norm2.bias has [384]
layers.2.blocks.12.mlp.fc1.weight has (384, 1536), but layers.2.blocks.12.mlp.fc1.weight has [384, 1536]
layers.2.blocks.12.mlp.fc1.bias has (1536,), but layers.2.blocks.12.mlp.fc1.bias has [1536]
layers.2.blocks.12.mlp.fc2.weight has (1536, 384), but layers.2.blocks.12.mlp.fc2.weight has [1536, 384]
layers.2.blocks.12.mlp.fc2.bias has (384,), but layers.2.blocks.12.mlp.fc2.bias has [384]
layers.2.blocks.13.norm1.weight has (384,), but layers.2.blocks.13.norm1.weight has [384]
layers.2.blocks.13.norm1.bias has (384,), but layers.2.blocks.13.norm1.bias has [384]
layers.2.blocks.13.attn.qkv.weight has (384, 1152), but layers.2.blocks.13.attn.qkv.weight has [384, 1152]
layers.2.blocks.13.attn.qkv.bias has (1152,), but layers.2.blocks.13.attn.qkv.bias has [1152]
layers.2.blocks.13.attn.proj.weight has (384, 384), but layers.2.blocks.13.attn.proj.weight has [384, 384]
layers.2.blocks.13.attn.proj.bias has (384,), but layers.2.blocks.13.attn.proj.bias has [384]
layers.2.blocks.13.norm2.weight has (384,), but layers.2.blocks.13.norm2.weight has [384]
layers.2.blocks.13.norm2.bias has (384,), but layers.2.blocks.13.norm2.bias has [384]
layers.2.blocks.13.mlp.fc1.weight has (384, 1536), but layers.2.blocks.13.mlp.fc1.weight has [384, 1536]
layers.2.blocks.13.mlp.fc1.bias has (1536,), but layers.2.blocks.13.mlp.fc1.bias has [1536]
layers.2.blocks.13.mlp.fc2.weight has (1536, 384), but layers.2.blocks.13.mlp.fc2.weight has [1536, 384]
layers.2.blocks.13.mlp.fc2.bias has (384,), but layers.2.blocks.13.mlp.fc2.bias has [384]
layers.2.blocks.14.norm1.weight has (384,), but layers.2.blocks.14.norm1.weight has [384]
layers.2.blocks.14.norm1.bias has (384,), but layers.2.blocks.14.norm1.bias has [384]
layers.2.blocks.14.attn.qkv.weight has (384, 1152), but layers.2.blocks.14.attn.qkv.weight has [384, 1152]
layers.2.blocks.14.attn.qkv.bias has (1152,), but layers.2.blocks.14.attn.qkv.bias has [1152]
layers.2.blocks.14.attn.proj.weight has (384, 384), but layers.2.blocks.14.attn.proj.weight has [384, 384]
layers.2.blocks.14.attn.proj.bias has (384,), but layers.2.blocks.14.attn.proj.bias has [384]
layers.2.blocks.14.norm2.weight has (384,), but layers.2.blocks.14.norm2.weight has [384]
layers.2.blocks.14.norm2.bias has (384,), but layers.2.blocks.14.norm2.bias has [384]
layers.2.blocks.14.mlp.fc1.weight has (384, 1536), but layers.2.blocks.14.mlp.fc1.weight has [384, 1536]
layers.2.blocks.14.mlp.fc1.bias has (1536,), but layers.2.blocks.14.mlp.fc1.bias has [1536]
layers.2.blocks.14.mlp.fc2.weight has (1536, 384), but layers.2.blocks.14.mlp.fc2.weight has [1536, 384]
layers.2.blocks.14.mlp.fc2.bias has (384,), but layers.2.blocks.14.mlp.fc2.bias has [384]
layers.2.blocks.15.norm1.weight has (384,), but layers.2.blocks.15.norm1.weight has [384]
layers.2.blocks.15.norm1.bias has (384,), but layers.2.blocks.15.norm1.bias has [384]
layers.2.blocks.15.attn.qkv.weight has (384, 1152), but layers.2.blocks.15.attn.qkv.weight has [384, 1152]
layers.2.blocks.15.attn.qkv.bias has (1152,), but layers.2.blocks.15.attn.qkv.bias has [1152]
layers.2.blocks.15.attn.proj.weight has (384, 384), but layers.2.blocks.15.attn.proj.weight has [384, 384]
layers.2.blocks.15.attn.proj.bias has (384,), but layers.2.blocks.15.attn.proj.bias has [384]
layers.2.blocks.15.norm2.weight has (384,), but layers.2.blocks.15.norm2.weight has [384]
layers.2.blocks.15.norm2.bias has (384,), but layers.2.blocks.15.norm2.bias has [384]
layers.2.blocks.15.mlp.fc1.weight has (384, 1536), but layers.2.blocks.15.mlp.fc1.weight has [384, 1536]
layers.2.blocks.15.mlp.fc1.bias has (1536,), but layers.2.blocks.15.mlp.fc1.bias has [1536]
layers.2.blocks.15.mlp.fc2.weight has (1536, 384), but layers.2.blocks.15.mlp.fc2.weight has [1536, 384]
layers.2.blocks.15.mlp.fc2.bias has (384,), but layers.2.blocks.15.mlp.fc2.bias has [384]
layers.2.blocks.16.norm1.weight has (384,), but layers.2.blocks.16.norm1.weight has [384]
layers.2.blocks.16.norm1.bias has (384,), but layers.2.blocks.16.norm1.bias has [384]
layers.2.blocks.16.attn.qkv.weight has (384, 1152), but layers.2.blocks.16.attn.qkv.weight has [384, 1152]
layers.2.blocks.16.attn.qkv.bias has (1152,), but layers.2.blocks.16.attn.qkv.bias has [1152]
layers.2.blocks.16.attn.proj.weight has (384, 384), but layers.2.blocks.16.attn.proj.weight has [384, 384]
layers.2.blocks.16.attn.proj.bias has (384,), but layers.2.blocks.16.attn.proj.bias has [384]
layers.2.blocks.16.norm2.weight has (384,), but layers.2.blocks.16.norm2.weight has [384]
layers.2.blocks.16.norm2.bias has (384,), but layers.2.blocks.16.norm2.bias has [384]
layers.2.blocks.16.mlp.fc1.weight has (384, 1536), but layers.2.blocks.16.mlp.fc1.weight has [384, 1536]
layers.2.blocks.16.mlp.fc1.bias has (1536,), but layers.2.blocks.16.mlp.fc1.bias has [1536]
layers.2.blocks.16.mlp.fc2.weight has (1536, 384), but layers.2.blocks.16.mlp.fc2.weight has [1536, 384]
layers.2.blocks.16.mlp.fc2.bias has (384,), but layers.2.blocks.16.mlp.fc2.bias has [384]
layers.2.blocks.17.norm1.weight has (384,), but layers.2.blocks.17.norm1.weight has [384]
layers.2.blocks.17.norm1.bias has (384,), but layers.2.blocks.17.norm1.bias has [384]
layers.2.blocks.17.attn.qkv.weight has (384, 1152), but layers.2.blocks.17.attn.qkv.weight has [384, 1152]
layers.2.blocks.17.attn.qkv.bias has (1152,), but layers.2.blocks.17.attn.qkv.bias has [1152]
layers.2.blocks.17.attn.proj.weight has (384, 384), but layers.2.blocks.17.attn.proj.weight has [384, 384]
layers.2.blocks.17.attn.proj.bias has (384,), but layers.2.blocks.17.attn.proj.bias has [384]
layers.2.blocks.17.norm2.weight has (384,), but layers.2.blocks.17.norm2.weight has [384]
layers.2.blocks.17.norm2.bias has (384,), but layers.2.blocks.17.norm2.bias has [384]
layers.2.blocks.17.mlp.fc1.weight has (384, 1536), but layers.2.blocks.17.mlp.fc1.weight has [384, 1536]
layers.2.blocks.17.mlp.fc1.bias has (1536,), but layers.2.blocks.17.mlp.fc1.bias has [1536]
layers.2.blocks.17.mlp.fc2.weight has (1536, 384), but layers.2.blocks.17.mlp.fc2.weight has [1536, 384]
layers.2.blocks.17.mlp.fc2.bias has (384,), but layers.2.blocks.17.mlp.fc2.bias has [384]
layers.2.downsample.norm.weight has (1536,), but layers.2.downsample.norm.weight has [1536]
layers.2.downsample.norm.bias has (1536,), but layers.2.downsample.norm.bias has [1536]
layers.3.blocks.0.norm1.weight has (768,), but layers.3.blocks.0.norm1.weight has [768]
layers.3.blocks.0.norm1.bias has (768,), but layers.3.blocks.0.norm1.bias has [768]
layers.3.blocks.0.attn.qkv.weight has (768, 2304), but layers.3.blocks.0.attn.qkv.weight has [768, 2304]
layers.3.blocks.0.attn.qkv.bias has (2304,), but layers.3.blocks.0.attn.qkv.bias has [2304]
layers.3.blocks.0.attn.proj.weight has (768, 768), but layers.3.blocks.0.attn.proj.weight has [768, 768]
layers.3.blocks.0.attn.proj.bias has (768,), but layers.3.blocks.0.attn.proj.bias has [768]
layers.3.blocks.0.norm2.weight has (768,), but layers.3.blocks.0.norm2.weight has [768]
layers.3.blocks.0.norm2.bias has (768,), but layers.3.blocks.0.norm2.bias has [768]
layers.3.blocks.0.mlp.fc1.weight has (768, 3072), but layers.3.blocks.0.mlp.fc1.weight has [768, 3072]
layers.3.blocks.0.mlp.fc1.bias has (3072,), but layers.3.blocks.0.mlp.fc1.bias has [3072]
layers.3.blocks.0.mlp.fc2.weight has (3072, 768), but layers.3.blocks.0.mlp.fc2.weight has [3072, 768]
layers.3.blocks.0.mlp.fc2.bias has (768,), but layers.3.blocks.0.mlp.fc2.bias has [768]
layers.3.blocks.1.norm1.weight has (768,), but layers.3.blocks.1.norm1.weight has [768]
layers.3.blocks.1.norm1.bias has (768,), but layers.3.blocks.1.norm1.bias has [768]
layers.3.blocks.1.attn.qkv.weight has (768, 2304), but layers.3.blocks.1.attn.qkv.weight has [768, 2304]
layers.3.blocks.1.attn.qkv.bias has (2304,), but layers.3.blocks.1.attn.qkv.bias has [2304]
layers.3.blocks.1.attn.proj.weight has (768, 768), but layers.3.blocks.1.attn.proj.weight has [768, 768]
layers.3.blocks.1.attn.proj.bias has (768,), but layers.3.blocks.1.attn.proj.bias has [768]
layers.3.blocks.1.norm2.weight has (768,), but layers.3.blocks.1.norm2.weight has [768]
layers.3.blocks.1.norm2.bias has (768,), but layers.3.blocks.1.norm2.bias has [768]
layers.3.blocks.1.mlp.fc1.weight has (768, 3072), but layers.3.blocks.1.mlp.fc1.weight has [768, 3072]
layers.3.blocks.1.mlp.fc1.bias has (3072,), but layers.3.blocks.1.mlp.fc1.bias has [3072]
layers.3.blocks.1.mlp.fc2.weight has (3072, 768), but layers.3.blocks.1.mlp.fc2.weight has [3072, 768]
layers.3.blocks.1.mlp.fc2.bias has (768,), but layers.3.blocks.1.mlp.fc2.bias has [768]
layers.0.blocks.0.attn.relative_position_index has (49, 49), but layers.0.blocks.0.attn.relative_position_index has [49, 49]
layers.0.blocks.1.attn.relative_position_index has (49, 49), but layers.0.blocks.1.attn.relative_position_index has [49, 49]
layers.1.blocks.0.attn.relative_position_index has (49, 49), but layers.1.blocks.0.attn.relative_position_index has [49, 49]
layers.1.blocks.1.attn.relative_position_index has (49, 49), but layers.1.blocks.1.attn.relative_position_index has [49, 49]
layers.2.blocks.0.attn.relative_position_index has (49, 49), but layers.2.blocks.0.attn.relative_position_index has [49, 49]
layers.2.blocks.1.attn.relative_position_index has (49, 49), but layers.2.blocks.1.attn.relative_position_index has [49, 49]
layers.2.blocks.2.attn.relative_position_index has (49, 49), but layers.2.blocks.2.attn.relative_position_index has [49, 49]
layers.2.blocks.3.attn.relative_position_index has (49, 49), but layers.2.blocks.3.attn.relative_position_index has [49, 49]
layers.2.blocks.4.attn.relative_position_index has (49, 49), but layers.2.blocks.4.attn.relative_position_index has [49, 49]
layers.2.blocks.5.attn.relative_position_index has (49, 49), but layers.2.blocks.5.attn.relative_position_index has [49, 49]
layers.2.blocks.6.attn.relative_position_index has (49, 49), but layers.2.blocks.6.attn.relative_position_index has [49, 49]
layers.2.blocks.7.attn.relative_position_index has (49, 49), but layers.2.blocks.7.attn.relative_position_index has [49, 49]
layers.2.blocks.8.attn.relative_position_index has (49, 49), but layers.2.blocks.8.attn.relative_position_index has [49, 49]
layers.2.blocks.9.attn.relative_position_index has (49, 49), but layers.2.blocks.9.attn.relative_position_index has [49, 49]
layers.2.blocks.10.attn.relative_position_index has (49, 49), but layers.2.blocks.10.attn.relative_position_index has [49, 49]
layers.2.blocks.11.attn.relative_position_index has (49, 49), but layers.2.blocks.11.attn.relative_position_index has [49, 49]
layers.2.blocks.12.attn.relative_position_index has (49, 49), but layers.2.blocks.12.attn.relative_position_index has [49, 49]
layers.2.blocks.13.attn.relative_position_index has (49, 49), but layers.2.blocks.13.attn.relative_position_index has [49, 49]
layers.2.blocks.14.attn.relative_position_index has (49, 49), but layers.2.blocks.14.attn.relative_position_index has [49, 49]
layers.2.blocks.15.attn.relative_position_index has (49, 49), but layers.2.blocks.15.attn.relative_position_index has [49, 49]
layers.2.blocks.16.attn.relative_position_index has (49, 49), but layers.2.blocks.16.attn.relative_position_index has [49, 49]
layers.2.blocks.17.attn.relative_position_index has (49, 49), but layers.2.blocks.17.attn.relative_position_index has [49, 49]
layers.3.blocks.0.attn.relative_position_index has (49, 49), but layers.3.blocks.0.attn.relative_position_index has [49, 49]
layers.3.blocks.1.attn.relative_position_index has (49, 49), but layers.3.blocks.1.attn.relative_position_index has [49, 49]
layers.0.blocks.0.attn.relative_position_bias_table has (169, 3), but layers.0.blocks.0.attn.relative_position_bias_table has [169, 3]
layers.0.blocks.1.attn.relative_position_bias_table has (169, 3), but layers.0.blocks.1.attn.relative_position_bias_table has [169, 3]
layers.1.blocks.0.attn.relative_position_bias_table has (169, 6), but layers.1.blocks.0.attn.relative_position_bias_table has [169, 6]
layers.1.blocks.1.attn.relative_position_bias_table has (169, 6), but layers.1.blocks.1.attn.relative_position_bias_table has [169, 6]
layers.2.blocks.0.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.0.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.1.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.1.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.2.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.2.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.3.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.3.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.4.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.4.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.5.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.5.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.6.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.6.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.7.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.7.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.8.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.8.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.9.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.9.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.10.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.10.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.11.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.11.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.12.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.12.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.13.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.13.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.14.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.14.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.15.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.15.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.16.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.16.attn.relative_position_bias_table has [169, 12]
layers.2.blocks.17.attn.relative_position_bias_table has (169, 12), but layers.2.blocks.17.attn.relative_position_bias_table has [169, 12]
layers.3.blocks.0.attn.relative_position_bias_table has (169, 24), but layers.3.blocks.0.attn.relative_position_bias_table has [169, 24]
layers.3.blocks.1.attn.relative_position_bias_table has (169, 24), but layers.3.blocks.1.attn.relative_position_bias_table has [169, 24]
layers.0.downsample.reduction.weight has (384, 192), but layers.0.downsample.reduction.weight has [384, 192]
layers.1.downsample.reduction.weight has (768, 384), but layers.1.downsample.reduction.weight has [768, 384]
layers.2.downsample.reduction.weight has (1536, 768), but layers.2.downsample.reduction.weight has [1536, 768]
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
[07/30 13:37:38 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690695481 (unix time) try "date -d @1690695481" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x52b7) received by PID 21226 (TID 0x7f3d5e904240) from PID 21175 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0730 13:46:32.542202 33136 tcp_utils.cc:130] Successfully connected to 172.17.0.7:44002
W0730 13:46:34.713821 33136 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:46:34.714653 33136 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[07/30 13:46:36 ufo]: Rank of current process: 0. World size: 1
[07/30 13:46:38 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:46:38 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:46:39 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomCrop[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:46:39 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f50575ba3d0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.25s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:46:43 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:46:44 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 3500, 'max_to_keep': 15}, 'eval_period': 3500, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f5058854040>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f505885f8b0>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f5058864310>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f50584da8b0>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f50584da940>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'RandomCrop': {}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f50584df4c0>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f50584df430>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f505885f940>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f505885f8b0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f5058864310>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f50584d4b80>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f5058a5fd30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f50584df4c0>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f50584df430>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f5141fef670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f5141fef5e0>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[07/30 13:46:55 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   unsqueeze_ad_func(paddle::experimental::Tensor const&, paddle::experimental::IntArrayBase<paddle::experimental::Tensor>)
1   paddle::experimental::unsqueeze_intermediate(paddle::experimental::Tensor const&, paddle::experimental::IntArrayBase<paddle::experimental::Tensor> const&)
2   paddle::experimental::PrepareData(paddle::experimental::Tensor const&, phi::TensorArgDef const&, paddle::experimental::TransformFlag const&)
3   paddle::experimental::TransformData(phi::DenseTensor*, phi::TensorArgDef const&, paddle::experimental::TransformFlag const&)
4   paddle::experimental::TransDataPlace(phi::DenseTensor const&, phi::Place)
5   paddle::framework::TensorCopySync(phi::DenseTensor const&, phi::Place const&, phi::DenseTensor*)
6   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
7   void paddle::memory::Copy<phi::GPUPlace, phi::GPUPinnedPlace>(phi::GPUPlace, void*, phi::GPUPinnedPlace, void const*, unsigned long, void*)
8   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1690696688 (unix time) try "date -d @1690696688" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x8139) received by PID 33136 (TID 0x7f51cc92e240) from PID 33081 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0730 13:58:38.101358 49544 tcp_utils.cc:130] Successfully connected to 172.17.0.7:41342
W0730 13:58:43.188287 49544 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0730 13:58:43.189092 49544 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[07/30 13:58:45 ufo]: Rank of current process: 0. World size: 1
[07/30 13:58:47 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[07/30 13:58:47 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[07/30 13:58:47 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[07/30 13:58:48 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f26987a2040>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.21s)
creating index...
index created!
COCODataSet has 6103 samples
[07/30 13:58:54 ufo]: Autoscale fgvc number of classes: 196
[07/30 13:58:54 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 3500, 'max_to_keep': 15}, 'eval_period': 3500, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f2698bf5040>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f2698c018b0>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f2698c05310>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f269887b8b0>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f269887b940>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f26988804c0>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f2698880430>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f2698c01940>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f2698c018b0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f2698c05310>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f2698874b80>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f26a40acd30>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f26988804c0>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f2698880430>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f277ea52670>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f277ea525e0>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[07/30 13:59:03 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691068249 (unix time) try "date -d @1691068249" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0xc14b) received by PID 49544 (TID 0x7f2809392240) from PID 49483 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0803 21:11:27.253028 176366 tcp_utils.cc:107] Retry to connect to 172.17.0.7:55911 while the server is not yet listening.
I0803 21:11:30.253337 176366 tcp_utils.cc:130] Successfully connected to 172.17.0.7:55911
W0803 21:11:32.666721 176366 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0803 21:11:32.667874 176366 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[08/03 21:11:35 ufo]: Rank of current process: 0. World size: 1
[08/03 21:11:38 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/03 21:11:39 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/03 21:11:39 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomRotation[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomAffine[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomScaleAspect[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m
[38;5;15m                        [39m[38;5;242m# 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mAutoAugment[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mautoaug_type[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mv2[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mCLAHE[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAEmboss[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHist[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBBoxJitter[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mHSVAugment[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomExpand[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomErasingImage[39m[38;5;197m=[39m[38;5;15m([39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAABlur[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAElastic[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAWeather[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAAColor[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mIAANoise[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.2[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;242m# train.init_checkpoint = '/home/Lian.qy/SSD/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230625_1/model_0020999.pdmodel'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/03 21:11:39 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fe42996f250>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.30s)
creating index...
index created!
COCODataSet has 6103 samples
[08/03 21:11:46 ufo]: Autoscale fgvc number of classes: 196
[08/03 21:11:46 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': None, 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomRotation'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.RandomAffine'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomScaleAspect'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.CLAHE'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAEmboss'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.Hist'>}, {'_target_': <class 'data.transforms.seg_transforms.HSVAugment'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAABlur'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAElastic'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAWeather'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAAColor'>}, {'prob': 0.2, '_target_': <class 'data.transforms.seg_transforms.IAANoise'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fe42abdb0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fe42abe7940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fe42abed3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fe42a863940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fe42a8639d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'AutoAugment': {'autoaug_type': 'v2'}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'CLAHE': {'prob': 0.2}}, {'IAAEmboss': {'prob': 0.2}}, {'Hist': {'prob': 0.2}}, {'BBoxJitter': {}}, {'HSVAugment': {}}, {'RandomExpand': {'prob': 0.2}}, {'RandomErasingImage': {'prob': 0.2}}, {'IAABlur': {'prob': 0.2}}, {'IAAElastic': {'prob': 0.2}}, {'IAAWeather': {'prob': 0.2}}, {'IAAColor': {'prob': 0.2}}, {'IAANoise': {'prob': 0.2}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fe42a867550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fe42a8674c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fe42abe79d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fe42abe7940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fe42abed3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fe42a85cc10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fe42ade7dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fe42a867550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fe42a8674c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fe515a75700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fe515a75670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/03 21:11:55 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0804 18:53:59.243640 313830 tcp_utils.cc:130] Successfully connected to 172.17.0.7:39419
W0804 18:54:00.955976 313830 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 18:54:00.956712 313830 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[08/04 18:54:03 ufo]: Rank of current process: 0. World size: 1
[08/04 18:54:05 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 18:54:05 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_2.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 18:54:05 ufo]: Contents of args.config_file=configs/swin_small_230730_2.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m
[38;5;15m                        [39m
[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0185499.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_2[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 18:54:06 ufo]: Full config saved to outputs/swinbase_joint_training_230730_2/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fbd2ae891f0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.26s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 18:54:10 ufo]: Autoscale fgvc number of classes: 196
[08/04 18:54:10 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_2', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0185499.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fbd2bfaa0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fbd2bfb7940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fbd2bfbc3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fbd2bc33940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fbd2bc339d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fbd2bc37550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fbd2bc374c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fbd2bfb79d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fbd2bfb7940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fbd2bfbc3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fbd2bc2bc10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fbd2c1b6dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fbd2bc37550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fbd2bc374c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fbe184ad700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fbe184ad670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 18:54:18 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691146615 (unix time) try "date -d @1691146615" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x4c9c2) received by PID 313830 (TID 0x7fbe9ede9240) from PID 313794 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0804 18:58:44.788992 321964 tcp_utils.cc:107] Retry to connect to 172.17.0.7:38485 while the server is not yet listening.
I0804 18:58:47.789230 321964 tcp_utils.cc:130] Successfully connected to 172.17.0.7:38485
W0804 18:58:49.725606 321964 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 18:58:49.726415 321964 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[08/04 18:58:51 ufo]: Rank of current process: 0. World size: 1
[08/04 18:58:54 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 18:58:54 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_2.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 18:58:54 ufo]: Contents of args.config_file=configs/swin_small_230730_2.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0185499.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_2[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 18:58:54 ufo]: Full config saved to outputs/swinbase_joint_training_230730_2/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f6763574220>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.25s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 18:58:59 ufo]: Autoscale fgvc number of classes: 196
[08/04 18:58:59 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_2', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0185499.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f67646760d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f6764683940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f67646873a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f67642fe940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f67642fe9d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f6764302550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f67643024c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f67646839d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f6764683940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f67646873a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f67642f6c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f6764881dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f6764302550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f67643024c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f684b717700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f684b717670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 18:59:07 ufo]: Optim:
Weight Decay, params: 
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1044, in load
    load_result = pickle.load(f, encoding='latin1')
_pickle.UnpicklingError: pickle data was truncated

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1076, in load
    tensor, _ = _load_selected_rows(path)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 610, in _load_selected_rows
    _seek = core.load_selected_rows(temp_sr, file_name)
ValueError: (InvalidArgument) Only version 0 SelectedRows is supported.
  [Hint: Expected version == 0U, but received version:3532981376 != 0U:0.] (at /paddle/paddle/phi/core/serialization.cc:163)


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1080, in load
    tensor, _ = _load_lod_tensor(path)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 567, in _load_lod_tensor
    _seek = paddle.fluid.core.load_lod_tensor(temp_t, file_name)
ValueError: (InvalidArgument) Deserialize to tensor failed, maybe the loaded file is not a paddle model(expected file format: 0, but 3532981376 found).
  [Hint: Expected version == 0U, but received version:3532981376 != 0U:0.] (at /paddle/paddle/phi/core/serialization.cc:106)


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1091, in load
    program = Program.parse_from_string(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/framework.py", line 6301, in parse_from_string
    p.desc = core.ProgramDesc(binary_str)
ValueError: (InvalidArgument) Failed to parse program_desc from binary string.
  [Hint: Expected desc_.ParseFromString(binary_str) == true, but received desc_.ParseFromString(binary_str):0 != true:1.] (at /paddle/paddle/fluid/framework/program_desc.cc:143)


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 154, in do_train
    checkpointer.resume_or_load(cfg.train.init_checkpoint, resume=args.resume)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 211, in resume_or_load
    return self.load(path, checkpointables=[])
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 121, in load
    checkpoint = self._load_file(path)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 236, in _load_file
    return paddle.load(f)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1096, in load
    raise ValueError(
ValueError: `paddle.load` can not parse the file:/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0185499.pdmodel.
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0804 19:00:11.164014 328816 tcp_utils.cc:130] Successfully connected to 172.17.0.7:59932
W0804 19:00:16.204720 328816 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:00:16.205528 328816 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[08/04 19:00:17 ufo]: Rank of current process: 0. World size: 1
[08/04 19:00:20 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:00:20 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_2.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:00:20 ufo]: Contents of args.config_file=configs/swin_small_230730_2.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0185499.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_2[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:00:20 ufo]: Full config saved to outputs/swinbase_joint_training_230730_2/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fecd753d250>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.24s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:00:25 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:00:25 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_2', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0185499.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fecd87280d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fecd8734940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fecd87393a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fecd83b0940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fecd83b09d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fecd83b4550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fecd83b44c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fecd87349d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fecd8734940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fecd87393a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fecd83a8c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fecd8933dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fecd83b4550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fecd83b44c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fedbe49d700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fedbe49d670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:00:33 ufo]: Optim:
Weight Decay, params: 
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1044, in load
    load_result = pickle.load(f, encoding='latin1')
_pickle.UnpicklingError: pickle data was truncated

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1076, in load
    tensor, _ = _load_selected_rows(path)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 610, in _load_selected_rows
    _seek = core.load_selected_rows(temp_sr, file_name)
ValueError: (InvalidArgument) Only version 0 SelectedRows is supported.
  [Hint: Expected version == 0U, but received version:3532981376 != 0U:0.] (at /paddle/paddle/phi/core/serialization.cc:163)


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1080, in load
    tensor, _ = _load_lod_tensor(path)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 567, in _load_lod_tensor
    _seek = paddle.fluid.core.load_lod_tensor(temp_t, file_name)
ValueError: (InvalidArgument) Deserialize to tensor failed, maybe the loaded file is not a paddle model(expected file format: 0, but 3532981376 found).
  [Hint: Expected version == 0U, but received version:3532981376 != 0U:0.] (at /paddle/paddle/phi/core/serialization.cc:106)


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1091, in load
    program = Program.parse_from_string(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/framework.py", line 6301, in parse_from_string
    p.desc = core.ProgramDesc(binary_str)
ValueError: (InvalidArgument) Failed to parse program_desc from binary string.
  [Hint: Expected desc_.ParseFromString(binary_str) == true, but received desc_.ParseFromString(binary_str):0 != true:1.] (at /paddle/paddle/fluid/framework/program_desc.cc:143)


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 154, in do_train
    checkpointer.resume_or_load(cfg.train.init_checkpoint, resume=args.resume)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 211, in resume_or_load
    return self.load(path, checkpointables=[])
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 121, in load
    checkpoint = self._load_file(path)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 236, in _load_file
    return paddle.load(f)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/framework/io.py", line 1096, in load
    raise ValueError(
ValueError: `paddle.load` can not parse the file:/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0185499.pdmodel.
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0804 19:01:33.937862 335621 tcp_utils.cc:107] Retry to connect to 172.17.0.7:62141 while the server is not yet listening.
I0804 19:01:36.938223 335621 tcp_utils.cc:130] Successfully connected to 172.17.0.7:62141
W0804 19:01:38.493172 335621 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:01:38.493957 335621 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[08/04 19:01:40 ufo]: Rank of current process: 0. World size: 1
[08/04 19:01:42 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:01:42 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_2.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:01:42 ufo]: Contents of args.config_file=configs/swin_small_230730_2.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_2[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:01:42 ufo]: Full config saved to outputs/swinbase_joint_training_230730_2/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fb7898fa1f0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.19s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:01:46 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:01:46 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_2', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_2/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fb78aa1c0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fb78aa29940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fb78aa2e3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fb78a6a4940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fb78a6a49d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fb78a6a9550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fb78a6a94c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fb78aa299d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fb78aa29940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fb78aa2e3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fb78a69dc10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fb78ac28dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fb78a6a9550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fb78a6a94c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fb874c55700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fb874c55670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:01:54 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691147074 (unix time) try "date -d @1691147074" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x51ede) received by PID 335621 (TID 0x7fb8fb591240) from PID 335582 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0804 19:07:59.608520 344235 tcp_utils.cc:107] Retry to connect to 172.17.0.7:60447 while the server is not yet listening.
I0804 19:08:02.608851 344235 tcp_utils.cc:130] Successfully connected to 172.17.0.7:60447
W0804 19:08:04.545591 344235 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:08:04.546427 344235 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[08/04 19:08:06 ufo]: Rank of current process: 0. World size: 1
[08/04 19:08:08 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:08:08 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:08:08 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:08:08 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fa904d32250>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.25s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:08:13 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:08:13 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fa905f0d0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fa905f1a940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fa905f1e3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fa905b95940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fa905b959d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fa905b99550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fa905b994c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fa905f1a9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fa905f1a940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fa905f1e3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fa905b8dc10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fa906118dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fa905b99550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fa905b994c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fa9f02a1700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fa9f02a1670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:08:21 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::experimental::Tensor::copy_to(phi::Place const&, bool) const
1   paddle::experimental::copy_to(paddle::experimental::Tensor const&, phi::Place const&, bool)
2   paddle::experimental::copy_to_impl(paddle::experimental::Tensor const&, phi::Place, bool)
3   paddle::experimental::copy(paddle::experimental::Tensor const&, phi::Place const&, bool, paddle::experimental::Tensor*)
4   void phi::Copy<phi::DeviceContext>(phi::DeviceContext const&, phi::DenseTensor const&, phi::Place, bool, phi::DenseTensor*)
5   void paddle::memory::Copy<phi::Place, phi::Place>(phi::Place, void*, phi::Place, void const*, unsigned long, void*)
6   void paddle::memory::Copy<phi::CPUPlace, phi::GPUPlace>(phi::CPUPlace, void*, phi::GPUPlace, void const*, unsigned long, void*)
7   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691147453 (unix time) try "date -d @1691147453" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x54085) received by PID 344235 (TID 0x7faa76bdd240) from PID 344197 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0804 19:14:08.945653 352768 tcp_utils.cc:107] Retry to connect to 172.17.0.7:39745 while the server is not yet listening.
I0804 19:14:11.945936 352768 tcp_utils.cc:130] Successfully connected to 172.17.0.7:39745
W0804 19:14:14.245512 352768 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:14:14.246361 352768 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[08/04 19:14:15 ufo]: Rank of current process: 0. World size: 1
[08/04 19:14:18 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:14:18 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:14:18 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_2[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:14:18 ufo]: Full config saved to outputs/swinbase_joint_training_230730_2/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fb82220a340>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.22s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:14:23 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:14:23 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_2', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fb8233e30d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fb8233f1940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fb8233f43a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fb82306b940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fb82306b9d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fb82306f550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fb82306f4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fb8233f19d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fb8233f1940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fb8233f43a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fb823064c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fb8235eedc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fb82306f550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fb82306f4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fb90a2e1700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fb90a2e1670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:14:32 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   phi::backends::gpu::GpuMemcpySync(void*, void const*, unsigned long, cudaMemcpyKind)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691147820 (unix time) try "date -d @1691147820" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x561d9) received by PID 352768 (TID 0x7fb994c1e240) from PID 352729 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0804 19:17:29.553391 360273 tcp_utils.cc:107] Retry to connect to 172.17.0.7:47888 while the server is not yet listening.
I0804 19:17:32.553670 360273 tcp_utils.cc:130] Successfully connected to 172.17.0.7:47888
W0804 19:17:34.802053 360273 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:17:34.803342 360273 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[08/04 19:17:36 ufo]: Rank of current process: 0. World size: 1
[08/04 19:17:39 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:17:39 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:17:39 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:17:40 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f85f44cb220>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.28s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:17:44 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:17:44 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f85f56c60d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f85f56d3940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f85f56d83a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f85f534e940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f85f534e9d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f85f5352550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f85f53524c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f85f56d39d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f85f56d3940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f85f56d83a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f85f5346c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f85f58d1dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f85f5352550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f85f53524c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f86db817700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f86db817670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:17:52 ufo]: Optim:
Weight Decay, params: 


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
No stack trace in paddle, may be caused by external reasons.

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691147882 (unix time) try "date -d @1691147882" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x57f2a) received by PID 360273 (TID 0x7f8766176240) from PID 360234 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0804 19:21:35.187300 368305 tcp_utils.cc:107] Retry to connect to 172.17.0.7:58715 while the server is not yet listening.
I0804 19:21:38.187597 368305 tcp_utils.cc:130] Successfully connected to 172.17.0.7:58715
W0804 19:21:40.162971 368305 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:21:40.163748 368305 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[08/04 19:21:41 ufo]: Rank of current process: 0. World size: 1
[08/04 19:21:44 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:21:44 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:21:44 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:21:44 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7fe166a972e0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.24s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:21:49 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:21:49 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7fe167c8f0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7fe167c9c940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fe167ca03a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7fe167917940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7fe1679179d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7fe16791b550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fe16791b4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7fe167c9c9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7fe167c9c940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7fe167ca03a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7fe16790fc10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7fe167e9adc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7fe16791b550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7fe16791b4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7fe250a20700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7fe250a20670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:21:58 ufo]: Optim:
Weight Decay, params: 
Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 154, in do_train
    checkpointer.resume_or_load(cfg.train.init_checkpoint, resume=args.resume)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 209, in resume_or_load
    return self.load(path)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./fastreid/utils/checkpoint.py", line 119, in load
    assert os.path.isfile(path), "Checkpoint {} not found!".format(path)
AssertionError: Checkpoint outputs/swinbase_joint_training_230730_1/model_final.pdmodel not found!
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0804 19:25:11.729591 375837 tcp_utils.cc:130] Successfully connected to 172.17.0.7:35180
W0804 19:25:16.949275 375837 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:25:16.950106 375837 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[08/04 19:25:18 ufo]: Rank of current process: 0. World size: 1
[08/04 19:25:21 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:25:21 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:25:21 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:25:21 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f15e5b041f0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.23s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:25:25 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:25:25 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f15e6cdb0d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f15e6ce7940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f15e6cec3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f15e6963940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f15e69639d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f15e6967550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f15e69674c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f15e6ce79d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f15e6ce7940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f15e6cec3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f15e695bc10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f15e6ee6dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f15e6967550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f15e69674c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f16d0c34700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f16d0c34670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:25:35 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []
ERROR: Unexpected BUS error encountered in DataLoader worker. This might be caused by insufficient shared memory (shm), please check whether use_shared_memory is set and storage space in /dev/shm is enough
 Exception during training:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 143, in forward
    task_outputs = self.heads[self.task2head_mapping[task_name]]([feats], batched_inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/detr.py", line 47, in forward
    out_transformer = self.transformer(body_feats, pad_mask, inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 539, in forward
    self._get_decoder_input(
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 618, in _get_decoder_input
    output_memory, output_anchors = self._get_encoder_output_anchors(
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 602, in _get_encoder_output_anchors
    valid_mask = (valid_mask * (memory_mask.unsqueeze(-1) > 0)) > 0
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/math_op_patch.py", line 304, in __impl__
    return math_op(self, other_var, -1)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/multiprocess_utils.py", line 135, in __handler__
    core._throw_error_if_process_failed()
SystemError: (Fatal) DataLoader process (pid   1. If run DataLoader by DataLoader.from_generator(...), queue capacity is set by from_generator(..., capacity=xx, ...).
  2. If run DataLoader by DataLoader(dataset, ...), queue capacity is set as 2 times of the max value of num_workers and len(places).
  3. If run by DataLoader(dataset, ..., use_shared_memory=True), set use_shared_memory=False for not using shared memory.) exited is killed by signal: 377156.
  It may be caused by insufficient shared storage space. This problem usually occurs when using docker as a development environment.
  Please use command `df -h` to check the storage space of `/dev/shm`. Shared storage space needs to be greater than (DataLoader Num * DataLoader queue capacity * 1 batch data size).
  You can solve this problem by increasing the shared storage space or reducing the queue capacity appropriately.
Bus error (at /paddle/paddle/fluid/imperative/data_loader.cc:183)

Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 162, in do_train
    trainer.train(start_iter, cfg.train.max_iter)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 143, in forward
    task_outputs = self.heads[self.task2head_mapping[task_name]]([feats], batched_inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/detr.py", line 47, in forward
    out_transformer = self.transformer(body_feats, pad_mask, inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 539, in forward
    self._get_decoder_input(
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 618, in _get_decoder_input
    output_memory, output_anchors = self._get_encoder_output_anchors(
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 602, in _get_encoder_output_anchors
    valid_mask = (valid_mask * (memory_mask.unsqueeze(-1) > 0)) > 0
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/math_op_patch.py", line 304, in __impl__
    return math_op(self, other_var, -1)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/multiprocess_utils.py", line 135, in __handler__
    core._throw_error_if_process_failed()
SystemError: (Fatal) DataLoader process (pid   1. If run DataLoader by DataLoader.from_generator(...), queue capacity is set by from_generator(..., capacity=xx, ...).
  2. If run DataLoader by DataLoader(dataset, ...), queue capacity is set as 2 times of the max value of num_workers and len(places).
  3. If run by DataLoader(dataset, ..., use_shared_memory=True), set use_shared_memory=False for not using shared memory.) exited is killed by signal: 377156.
  It may be caused by insufficient shared storage space. This problem usually occurs when using docker as a development environment.
  Please use command `df -h` to check the storage space of `/dev/shm`. Shared storage space needs to be greater than (DataLoader Num * DataLoader queue capacity * 1 batch data size).
  You can solve this problem by increasing the shared storage space or reducing the queue capacity appropriately.
Bus error (at /paddle/paddle/fluid/imperative/data_loader.cc:183)

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0804 19:28:15.181978 383254 tcp_utils.cc:130] Successfully connected to 172.17.0.7:63034
W0804 19:28:17.383637 383254 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:28:17.384459 383254 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[08/04 19:28:19 ufo]: Rank of current process: 0. World size: 1
[08/04 19:28:20 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:28:20 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:28:21 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:28:21 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f460efc81f0>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.19s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:28:24 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:28:24 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f46100e90d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f46100f6940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f46100fb3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f460fd71940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f460fd719d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f460fd76550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f460fd764c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f46100f69d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f46100f6940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f46100fb3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f460fd6ac10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f46102f5dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f460fd76550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f460fd764c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f46f981b700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f46f981b670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:28:34 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []
ERROR: Unexpected BUS error encountered in DataLoader worker. This might be caused by insufficient shared memory (shm), please check whether use_shared_memory is set and storage space in /dev/shm is enough
 Exception during training:
Traceback (most recent call last):
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 143, in forward
    task_outputs = self.heads[self.task2head_mapping[task_name]]([feats], batched_inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/detr.py", line 47, in forward
    out_transformer = self.transformer(body_feats, pad_mask, inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 544, in forward
    inter_feats, inter_ref_bboxes_unact = self.decoder(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 283, in forward
    output = layer(output, reference_points_input, memory,
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 223, in forward
    tgt2 = self.self_attn(q, k, value=tgt, attn_mask=attn_mask)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/layers.py", line 1280, in forward
    q, k, v = (self.compute_qkv(t, i)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/layers.py", line 1280, in <genexpr>
    q, k, v = (self.compute_qkv(t, i)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/layers.py", line 1228, in compute_qkv
    bias=self.in_proj_bias[index * self.embed_dim:(index + 1) *
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/varbase_patch_methods.py", line 753, in __getitem__
    return self._getitem_index_not_tensor(item)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/multiprocess_utils.py", line 135, in __handler__
    core._throw_error_if_process_failed()
SystemError: (Fatal) DataLoader process (pid   1. If run DataLoader by DataLoader.from_generator(...), queue capacity is set by from_generator(..., capacity=xx, ...).
  2. If run DataLoader by DataLoader(dataset, ...), queue capacity is set as 2 times of the max value of num_workers and len(places).
  3. If run by DataLoader(dataset, ..., use_shared_memory=True), set use_shared_memory=False for not using shared memory.) exited is killed by signal: 383523.
  It may be caused by insufficient shared storage space. This problem usually occurs when using docker as a development environment.
  Please use command `df -h` to check the storage space of `/dev/shm`. Shared storage space needs to be greater than (DataLoader Num * DataLoader queue capacity * 1 batch data size).
  You can solve this problem by increasing the shared storage space or reducing the queue capacity appropriately.
Bus error (at /paddle/paddle/fluid/imperative/data_loader.cc:183)

Traceback (most recent call last):
  File "tools/ufo_train.py", line 231, in <module>
    main(args)
  File "tools/ufo_train.py", line 225, in main
    do_train(args, cfg)
  File "tools/ufo_train.py", line 162, in do_train
    trainer.train(start_iter, cfg.train.max_iter)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 154, in train
    self.run_step()
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/engine/train_loop.py", line 305, in run_step
    task_loss_dict = self.model({task_name: val}) #self.teacher)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/parallel.py", line 774, in forward
    outputs = self._layers(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/meta_arch/multitask_v3.py", line 143, in forward
    task_outputs = self.heads[self.task2head_mapping[task_name]]([feats], batched_inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/autodl-tmp/Open-TransMind/PAZHOU/base/./modeling/heads/detr.py", line 47, in forward
    out_transformer = self.transformer(body_feats, pad_mask, inputs)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 544, in forward
    inter_feats, inter_ref_bboxes_unact = self.decoder(
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 283, in forward
    output = layer(output, reference_points_input, memory,
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/transformers/dino_transformer.py", line 223, in forward
    tgt2 = self.self_attn(q, k, value=tgt, attn_mask=attn_mask)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/layers.py", line 1012, in __call__
    return self.forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/layers.py", line 1280, in forward
    q, k, v = (self.compute_qkv(t, i)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/layers.py", line 1280, in <genexpr>
    q, k, v = (self.compute_qkv(t, i)
  File "/root/miniconda3/lib/python3.8/site-packages/ppdet/modeling/layers.py", line 1228, in compute_qkv
    bias=self.in_proj_bias[index * self.embed_dim:(index + 1) *
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/dygraph/varbase_patch_methods.py", line 753, in __getitem__
    return self._getitem_index_not_tensor(item)
  File "/root/miniconda3/lib/python3.8/site-packages/paddle/fluid/multiprocess_utils.py", line 135, in __handler__
    core._throw_error_if_process_failed()
SystemError: (Fatal) DataLoader process (pid   1. If run DataLoader by DataLoader.from_generator(...), queue capacity is set by from_generator(..., capacity=xx, ...).
  2. If run DataLoader by DataLoader(dataset, ...), queue capacity is set as 2 times of the max value of num_workers and len(places).
  3. If run by DataLoader(dataset, ..., use_shared_memory=True), set use_shared_memory=False for not using shared memory.) exited is killed by signal: 383523.
  It may be caused by insufficient shared storage space. This problem usually occurs when using docker as a development environment.
  Please use command `df -h` to check the storage space of `/dev/shm`. Shared storage space needs to be greater than (DataLoader Num * DataLoader queue capacity * 1 batch data size).
  You can solve this problem by increasing the shared storage space or reducing the queue capacity appropriately.
Bus error (at /paddle/paddle/fluid/imperative/data_loader.cc:183)

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0804 19:32:59.875641  1540 tcp_utils.cc:130] Successfully connected to 172.17.0.5:61240
W0804 19:33:01.859460  1540 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0804 19:33:01.860620  1540 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[08/04 19:33:03 ufo]: Rank of current process: 0. World size: 1
[08/04 19:33:05 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/04 19:33:05 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/04 19:33:05 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/04 19:33:06 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f94270eb340>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.22s)
creating index...
index created!
COCODataSet has 6103 samples
[08/04 19:33:10 ufo]: Autoscale fgvc number of classes: 196
[08/04 19:33:10 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f94281e90d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f94281f6940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f94281fb3a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f9427e72940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f9427e729d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f9427e76550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f9427e764c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f94281f69d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f94281f6940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f94281fb3a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f9427e6ac10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f94283f5dc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f9427e76550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f9427e764c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f95128eb700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f95128eb670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/04 19:33:19 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::distributed::ProcessGroupNCCL::NCCLTask::Wait(std::chrono::duration<long, std::ratio<1l, 1000l> >)

----------------------
Error Message Summary:
----------------------
FatalError: `Termination signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1691165889 (unix time) try "date -d @1691165889" if you are using GNU date ***]
  [SignalInfo: *** SIGTERM (@0x5dd) received by PID 1540 (TID 0x7f959d23f240) from PID 1501 ***]

/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
/root/autodl-tmp/Open-TransMind/PAZHOU/base/./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:387: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional_pil.py:545: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:288: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img: Tensor, size: List[int], interpolation: int = Image.BILINEAR) -> Tensor:
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/functional.py:419: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  img: Tensor, top: int, left: int, height: int, width: int, size: List[int], interpolation: int = Image.BILINEAR
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:26: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  Image.NEAREST: 'PIL.Image.NEAREST',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:27: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  Image.BILINEAR: 'PIL.Image.BILINEAR',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  Image.BICUBIC: 'PIL.Image.BICUBIC',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:29: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
  Image.LANCZOS: 'PIL.Image.LANCZOS',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:30: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
  Image.HAMMING: 'PIL.Image.HAMMING',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:31: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
  Image.BOX: 'PIL.Image.BOX',
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:250: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, interpolation=Image.BILINEAR):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:671: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, distortion_scale=0.5, p=0.5, interpolation=Image.BILINEAR, fill=0):
/root/miniconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:752: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, size, scale=(0.08, 1.0), ratio=(3. / 4., 4. / 3.), interpolation=Image.BILINEAR):
rank is 3, world size is 4
I0805 00:45:59.689929 73378 tcp_utils.cc:130] Successfully connected to 172.17.0.5:57537
W0805 00:46:04.549248 73378 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 11.6, Runtime API Version: 11.2
W0805 00:46:04.550066 73378 gpu_resources.cc:91] device: 3, cuDNN Version: 8.9.
[08/05 00:46:06 ufo]: Rank of current process: 0. World size: 1
[08/05 00:46:09 ufo]: Environment info:
----------------------  ---------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.5
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CUDA compiler           Build cuda_11.2.r11.2/compiler.29618528_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.7.1 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA A40 (arch={cap})
Driver version          510.47.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.8.2 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20220119
iopath                  0.1.10
cv2                     4.4.0
----------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/05 00:46:09 ufo]: Command line arguments: Namespace(config_file='configs/swin_small_230730_1.py', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=True)
[08/05 00:46:09 ufo]: Contents of args.config_file=configs/swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mResizeStepScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomPaddingCrop[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeRangeScaling[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mRandomRotation[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomDistort[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomAffine[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomScaleAspect[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCLAHE[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAEmboss[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHist[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mHSVAugment[39m[38;5;15m,[39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mIAABlur[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAElastic[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAWeather[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAAColor[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mIAANoise[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mRandomCenterCrop[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluator[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;242m# 使用了自定义的增强[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTask[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTask[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15msolver[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_lr_scheduler_lazy[39m
[38;5;242m# from modeling.backbones.swin_transformer import build_swin_backbone_lazy[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m


[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResizeStepScaling[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mmin_scale_factor[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mmax_scale_factor[39m[38;5;197m=[39m[38;5;141m2.0[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mscale_step_size[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# 第一个是宽度，第二个是高度，原来配置中搞错了！[39m
[38;5;15m                        [39m[38;5;242m# L(RandomPaddingCrop)(crop_size=[720, 1280]), [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomPaddingCrop[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mcrop_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;242m# L(ResizeRangeScaling)(),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomRotation)(prob=0.2),[39m

[38;5;15m                        [39m[38;5;242m# L(RandomAffine)(prob=0.2),[39m
[38;5;15m                       [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomHorizontalFlip[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                        [39m[38;5;242m# L(RandomScaleAspect)(),  [39m
[38;5;15m                        [39m[38;5;242m# # 颜色类的都可以直接[39m
[38;5;15m                        [39m[38;5;242m# L(CLAHE)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAEmboss)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(Hist)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(HSVAugment)(), [39m
[38;5;15m                        [39m[38;5;242m# L(IAABlur)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAElastic)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAWeather)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAAColor)(prob=0.2), [39m
[38;5;15m                        [39m[38;5;242m# L(IAANoise)(prob=0.2), [39m

[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mGenerateInstanceTargets[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mignore_index[39m[38;5;197m=[39m[38;5;141m255[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_vehiclemulti_train_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msampler_config[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m'[39m[38;5;186msampler_name[39m[38;5;186m'[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mClassAwareSampler[39m[38;5;186m'[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtrain_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_softmax_train_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnames[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15msize_train[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_rea[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mrea_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_flip[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdo_autoaug[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mautoaug_prob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m16[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomFlip[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mprob[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# 只能[39m
[38;5;15m                    [39m[38;5;242m# dict(AutoAugment=dict(autoaug_type="v2")),[39m

[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSelect[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mtransforms1[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;242m# 超过了1120就会爆显存[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m
[38;5;15m                                                [39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m640[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152, [39m
[38;5;15m                                                [39m[38;5;242m# 1184, [39m
[38;5;15m                                                [39m[38;5;242m# 1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mtransforms2[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;242m# 最小值不用太小，不然容易看不清楚[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;141m500[39m[38;5;15m,[39m[38;5;141m600[39m[38;5;15m,[39m[38;5;141m700[39m[38;5;15m,[39m[38;5;141m800[39m[38;5;15m,[39m[38;5;141m900[39m[38;5;15m,[39m[38;5;141m1000[39m[38;5;15m,[39m
[38;5;15m                                                                              [39m[38;5;141m1100[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m                                                                              [39m[38;5;15m][39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomSizeCrop[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                                     [39m[38;5;15mmin_size[39m[38;5;197m=[39m[38;5;141m400[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                     [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1200[39m
[38;5;15m                                                     [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomShortSideResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mshort_side_sizes[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                                                [39m[38;5;141m416[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m480[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m512[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m544[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m576[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m608[39m[38;5;15m,[39m[38;5;141m640[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m672[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m704[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m768[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m800[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m832[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m864[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m896[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m928[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m960[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m992[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1024[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1056[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;141m1088[39m[38;5;15m,[39m
[38;5;15m                                                [39m[38;5;141m1120[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                                [39m[38;5;242m# 1152,[39m
[38;5;15m                                                [39m[38;5;242m#  1184,[39m
[38;5;15m                                                [39m[38;5;242m#  1216, 1248, 1280[39m
[38;5;15m                                                [39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mmax_size[39m[38;5;197m=[39m[38;5;141m1120[39m[38;5;15m)[39m
[38;5;15m                                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                   [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mRandomDistort[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mbrightness_range[39m[38;5;197m=[39m[38;5;141m0.3[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbrightness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mcontrast_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mcontrast_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msaturation_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15msaturation_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15mhue_range[39m[38;5;197m=[39m[38;5;141m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mhue_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                                         [39m[38;5;15msharpness_range[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15msharpness_prob[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m                    [39m[38;5;242m# dict(RandomCrop=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(CLAHE=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAEmboss=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(Hist=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(BBoxJitter=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(HSVAugment=(dict())),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomExpand=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(RandomErasingImage=(dict(prob=0.2))),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAABlur=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAElastic=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAWeather=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAAColor=dict(prob=0.2)),[39m
[38;5;15m                    [39m[38;5;242m# dict(IAANoise=dict(prob=0.2)),[39m
[38;5;15m                    [39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeBox[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mBboxXYXY2XYWH[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtrain.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mis_crowd[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;197m-[39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mBDD100K[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtrain_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/train.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_label[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/cls/val.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m  [39m[38;5;242m# eval mode [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCODataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m736[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m736[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/train_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_bbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mgt_class[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mdifficult[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;242m# dataloader.evaluator = [[39m
[38;5;242m#     # segmentation[39m
[38;5;242m#     L(SegEvaluator)([39m
[38;5;242m#     ),  # train/eval mode[39m

[38;5;242m#     # classification[39m
[38;5;242m#     L(CommonClasEvaluatorSingleTask)([39m
[38;5;242m#         cfg=dict(), num_classes=196[39m
[38;5;242m#     ),   # train/eval mode[39m

[38;5;242m#     # detection[39m
[38;5;242m#     L(CocoDetEvaluatorSingleTask)([39m
[38;5;242m#         classwise=False, [39m
[38;5;242m#         output_eval=None,[39m
[38;5;242m#         bias=0, [39m
[38;5;242m#         IouType='bbox', [39m
[38;5;242m#         save_prediction_only=False,[39m
[38;5;242m#         parallel_evaluator=True,[39m
[38;5;242m#         num_valid_samples=3067, [39m
[38;5;242m#     ),  # train/eval mode[39m
[38;5;242m# ][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;242m# from modeling.backbones.swin_transformer import SwinTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m


[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m


[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;242m# pretrained='https://paddledet.bj.bcebos.com/models/pretrained/swin_base_patch4_window12_384_in22k.pdparams'[39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;242m# backbone=SwinTransformer_tiny_patch4_window7_224_maskformer,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15moptimizer[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_optimizer_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15moptimizer_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mAdamW[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mweight_decay[39m[38;5;197m=[39m[38;5;141m0.05[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_enabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mgrad_clip_norm[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mapply_decay_param_fun[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr_multiplier[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_lr_scheduler_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mmax_iters[39m[38;5;197m=[39m[38;5;141m900000[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mwarmup_iters[39m[38;5;197m=[39m[38;5;141m1500[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_steps[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m720000[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msolver_gamma[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mbase_lr[39m[38;5;197m=[39m[38;5;141m1e-4[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15msched[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mCosineAnnealingLR[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# data settings[39m
[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m7000[39m
[38;5;15mepochs[39m[38;5;197m=[39m[38;5;141m120[39m
[38;5;242m# dataloader.train.task_loaders.segmentation.total_batch_size = 2 * 8   # 7k samples 100e [39m
[38;5;242m# dataloader.train.task_loaders.fgvc.total_batch_size = 16 * 8  # 8.1k 300e[39m
[38;5;242m# dataloader.train.task_loaders.trafficsign.total_batch_size = 2 * 8  # 6.1k  240e[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m   [39m[38;5;242m# 7k samples 100e [39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mfgvc[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m8[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 8.1k 300e[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15mtrafficsign[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m4[39m[38;5;15m  [39m[38;5;242m# 6.1k  240e[39m

[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15msample_num[39m[38;5;15m [39m[38;5;197m/[39m[38;5;197m/[39m[38;5;15m [39m[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtask_loaders[39m[38;5;197m.[39m[38;5;15msegmentation[39m[38;5;197m.[39m[38;5;15mtotal_batch_size[39m

[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;15mepochs[39m

[38;5;242m# optimizer[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m

[38;5;242m# 默认配置4卡A100 40G 才是这个学习率[39m
[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 1e-4[39m
[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mbase_lr[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15mlearning_rate[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m0.5e-4[39m

[38;5;242m# optimizer.base_lr = optimizer.lr_multiplier.learning_rate = 0.433e-4[39m

[38;5;15moptimizer[39m[38;5;197m.[39m[38;5;15mlr_multiplier[39m[38;5;197m.[39m[38;5;15msolver_steps[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mint[39m[38;5;15m([39m[38;5;15mmax_iters[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m0.8[39m[38;5;15m)[39m[38;5;15m][39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mmax_iter[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mmax_iters[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15meval_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mperiod[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mint[39m[38;5;15m([39m[38;5;15miters_per_epoch[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mcheckpointer[39m[38;5;197m.[39m[38;5;15mmax_to_keep[39m[38;5;197m=[39m[38;5;141m15[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mNone[39m
[38;5;242m# train.init_checkpoint = 'pretrained/maskformer_ade20k_swin_tiny.pdparams'[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/swinbase_joint_training_230730_1[39m[38;5;186m'[39m

[38;5;242m# resume settings (remember last_checkpoint and --resume)[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mlog_period[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m20[39m

[08/05 00:46:09 ufo]: Full config saved to outputs/swinbase_joint_training_230730_1/config.yaml
data_set: <data.datasets.bdd100k_datasets.BDD100K object at 0x7f26a83eb250>
BDD100K has 7000 samples
loading annotations into memory...
Done (t=0.22s)
creating index...
index created!
COCODataSet has 6103 samples
[08/05 00:46:15 ufo]: Autoscale fgvc number of classes: 196
[08/05 00:46:15 ufo]: {'train': {'output_dir': 'outputs/swinbase_joint_training_230730_1', 'sacred': {'enabled': True}, 'init_checkpoint': '/root/autodl-tmp/Open-TransMind/PAZHOU/base/outputs/swinbase_joint_training_230730_1/model_0187249.pdmodel', 'amp': {'enabled': False}, 'cudnn_benchmark': True, 'ddp': {'broadcast_buffers': False, 'find_unused_parameters': True, 'fp16_compression': False}, 'max_iter': 210000, 'checkpointer': {'period': 1750, 'max_to_keep': 15}, 'eval_period': 1750, 'log_period': 20, 'device': 'gpu'}, 'dataloader': {'train': {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'min_scale_factor': 0.5, 'max_scale_factor': 2.0, 'scale_step_size': 0.05, '_target_': <class 'data.transforms.seg_transforms.ResizeStepScaling'>}, {'crop_size': [1280, 736], '_target_': <class 'data.transforms.seg_transforms.RandomPaddingCrop'>}, {'_target_': <class 'data.transforms.seg_transforms.RandomHorizontalFlip'>}, {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0, '_target_': <class 'data.transforms.seg_transforms.RandomDistort'>}, {'num_classes': 19, 'ignore_index': 255, '_target_': <class 'data.transforms.seg_transforms.GenerateInstanceTargets'>}, {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'train', '_target_': <function build_segmentation_dataset at 0x7f26b48610d0>}, 'total_batch_size': 4, 'worker_num': 8, 'drop_last': True, 'shuffle': True, 'num_classes': 19, 'is_train': True, '_target_': <function build_segmentation_trainloader at 0x7f26b486d940>}, 'fgvc': {'sampler_config': {'sampler_name': 'ClassAwareSampler'}, 'train_set': {'names': ['FGVCDataset'], 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': True, 'size_train': [448, 448], 'do_rea': True, 'rea_prob': 0.5, 'do_flip': True, 'do_autoaug': True, 'autoaug_prob': 0.5, 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f26b48723a0>}, 'num_classes': 196, '_target_': <function build_hierachical_softmax_train_set at 0x7f26b44e9940>}, 'total_batch_size': 32, 'num_workers': 8, '_target_': <function build_vehiclemulti_train_loader_lazy at 0x7f26b44e99d0>}, 'trafficsign': {'data_set': {'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'RandomFlip': {'prob': 0.5}}, {'RandomSelect': {'transforms1': [{'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}], 'transforms2': [{'RandomShortSideResize': {'short_side_sizes': [400, 500, 600, 700, 800, 900, 1000, 1100, 1200]}}, {'RandomSizeCrop': {'min_size': 400, 'max_size': 1200}}, {'RandomShortSideResize': {'short_side_sizes': [416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120], 'max_size': 1120}}]}}, {'RandomDistort': {'brightness_range': 0.3, 'brightness_prob': 1.0, 'contrast_range': 0.5, 'contrast_prob': 1.0, 'saturation_range': 0.5, 'saturation_prob': 1.0, 'hue_range': 18, 'hue_prob': 1.0, 'sharpness_range': 0.5, 'sharpness_prob': 1.0}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'NormalizeBox': {}}, {'BboxXYXY2XYWH': {}}, {'Permute': {}}], 'image_dir': 'train', 'anno_path': 'train.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'is_crowd'], '_target_': <function build_cocodet_set at 0x7f26b44ed550>}, 'total_batch_size': 4, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': -1, 'return_pad_mask': True}}], 'is_train': True, 'shuffle': True, 'drop_last': True, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f26b44ed4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, 'test': [{'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'segmentation': {'data_set': {'dataset_name': 'BDD100K', 'dataset_root': 'datasets/train_data/seg/', 'transforms': [{'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225], '_target_': <class 'data.transforms.seg_transforms.Normalize'>}], 'mode': 'val', 'is_padding': True, '_target_': <function build_segementation_test_dataset at 0x7f26b486d9d0>}, 'total_batch_size': 8, 'worker_num': 8, 'drop_last': False, 'shuffle': False, 'num_classes': 19, 'is_train': False, '_target_': <function build_segmentation_trainloader at 0x7f26b486d940>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'fgvc': {'test_set': {'dataset_name': 'FGVCDataset', 'train_dataset_dir': 'datasets/train_data/cls/train/', 'test_dataset_dir': 'datasets/train_data/cls/val/', 'train_label': 'datasets/train_data/cls/train.txt', 'test_label': 'datasets/train_data/cls/val.txt', 'transforms': {'is_train': False, 'size_test': [448, 448], 'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.120000000000005, 57.375], '_target_': <function build_transforms_lazy at 0x7f26b48723a0>}, 'is_train': True, '_target_': <function build_hierachical_test_set at 0x7f26b44e1c10>}, 'test_batch_size': 8, 'num_workers': 8, '_target_': <function build_reid_test_loader_lazy at 0x7f26b4a6cdc0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}, {'cfg': {'sample_mode': 'batch'}, 'task_loaders': {'trafficsign': {'data_set': {'is_padding': True, 'dataset_name': 'COCODataSet', 'transforms': [{'Decode': {}}, {'Resize': {'target_size': [736, 736], 'keep_ratio': False}}, {'NormalizeImage': {'is_scale': True, 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}}, {'Permute': {}}], 'image_dir': 'val', 'anno_path': 'val.json', 'dataset_dir': 'datasets/train_data/dec/', 'data_fields': ['image', 'gt_bbox', 'gt_class', 'difficult'], '_target_': <function build_cocodet_set at 0x7f26b44ed550>}, 'total_batch_size': 8, 'num_workers': 8, 'batch_transforms': [{'PadMaskBatch': {'pad_to_stride': 32, 'return_pad_mask': False}}], 'is_train': False, 'shuffle': False, 'drop_last': False, 'collate_batch': False, '_target_': <function build_cocodet_loader_lazy at 0x7f26b44ed4c0>}, '_target_': <class 'collections.OrderedDict'>}, '_target_': <class 'data.build.MultiTaskDataLoader'>}]}, 'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'model': {'backbone': {'_target_': <class 'modeling.backbones.swin_transformer.SwinTransformer_small_patch4_window7_224_maskformer'>}, 'pretrained': True, 'pretrain_path': 'pretrained/SwinTransformer_small_patch4_window7_224_pretrained.pdparams', 'heads': {'segmentation': {'num_classes': 19, 'loss': {'num_classes': 19, 'eos_coef': 0.1, '_target_': <class 'modeling.losses.maskformer_loss.MaskFormerLoss'>}, '_target_': <class 'modeling.heads.maskformer_head.MaskFormer'>}, 'fgvc': {'embedding_size': 384, 'class_num': 196, '_target_': <class 'modeling.heads.swin_cls_head.SwinClsHead'>, 'num_classes': 196}, 'trafficsign': {'transformer': {'num_classes': 45, 'hidden_dim': 256, 'num_queries': 900, 'position_embed_type': 'sine', 'return_intermediate_dec': True, 'backbone_feat_channels': [96, 192, 384, 768], 'num_levels': 4, 'num_encoder_points': 4, 'num_decoder_points': 4, 'nhead': 8, 'num_encoder_layers': 6, 'num_decoder_layers': 6, 'dim_feedforward': 2048, 'dropout': 0.0, 'activation': 'relu', 'num_denoising': 100, 'label_noise_ratio': 0.5, 'box_noise_scale': 1.0, 'learnt_init_query': True, 'eps': 0.01, '_target_': <class 'ppdet.modeling.transformers.dino_transformer.DINOTransformer'>}, 'detr_head': {'loss': {'num_classes': 45, 'loss_coeff': {'class': 1, 'bbox': 5, 'giou': 2, 'no_object': 0.1, 'mask': 1, 'dice': 1}, 'aux_loss': True, 'use_focal_loss': True, 'matcher': {'matcher_coeff': {'class': 2, 'bbox': 5, 'giou': 2}, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.transformers.matchers.HungarianMatcher'>}, '_target_': <class 'ppdet.modeling.losses.detr_loss.DINOLoss'>}, '_target_': <class 'ppdet.modeling.heads.detr_head.DINOHead'>}, 'post_process': {'num_classes': 45, 'num_top_queries': 50, 'use_focal_loss': True, '_target_': <class 'ppdet.modeling.post_process.DETRBBoxPostProcess'>}, '_target_': <class 'modeling.heads.detr.DETR'>}, '_target_': <class 'collections.OrderedDict'>}, 'pixel_mean': [123.675, 116.28, 103.53], 'pixel_std': [58.395, 57.120000000000005, 57.375], '_target_': <class 'modeling.meta_arch.multitask_v3.MultiTaskBatchFuse'>}, 'optimizer': {'optimizer_type': 'AdamW', 'base_lr': 5e-05, 'weight_decay': 0.05, 'grad_clip_enabled': True, 'grad_clip_norm': 0.1, 'apply_decay_param_fun': None, 'lr_multiplier': {'max_iters': 210000, 'warmup_iters': 1500, 'solver_steps': [168000], 'solver_gamma': 0.1, 'base_lr': 0.0001, 'sched': 'CosineAnnealingLR', '_target_': <function build_lr_scheduler_lazy at 0x7f278e9db700>, 'learning_rate': 5e-05}, '_target_': <function build_lr_optimizer_lazy at 0x7f278e9db670>}}
**************************************************
load pretrained
backbone missing keys: ['norm0.weight', 'norm0.bias', 'norm1.weight', 'norm1.bias', 'norm2.weight', 'norm2.bias', 'norm3.weight', 'norm3.bias']
backbone unexpected keys: ['norm.weight', 'norm.bias', 'head.weight', 'head.bias', 'layers.0.blocks.1.attn_mask', 'layers.1.blocks.1.attn_mask', 'layers.2.blocks.1.attn_mask', 'layers.2.blocks.3.attn_mask', 'layers.2.blocks.5.attn_mask', 'layers.2.blocks.7.attn_mask', 'layers.2.blocks.9.attn_mask', 'layers.2.blocks.11.attn_mask', 'layers.2.blocks.13.attn_mask', 'layers.2.blocks.15.attn_mask', 'layers.2.blocks.17.attn_mask']
**************************************************
[08/05 00:46:23 ufo]: Optim:
Weight Decay, params: 
missing keys: []
unexpected keys: []
./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/home/amax/DATA_HHD2/Lian.qy/miniconda3/envs/pcdet_1/lib/python3.7/site-packages/torchvision/transforms/functional_pil.py:207: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR, max_size=None):
/home/amax/DATA_HHD2/Lian.qy/miniconda3/envs/pcdet_1/lib/python3.7/site-packages/torchvision/transforms/functional_pil.py:283: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
rank is 3, world size is 4
I0810 19:41:17.181751 1969356 gen_comm_id_helper.cc:205] Server listening on: 127.0.0.1:37719 successful.
I0810 19:41:20.052707 1969356 nccl_context.cc:83] init nccl context nranks: 4 local rank: 3 gpu id: 3 ring id: 0
W0810 19:41:20.532526 1969356 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 12.0, Runtime API Version: 11.1
W0810 19:41:20.537106 1969356 gpu_resources.cc:91] device: 3, cuDNN Version: 8.2.
[08/10 19:41:23 ufo]: Rank of current process: 0. World size: 1
[08/10 19:41:28 ufo]: Environment info:
----------------------  ----------------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
numpy                   1.21.6
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Build cuda_11.1.TC455_06.29069683_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.1+cu111 @/home/amax/DATA_HHD2/Lian.qy/miniconda3/envs/pcdet_1/lib/python3.7/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA GeForce RTX 3090 (arch={cap})
Driver version          525.125.06
CUDA_HOME               /usr/local/cuda-11.1
Pillow                  9.1.1
torchvision             0.10.1+cu111 @/home/amax/DATA_HHD2/Lian.qy/miniconda3/envs/pcdet_1/lib/python3.7/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     4.8.0
----------------------  ----------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/10 19:41:28 ufo]: Command line arguments: Namespace(config_file='configs/test_swin_small_230730_1.py', dist_url='tcp://127.0.0.1:50167', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/10 19:41:28 ufo]: Contents of args.config_file=configs/test_swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeByShort[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluatorInfer[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_test_set[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTaskInfer[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTaskInfer[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mInferDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/test_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtest[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCInferDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/test_data/cls/test/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# infer mode[39m
[38;5;15m                    [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCOInferDataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;242m# dict(MultiscaleTestResize=dict([39m
[38;5;15m                        [39m[38;5;242m#     origin_target_size=[2048, 2048],[39m
[38;5;15m                        [39m[38;5;242m#     target_size=[1024, 1024],[39m
[38;5;15m                        [39m[38;5;242m#     use_flip=True[39m
[38;5;15m                        [39m[38;5;242m# )),[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtest.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# 可以采用验证集或训练集json,只是为了获取类别ID映射关系[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/test_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mim_id[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mim_file[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mevaluator[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m[38;5;242m# segmentation[39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSegEvaluatorInfer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# infer mode[39m

[38;5;15m    [39m[38;5;242m# classification[39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCommonClasEvaluatorSingleTaskInfer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m   [39m[38;5;242m# infer mode[39m

[38;5;15m    [39m[38;5;242m# detection[39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCocoDetEvaluatorSingleTaskInfer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mclasswise[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15moutput_eval[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m[38;5;15m     [39m
[38;5;15m        [39m[38;5;15mbias[39m[38;5;197m=[39m[38;5;141m0[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mIouType[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15msave_prediction_only[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mparallel_evaluator[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mnum_valid_samples[39m[38;5;197m=[39m[38;5;141m3067[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# infer mode[39m

[38;5;15m][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m

[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_tiny_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/home/Lian.qy/HHD2/Open-TransMind/PAZHOU/base/averaged_model_weights_fade_aug.pdparams[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/test_swin_small_230730_1[39m[38;5;186m'[39m

[08/10 19:41:28 ufo]: Full config saved to outputs/test_swin_small_230730_1/config.yaml
missing keys: []
unexpected keys: []
InferDataset has 1000 samples
InferDataset has 1000 samples after padding
rank 3 has 250 items
loading annotations into memory...
Done (t=0.02s)
creating index...
index created!
COCOInferDataSet has 3067 samples
COCOInferDataSet has 3068 samples after padding
rank 3 has 767 items
========== InferDataset ==========
========== FGVCInferDataset ==========
========== COCOInferDataSet ==========
./detectron2/data/transforms/transform.py:46: DeprecationWarning: LINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, src_rect, output_size, interp=Image.LINEAR, fill=0):
./detectron2/data/transforms/augmentation_impl.py:113: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def __init__(self, shape, interp=Image.BILINEAR):
./detectron2/data/transforms/augmentation_impl.py:140: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  self, short_edge_length, max_size=sys.maxsize, sample_style="range", interp=Image.BILINEAR
./detectron2/data/transforms/augmentation_impl.py:214: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interp: int = Image.BILINEAR,
/home/amax/DATA_HHD2/Lian.qy/miniconda3/envs/pcdet_1/lib/python3.7/site-packages/torchvision/transforms/functional_pil.py:207: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  def resize(img, size, interpolation=Image.BILINEAR, max_size=None):
/home/amax/DATA_HHD2/Lian.qy/miniconda3/envs/pcdet_1/lib/python3.7/site-packages/torchvision/transforms/functional_pil.py:283: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  def perspective(img, perspective_coeffs, interpolation=Image.BICUBIC, fill=None):
rank is 3, world size is 4
I0810 19:54:04.826045 1988791 gen_comm_id_helper.cc:205] Server listening on: 127.0.0.1:46727 successful.
I0810 19:54:07.831720 1988791 nccl_context.cc:83] init nccl context nranks: 4 local rank: 3 gpu id: 3 ring id: 0
W0810 19:54:08.375332 1988791 gpu_resources.cc:61] Please NOTE: device: 3, GPU Compute Capability: 8.6, Driver API Version: 12.0, Runtime API Version: 11.1
W0810 19:54:08.381929 1988791 gpu_resources.cc:91] device: 3, cuDNN Version: 8.2.
[08/10 19:54:10 ufo]: Rank of current process: 0. World size: 1
[08/10 19:54:16 ufo]: Environment info:
----------------------  ----------------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
numpy                   1.21.6
detectron2              imported a wrong installation
detectron2._C           not built correctly: {e}
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Build cuda_11.1.TC455_06.29069683_0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.1+cu111 @/home/amax/DATA_HHD2/Lian.qy/miniconda3/envs/pcdet_1/lib/python3.7/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA GeForce RTX 3090 (arch={cap})
Driver version          525.125.06
CUDA_HOME               /usr/local/cuda-11.1
Pillow                  9.1.1
torchvision             0.10.1+cu111 @/home/amax/DATA_HHD2/Lian.qy/miniconda3/envs/pcdet_1/lib/python3.7/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     4.8.0
----------------------  ----------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/10 19:54:16 ufo]: Command line arguments: Namespace(config_file='configs/test_swin_small_230730_1.py', dist_url='tcp://127.0.0.1:50167', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/10 19:54:16 ufo]: Contents of args.config_file=configs/test_swin_small_230730_1.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15m.[39m[38;5;15mcommon[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mtrain[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15mos[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mcollections[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOrderedDict[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdetectron2[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mL[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskDataLoader[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmeta_arch[39m[38;5;15m.[39m[38;5;15mmultitask_v3[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMultiTaskBatchFuse[39m

[38;5;242m# segmentation[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mseg_transforms[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mNormalize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResize[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mResizeByShort[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_segmentation[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m\[39m
[38;5;15m    [39m[38;5;15mbuild_segementation_test_dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15msegmentation_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSegEvaluatorInfer[39m

[38;5;242m# classification[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_reid_test_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mtransforms[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_transforms_lazy[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_cls[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_hierachical_test_set[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcommon_cls_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCommonClasEvaluatorSingleTaskInfer[39m

[38;5;242m# detection[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild_trafficsign[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_cocodet_set[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_cocodet_loader_lazy[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mevaluation[39m[38;5;15m.[39m[38;5;15mcocodet_evaluator[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mCocoDetEvaluatorSingleTaskInfer[39m

[38;5;15mdataloader[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15m_root[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mos[39m[38;5;197m.[39m[38;5;15mgetenv[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mFASTREID_DATASETS[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdatasets[39m[38;5;186m"[39m[38;5;15m)[39m

[38;5;15mseg_num_classes[39m[38;5;197m=[39m[38;5;141m19[39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于构建对应的train/eval Dataset, 需提供样本及标签;[39m
[38;5;242m# infer模式用于构建InferDataset, 只需提供测试数据, 最终生成结果文件用于提交评测, 在训练时可将该部分代码注释减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtest[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segmentation_trainloader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_segementation_test_dataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mInferDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdataset_root[39m[38;5;197m=[39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/test_data/seg/[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                        [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                            [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mNormalize[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                                [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m
[38;5;15m                        [39m[38;5;15m)[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtest[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mworker_num[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_reid_test_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mtest_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_hierachical_test_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mFGVCInferDataset[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtest_dataset_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/test_data/cls/test/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_transforms_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                        [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15msize_test[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m448[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m448[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# infer mode[39m
[38;5;15m                    [39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtest_batch_size[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskDataLoader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15msample_mode[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbatch[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mtask_loaders[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m           [39m
[38;5;15m            [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_loader_lazy[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mdata_set[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mbuild_cocodet_set[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                    [39m[38;5;15mis_padding[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdataset_name[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mCOCOInferDataSet[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mtransforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mDecode[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mResize[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mtarget_size[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m1280[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m1280[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mkeep_ratio[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;242m# dict(MultiscaleTestResize=dict([39m
[38;5;15m                        [39m[38;5;242m#     origin_target_size=[2048, 2048],[39m
[38;5;15m                        [39m[38;5;242m#     target_size=[1024, 1024],[39m
[38;5;15m                        [39m[38;5;242m#     use_flip=True[39m
[38;5;15m                        [39m[38;5;242m# )),[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mNormalizeImage[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mis_scale[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mmean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m][39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                            [39m[38;5;15mstd[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m][39m[38;5;15m)[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                        [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPermute[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mimage_dir[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mtest.txt[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15manno_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mval.json[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# 可以采用验证集或训练集json,只是为了获取类别ID映射关系[39m
[38;5;15m                    [39m[38;5;15mdataset_dir[39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m_root[39m[38;5;15m [39m[38;5;197m+[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/test_data/dec/[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                    [39m[38;5;15mdata_fields[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;186m'[39m[38;5;186mimage[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mim_id[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mim_file[39m[38;5;186m'[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mtotal_batch_size[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mbatch_transforms[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m                    [39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mPadMaskBatch[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15mpad_to_stride[39m[38;5;197m=[39m[38;5;141m32[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mreturn_pad_mask[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mis_train[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15mshuffle[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mdrop_last[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m                [39m[38;5;15mcollate_batch[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m    [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m][39m

[38;5;242m# NOTE[39m
[38;5;242m# trian/eval模式用于eval;[39m
[38;5;242m# infer模式则用于生成测试集预测结果(可直接提交评测), 在训练时可注释该部分代码减少不必要评测[39m

[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mevaluator[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15m[[39m
[38;5;15m    [39m[38;5;242m# segmentation[39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSegEvaluatorInfer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# infer mode[39m

[38;5;15m    [39m[38;5;242m# classification[39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCommonClasEvaluatorSingleTaskInfer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mcfg[39m[38;5;197m=[39m[38;5;15mdict[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;141m196[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m   [39m[38;5;242m# infer mode[39m

[38;5;15m    [39m[38;5;242m# detection[39m
[38;5;15m    [39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mCocoDetEvaluatorSingleTaskInfer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mclasswise[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15moutput_eval[39m[38;5;197m=[39m[38;5;81mNone[39m[38;5;15m,[39m[38;5;15m     [39m
[38;5;15m        [39m[38;5;15mbias[39m[38;5;197m=[39m[38;5;141m0[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mIouType[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mbbox[39m[38;5;186m'[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15msave_prediction_only[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mparallel_evaluator[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15mnum_valid_samples[39m[38;5;197m=[39m[38;5;141m3067[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m[38;5;15m  [39m[38;5;242m# infer mode[39m

[38;5;15m][39m



[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mShapeSpec[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mbackbones[39m[38;5;15m.[39m[38;5;15mswin_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mswin_cls_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mSwinClsHead[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETR[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mdino_transformer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOTransformer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mtransformers[39m[38;5;15m.[39m[38;5;15mmatchers[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mHungarianMatcher[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mdetr_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOHead[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mpost_process[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDETRBBoxPostProcess[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mppdet[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mdetr_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mDINOLoss[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mheads[39m[38;5;15m.[39m[38;5;15mmaskformer_head[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormer[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mlosses[39m[38;5;15m.[39m[38;5;15mmaskformer_loss[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mMaskFormerLoss[39m

[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinTransformer_small_patch4_window7_224_maskformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m)[39m

[38;5;15mtrafficsign_num_classes[39m[38;5;197m=[39m[38;5;141m45[39m
[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMultiTaskBatchFuse[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mbackbone[39m[38;5;197m=[39m[38;5;15mbackbone[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrained[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpretrain_path[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mpretrained/SwinTransformer_tiny_patch4_window7_224_pretrained.pdparams[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mheads[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mOrderedDict[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15msegmentation[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mMaskFormerLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mseg_num_classes[39m[38;5;15m,[39m
[38;5;15m                [39m[38;5;15meos_coef[39m[38;5;197m=[39m[38;5;141m0.1[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mfgvc[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mSwinClsHead[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15membedding_size[39m[38;5;197m=[39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m            [39m[38;5;15mclass_num[39m[38;5;197m=[39m[38;5;141m196[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m

[38;5;15m        [39m[38;5;15mtrafficsign[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mtransformer[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOTransformer[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mhidden_dim[39m[38;5;197m=[39m[38;5;141m256[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_queries[39m[38;5;197m=[39m[38;5;141m900[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mposition_embed_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186msine[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mreturn_intermediate_dec[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbackbone_feat_channels[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m96[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m192[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m384[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m768[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_levels[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_points[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnhead[39m[38;5;197m=[39m[38;5;141m8[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_encoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_decoder_layers[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdim_feedforward[39m[38;5;197m=[39m[38;5;141m2048[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mdropout[39m[38;5;197m=[39m[38;5;141m0.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mactivation[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186mrelu[39m[38;5;186m"[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_denoising[39m[38;5;197m=[39m[38;5;141m100[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlabel_noise_ratio[39m[38;5;197m=[39m[38;5;141m0.5[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mbox_noise_scale[39m[38;5;197m=[39m[38;5;141m1.0[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mlearnt_init_query[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15meps[39m[38;5;197m=[39m[38;5;141m1e-2[39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mdetr_head[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOHead[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15mloss[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDINOLoss[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mloss_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mno_object[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mmask[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdice[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15maux_loss[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mmatcher[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mHungarianMatcher[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                                [39m[38;5;15mmatcher_coeff[39m[38;5;197m=[39m[38;5;15m{[39m[38;5;186m"[39m[38;5;186mclass[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbbox[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mgiou[39m[38;5;186m"[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m[38;5;15m}[39m[38;5;15m,[39m
[38;5;15m                                [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m[38;5;15m)[39m[38;5;15m   [39m
[38;5;15m                            [39m[38;5;15m)[39m
[38;5;15m           [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mpost_process[39m[38;5;197m=[39m[38;5;15mL[39m[38;5;15m([39m[38;5;15mDETRBBoxPostProcess[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m                            [39m[38;5;15mnum_classes[39m[38;5;197m=[39m[38;5;15mtrafficsign_num_classes[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15mnum_top_queries[39m[38;5;197m=[39m[38;5;141m50[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15muse_focal_loss[39m[38;5;197m=[39m[38;5;15muse_focal_loss[39m[38;5;15m,[39m
[38;5;15m                            [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_mean[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.485[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.456[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.406[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mpixel_std[39m[38;5;197m=[39m[38;5;15m[[39m[38;5;141m0.229[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.224[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m,[39m[38;5;15m [39m[38;5;141m0.225[39m[38;5;15m [39m[38;5;197m*[39m[38;5;15m [39m[38;5;141m255[39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minit_checkpoint[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m/home/Lian.qy/HHD2/Open-TransMind/PAZHOU/base/averaged_model_weights_fade_aug.pdparams[39m[38;5;186m'[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186moutputs/test_swin_small_230730_1[39m[38;5;186m'[39m

[08/10 19:54:16 ufo]: Full config saved to outputs/test_swin_small_230730_1/config.yaml
missing keys: []
unexpected keys: []
InferDataset has 1000 samples
InferDataset has 1000 samples after padding
rank 3 has 250 items
loading annotations into memory...
Done (t=0.02s)
creating index...
index created!
COCOInferDataSet has 3067 samples
COCOInferDataSet has 3068 samples after padding
rank 3 has 767 items
========== InferDataset ==========
seg_inference_on_test_dataset
  0%|          | 0/250 [00:00<?, ?it/s]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
  2%|▏         | 4/250 [00:11<11:38,  2.84s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
  4%|▍         | 10/250 [00:22<08:28,  2.12s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
  6%|▋         | 16/250 [00:32<07:37,  1.96s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
  9%|▉         | 22/250 [00:43<07:08,  1.88s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 11%|█         | 28/250 [00:54<06:51,  1.85s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 14%|█▎        | 34/250 [01:05<06:37,  1.84s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 16%|█▌        | 40/250 [01:15<06:21,  1.82s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 18%|█▊        | 46/250 [01:26<06:10,  1.82s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 21%|██        | 52/250 [01:37<05:56,  1.80s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 23%|██▎       | 58/250 [01:47<05:44,  1.79s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 26%|██▌       | 64/250 [01:58<05:35,  1.80s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 28%|██▊       | 70/250 [02:09<05:23,  1.80s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 28%|██▊       | 70/250 [02:19<05:23,  1.80s/it] 30%|███       | 76/250 [02:20<05:11,  1.79s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 33%|███▎      | 82/250 [02:31<05:02,  1.80s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 35%|███▌      | 88/250 [02:41<04:49,  1.79s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 38%|███▊      | 94/250 [02:52<04:38,  1.78s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 40%|████      | 100/250 [03:03<04:30,  1.80s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 42%|████▏     | 106/250 [03:13<04:17,  1.79s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 45%|████▍     | 112/250 [03:24<04:05,  1.78s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 47%|████▋     | 118/250 [03:35<03:55,  1.78s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 50%|████▉     | 124/250 [03:45<03:44,  1.78s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 52%|█████▏    | 130/250 [03:57<03:36,  1.80s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 54%|█████▍    | 136/250 [04:07<03:24,  1.80s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 57%|█████▋    | 142/250 [04:18<03:13,  1.79s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 59%|█████▉    | 148/250 [04:28<03:01,  1.78s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 62%|██████▏   | 154/250 [04:39<02:51,  1.78s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 62%|██████▏   | 154/250 [04:49<02:51,  1.78s/it] 64%|██████▍   | 160/250 [04:50<02:39,  1.77s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 66%|██████▋   | 166/250 [05:01<02:31,  1.81s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 69%|██████▉   | 172/250 [05:12<02:20,  1.80s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 71%|███████   | 178/250 [05:22<02:08,  1.79s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 74%|███████▎  | 184/250 [05:33<01:57,  1.78s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 76%|███████▌  | 190/250 [05:43<01:46,  1.78s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 78%|███████▊  | 196/250 [05:54<01:35,  1.78s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 81%|████████  | 202/250 [06:05<01:25,  1.78s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 83%|████████▎ | 208/250 [06:16<01:16,  1.82s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 86%|████████▌ | 214/250 [06:27<01:05,  1.81s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 88%|████████▊ | 220/250 [06:38<00:53,  1.80s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 90%|█████████ | 226/250 [06:48<00:43,  1.80s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 93%|█████████▎| 232/250 [06:59<00:32,  1.79s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 93%|█████████▎| 232/250 [07:10<00:32,  1.79s/it] 95%|█████████▌| 238/250 [07:10<00:21,  1.79s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
 98%|█████████▊| 244/250 [07:20<00:10,  1.78s/it]scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
scales: [1.0, 1.2, 1.4, 1.6, 1.8, 2.0]
100%|██████████| 250/250 [07:31<00:00,  1.78s/it]100%|██████████| 250/250 [07:31<00:00,  1.81s/it]
========== FGVCInferDataset ==========
scales: [0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]
========== COCOInferDataSet ==========
